{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nSmartClinic is a comprehensive healthcare management system built as a full-stack web application. It serves multiple user roles including patients, doctors, staff, and administrators, providing features for appointment management, patient queuing, medication reminders, home visits, and staff verification with GPS tracking. The application aims to streamline clinic operations, ensuring security and an optimal user experience across various healthcare workflows.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes (August 2025)\n- **Live Queue Management System Complete**: Successfully implemented and demonstrated comprehensive healthcare queue system:\n  - Fixed patient queue position logic to prioritize today's appointments over future ones\n  - Created realistic medical scenarios with 3 active queue tokens for Aug 12, 2025\n  - Token #1: Soham Banerjee (IN PROGRESS) - blood pressure monitoring with Dr. Rajesh Patel\n  - Token #2: Patient (CALLED) - 15min wait for medication follow-up at 4:30 PM  \n  - Token #3: Patient (WAITING) - 60min wait for stomach pain consultation at 5:00 PM\n  - WebSocket real-time updates functioning correctly with live queue position broadcasts\n  - Patient dashboard correctly shows \"Queue Position #1\" with proper privacy protection\n  - Admin queue data properly secured from patient access (HIPAA-compliant privacy)\n  - Queue position API prioritizes today's appointments using proper date filtering\n  - Fixed syntax errors in storage.ts getPatientQueuePosition method\n  - Complete healthcare workflow demonstration ready for admin queue management testing\n- **Patient Medicine Management Fix**: Fixed critical issues with patient medicine functionality:\n  - Resolved dashboard blank screen error caused by undefined reminder.prescription.medicine\n  - Fixed medicine name display in \"Today's Reminders\" by using correct data structure (medicineName)\n  - Fixed time display inconsistency between \"My Medicines\" and \"Today's Reminders\" sections\n  - Created dedicated createPatientMedicine method for patient-only medicine management\n  - Removed clinic dependency from patient medicine operations\n  - Patient medicines now work completely independently from admin/clinic systems\n  - Fixed both \"Add Medicine\" and \"Upload List\" functionality for patients\n  - Backend returns flat reminder properties (medicineName, dosage) which frontend now correctly accesses\n  - **Indian Standard Time Fix**: Fixed comprehensive timezone handling across the entire system:\n    - **Medicine Reminders**: Server properly converts IST to UTC when storing reminders (IST - 5:30 hours)\n    - **Medicine Reminders**: Frontend displays all times in Indian Standard Time (Asia/Kolkata)\n    - **Medicine Reminders**: Fixed time mismatch issue between \"My Medicines\" and \"Today's Reminders\"\n    - **Medicine Reminders**: All medicine reminder times consistently show in IST format\n    - **Medicine Reminders**: Email notifications correctly format reminder times in IST (Asia/Kolkata timezone)\n    - **Appointment Emails**: Fixed ALL appointment email notifications to use proper IST timezone formatting\n    - **Appointment Emails**: Appointment approval, rejection, reschedule, and SMS notifications now show correct IST times\n    - **Appointment Emails**: Admin dashboard stats logging now uses IST for date display consistency\n    - **Appointment Emails**: Test endpoints also updated to use proper IST timezone formatting\n    - Added formatTime helper function to dashboard for consistent time display across all pages\n    - Fixed scheduler service to properly format email reminder times in Indian Standard Time\n    - Both medicine AND appointment email systems now use consistent 'en-IN' locale with 'Asia/Kolkata' timezone\n    - Existing reminders created before timezone fix may show incorrect times (stored as UTC but intended as IST)\n- **Mobile UI Optimization**: Applied comprehensive mobile-first design improvements:\n  - Fixed critical button overflow issues in admin dashboard appointments and patient records sections\n  - Added mobile-responsive button containers with proper wrapping and sizing constraints\n  - Implemented text truncation and flex controls to prevent content overflow\n  - Created mobile-card-buttons CSS class with responsive sizing for different screen sizes\n  - Added ultra-responsive design support for very small screens (under 480px width)\n  - Applied mobile-optimized styling with proper touch targets and safe area support\n- **CRITICAL Security Fixes**: Fixed major authentication vulnerabilities:\n  - Removed hardcoded JWT token from admin dashboard (line 860)\n  - Implemented proper route-level authentication protection\n  - Added role-based access control for all routes\n  - Prevents unauthorized access to admin, staff, and patient pages\n- **Google OAuth Authentication Fix**: Fixed \"account doesn't exist\" error for Google login:\n  - Improved backend Firebase login logic to properly link existing email accounts with Google OAuth\n  - Enhanced error handling to provide clear messages when account needs to be created first\n  - Users who registered with email/password can now successfully login with Google OAuth\n  - Backend automatically updates existing accounts with Firebase UID when Google login is used\n- **Super Admin Access Control**: Implemented strict admin access restriction:\n  - Only 44441100sf@gmail.com can access admin dashboard and functions\n  - Added SuperAdminRoute component for frontend protection\n  - Added requireSuperAdmin middleware for backend API protection\n  - Protected critical routes: user management, dashboard stats, reports, medicine management\n  - Unauthorized users redirected to appropriate dashboards with clear error messages\n- **Email Notifications**: Added automatic email notifications for new clinic registrations sent to 44441100sf@gmail.com using existing Gmail SMTP\n- **Dark Mode Enhancement**: Implemented independent dark mode toggle for admin dashboard, replacing settings icon with Moon/Sun toggle button for easy theme switching\n- **Firebase Patient Authentication**: Implemented comprehensive Firebase authentication for patients:\n  - Added Firebase configuration with environment variables\n  - Created patient signup page with Google OAuth and email/password options\n  - Created patient login page with same authentication methods\n  - Extended user database schema with firebaseUid and authProvider fields\n  - Added backend API endpoints for Firebase authentication integration\n  - Integrated Firebase auth with existing JWT token system for seamless user experience\n  - **Setup Required**: Both Email/Password and Google authentication methods must be enabled in Firebase Console\n  - Domain authorization needed: `42638f0d-82bc-40ee-b3bd-785d53c6ac2a-00-3rsnhjlr0ddv2.sisko.replit.dev`\n- **Location Update**: Changed clinic location from Mumbai to Bangalore:\n  - Updated GPS coordinates to Bangalore Central Clinic (12.9716, 77.5946)\n  - Added Whitefield Branch, Koramangala Clinic, and Electronic City Clinic locations\n  - Staff GPS verification now works for Bangalore area with 150-200m radius\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite.\n- **UI Library**: Shadcn/ui components built on Radix UI.\n- **Styling**: Tailwind CSS with custom healthcare-themed color variables.\n- **State Management**: TanStack Query for server state management.\n- **Routing**: Wouter for client-side routing.\n- **Form Handling**: React Hook Form with Zod validation.\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework.\n- **Language**: TypeScript with ES modules.\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect.\n- **Authentication**: JWT-based authentication with OTP verification.\n- **Session Management**: Token-based sessions.\n- **Middleware**: Custom authentication, role-based access control, and GPS verification.\n\n## Database Design\n- **Database**: PostgreSQL with Neon serverless connection pooling.\n- **Schema Management**: Drizzle Kit for migrations and schema synchronization.\n- **Key Tables**: Users, appointments, queue tokens, medicines, prescriptions, medical history, staff verifications.\n- **Relationships**: Supports multi-role user management and healthcare workflows.\n\n## Authentication & Authorization\n- **Primary Auth**: Phone number-based OTP authentication.\n- **Multi-factor Elements**: SMS verification.\n- **Role-based Access**: Four user roles (admin, staff, doctor, patient) with hierarchical permissions.\n- **Session Security**: JWT tokens with IP tracking and device fingerprinting.\n- **GPS Verification**: Location-based staff check-in system.\n\n## Real-time Features\n- **Queue Management**: Server-sent events for real-time patient queue updates.\n- **Appointment Notifications**: Automated SMS reminders for appointments and medications.\n- **Staff Coordination**: Live queue status updates for doctors and staff members.\n\n## Deployment Architecture\n- **Build Process**: Vite for frontend bundling, esbuild for backend compilation.\n- **Static Assets**: Served through Express.\n- **Environment**: Development and production configurations.\n- **Database Migrations**: Automated schema synchronization through Drizzle Kit.\n\n# External Dependencies\n\n- **Neon PostgreSQL**: Serverless database.\n- **Twilio**: SMS service for OTP and notification delivery.\n- **@radix-ui/***: UI component primitives.\n- **@tanstack/react-query**: Server state management.\n- **drizzle-orm**: Type-safe database ORM.\n- **bcrypt**: Password and OTP hashing.\n- **jsonwebtoken**: JWT token generation and verification.\n- **node-cron**: Scheduled task management.\n- **tailwindcss**: Utility-first CSS framework.\n- **zod**: Runtime type validation.\n- **wouter**: Client-side routing solution.\n- **lucide-react**: Icon library.","size_bytes":9863},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/page_1754132232103.tsx":{"content":"import {\n  Bell,\n  Calendar,\n  Clock,\n  Home,\n  MapPin,\n  Phone,\n  Settings,\n  AlertTriangle,\n  Pill,\n  Stethoscope,\n  Activity,\n  UserCheck,\n  Zap,\n  User,\n} from \"lucide-react\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Progress } from \"@/components/ui/progress\"\n\nexport default function SmartClinicDashboard() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-gray-200 px-4 sm:px-6 py-4\">\n        <div className=\"flex items-center justify-between max-w-7xl mx-auto\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-blue-500 rounded-lg flex items-center justify-center\">\n              <Stethoscope className=\"w-4 h-4 sm:w-6 sm:h-6 text-white\" />\n            </div>\n            <div className=\"hidden sm:block\">\n              <h1 className=\"text-lg sm:text-xl font-semibold text-gray-900\">SmartClinic</h1>\n              <p className=\"text-xs sm:text-sm text-gray-500\">Healthcare Manager</p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2 sm:gap-4\">\n            <div className=\"relative\">\n              <Bell className=\"w-5 h-5 text-gray-600\" />\n              <div className=\"absolute -top-2 -right-2 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-medium\">\n                3\n              </div>\n            </div>\n\n            <div className=\"flex flex-col items-center gap-1\">\n              <span className=\"text-sm font-medium text-gray-900\">Alex Johnson</span>\n              <Badge className=\"bg-green-500 text-white text-xs px-2 py-1 rounded-full\">Patient</Badge>\n            </div>\n\n            <div className=\"w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center\">\n              <User className=\"w-4 h-4 text-gray-600\" />\n            </div>\n\n            <Settings className=\"w-5 h-5 text-gray-600\" />\n\n            <div className=\"w-5 h-5 text-gray-600\">\n              <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n                <polyline points=\"16,17 21,12 16,7\" />\n                <line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section\n        className=\"bg-gradient-to-r from-blue-500 to-blue-600 px-4 sm:px-6 py-8 sm:py-12 relative overflow-hidden\"\n        style={{\n          backgroundImage: `linear-gradient(rgba(59, 130, 246, 0.8), rgba(37, 99, 235, 0.8)), url('/images/medical-background.png')`,\n          backgroundSize: \"cover\",\n          backgroundPosition: \"center\",\n          backgroundRepeat: \"no-repeat\",\n        }}\n      >\n        <div className=\"max-w-7xl mx-auto relative z-10\">\n          <div className=\"text-white mb-6 sm:mb-8\">\n            <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold mb-2\">Welcome back, Alex!</h2>\n            <p className=\"text-blue-100 text-base sm:text-lg\">Manage your healthcare with smart tools</p>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 items-stretch sm:items-center\">\n            <Button className=\"bg-green-500 hover:bg-green-600 text-white px-4 sm:px-6 py-3 w-full sm:w-auto\">\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              Book Appointment\n            </Button>\n            <div className=\"bg-white rounded-lg px-4 py-3 flex-1 max-w-full sm:max-w-md\">\n              <Input\n                placeholder=\"Search doctors, specialties...\"\n                className=\"border-0 p-0 focus-visible:ring-0 text-sm sm:text-base\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Main Dashboard */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 py-6 sm:py-8\">\n        {/* Status Cards */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n          {/* Next Appointment */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-600 flex items-center gap-2\">\n                <Calendar className=\"w-4 h-4 text-blue-500\" />\n                Next Appointment\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold mb-1\">2:30 PM</div>\n              <div className=\"text-sm text-gray-600 mb-4\">Dr. Sarah Wilson - Cardiology</div>\n              <Button className=\"w-full bg-blue-500 hover:bg-blue-600\">View Details</Button>\n            </CardContent>\n          </Card>\n\n          {/* Queue Position */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-600 flex items-center gap-2\">\n                <Activity className=\"w-4 h-4 text-green-500\" />\n                Queue Position\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold mb-1\">#15</div>\n              <div className=\"text-sm text-gray-600 mb-4\">Estimated wait: 45 minutes</div>\n              <Button className=\"w-full bg-green-500 hover:bg-green-600\">Track Live</Button>\n            </CardContent>\n          </Card>\n\n          {/* Pending Medicines */}\n          <Card className=\"border-orange-200\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-600 flex items-center gap-2\">\n                <Pill className=\"w-4 h-4 text-orange-500\" />\n                Pending Medicines\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-2 mb-1\">\n                <span className=\"text-2xl font-bold\">2</span>\n                <Badge className=\"bg-red-500 text-white text-xs\">Urgent</Badge>\n              </div>\n              <div className=\"text-sm text-gray-600 mb-4\">1 dose overdue</div>\n              <Button className=\"w-full bg-orange-500 hover:bg-orange-600 animate-flash\">Take Medicine</Button>\n            </CardContent>\n          </Card>\n\n          {/* Doctor Status */}\n          <Card className=\"border-red-200\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-600 flex items-center gap-2\">\n                <Clock className=\"w-4 h-4 text-red-500\" />\n                Doctor Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-2 mb-1\">\n                <span className=\"text-2xl font-bold\">Delayed</span>\n                <Badge className=\"bg-red-500 text-white text-xs\">Urgent</Badge>\n              </div>\n              <div className=\"text-sm text-gray-600 mb-4\">Running 20 minutes late</div>\n              <Button className=\"w-full bg-blue-500 hover:bg-blue-600 animate-flash\">Get Updates</Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6 sm:gap-8\">\n          {/* Live Queue Tracker */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Activity className=\"w-5 h-5 text-blue-500\" />\n                Live Queue Tracker\n                <Badge className=\"bg-orange-100 text-orange-800 text-xs ml-auto\">Delayed 20min</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"bg-blue-500 text-white rounded-lg p-6 text-center mb-6\">\n                <div className=\"text-sm mb-2\">Now Serving</div>\n                <div className=\"text-4xl font-bold mb-2\">#12</div>\n                <div className=\"text-sm\">Token Number</div>\n              </div>\n\n              <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-4\">\n                <div className=\"flex items-center gap-2 text-yellow-800\">\n                  <Clock className=\"w-4 h-4 text-yellow-600\" />\n                  <span className=\"text-sm font-medium\">Doctor Running Late</span>\n                </div>\n                <div className=\"text-sm text-yellow-700 mt-1\">Expected delay: 20 minutes</div>\n              </div>\n\n              <div>\n                <div className=\"flex items-center gap-2 mb-3\">\n                  <Clock className=\"w-4 h-4 text-gray-600\" />\n                  <span className=\"text-sm font-medium\">Upcoming Appointments</span>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <Badge className=\"bg-blue-500 text-white\">#12</Badge>\n                      <div>\n                        <div className=\"text-sm font-medium\">John Doe</div>\n                        <div className=\"text-xs text-gray-500\">10:30 AM</div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium\">0min</div>\n                      <div className=\"text-xs text-gray-500\">est. wait</div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <Badge className=\"bg-gray-500 text-white\">#13</Badge>\n                      <div>\n                        <div className=\"text-sm font-medium\">Sarah Smith</div>\n                        <div className=\"text-xs text-gray-500\">10:45 AM</div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium\">15min</div>\n                      <div className=\"text-xs text-gray-500\">est. wait</div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <Badge className=\"bg-gray-500 text-white\">#14</Badge>\n                      <div>\n                        <div className=\"text-sm font-medium\">Mike Johnson</div>\n                        <div className=\"text-xs text-gray-500\">11:00 AM</div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium\">30min</div>\n                      <div className=\"text-xs text-gray-500\">est. wait</div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <Badge className=\"bg-gray-500 text-white\">#15</Badge>\n                      <div>\n                        <div className=\"text-sm font-medium\">Emily Davis</div>\n                        <div className=\"text-xs text-gray-500\">11:15 AM</div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium\">45min</div>\n                      <div className=\"text-xs text-gray-500\">est. wait</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex gap-2 mt-4\">\n                <Button variant=\"outline\" className=\"flex-1 bg-transparent\">\n                  Refresh Queue\n                </Button>\n                <Button className=\"flex-1 bg-blue-500 hover:bg-blue-600\">Join Queue</Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Medicine Reminders */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Pill className=\"w-5 h-5 text-orange-500\" />\n                Medicine Reminders\n                <Badge className=\"bg-red-100 text-red-800 text-xs ml-auto\">1 Missed</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex justify-center gap-8 mb-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-blue-600\">2</div>\n                  <div className=\"text-xs text-gray-500\">Due Today</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">1</div>\n                  <div className=\"text-xs text-gray-500\">Completed</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-red-600\">1</div>\n                  <div className=\"text-xs text-gray-500\">Missed</div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center gap-2 mb-4\">\n                <Clock className=\"w-4 h-4 text-gray-600\" />\n                <span className=\"text-sm font-medium\">Today's Schedule</span>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium\">Metformin</span>\n                      <Pill className=\"w-4 h-4 text-blue-500\" />\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium\">9:00 PM</div>\n                      <Badge className=\"bg-red-100 text-red-800 text-xs\">1 missed</Badge>\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-gray-600 mb-2\">500mg</div>\n                  <div className=\"text-xs text-gray-500 mb-3\">Twice daily</div>\n                  <div className=\"mb-3\">\n                    <div className=\"flex justify-between text-xs text-gray-500 mb-1\">\n                      <span>Progress</span>\n                      <span>13/14</span>\n                    </div>\n                    <Progress value={93} className=\"h-2\" />\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" className=\"flex-1 bg-green-500 hover:bg-green-600\">\n                      <div className=\"w-3 h-3 bg-white rounded-full mr-2\"></div>\n                      Mark Taken\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1 bg-transparent\">\n                      <Clock className=\"w-3 h-3 mr-2\" />\n                      Snooze\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium\">Vitamin D3</span>\n                      <Pill className=\"w-4 h-4 text-yellow-500\" />\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm font-medium\">6:00 PM</div>\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-gray-600 mb-2\">1000 IU</div>\n                  <div className=\"text-xs text-gray-500\">Once daily</div>\n                </div>\n              </div>\n              <Button className=\"w-full mt-4 bg-blue-500 hover:bg-blue-600\">\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                View Full Schedule\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Appointments */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"w-5 h-5 text-blue-500\" />\n                Appointments\n                <Button size=\"sm\" className=\"ml-auto bg-blue-500 hover:bg-blue-600\">\n                  Book New\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex justify-center gap-8 mb-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-blue-600\">2</div>\n                  <div className=\"text-xs text-gray-500\">Upcoming</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">1</div>\n                  <div className=\"text-xs text-gray-500\">Home Visits</div>\n                </div>\n              </div>\n\n              <div className=\"mb-4\">\n                <span className=\"text-sm font-medium\">Upcoming Appointments</span>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium\">Dr. Sarah Wilson</span>\n                      <Badge className=\"bg-green-100 text-green-800 text-xs\">confirmed</Badge>\n                    </div>\n                    <div className=\"flex items-center gap-1 text-sm text-gray-600\">\n                      <Stethoscope className=\"w-3 h-3\" />\n                      Clinic\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-gray-600 mb-2\">Cardiology</div>\n                  <div className=\"text-sm text-gray-500 mb-3\">Room 201</div>\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <Calendar className=\"w-4 h-4 text-gray-400\" />\n                    <span className=\"text-sm\">Today</span>\n                    <Clock className=\"w-4 h-4 text-gray-400 ml-2\" />\n                    <span className=\"text-sm\">2:30 PM</span>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1 bg-transparent\">\n                      Reschedule\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1 text-red-600 border-red-200 bg-transparent\">\n                      Cancel\n                    </Button>\n                    <Button size=\"sm\" className=\"bg-green-500 hover:bg-green-600\">\n                      <Phone className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"border rounded-lg p-4\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium\">Dr. Michael Chen</span>\n                      <Badge className=\"bg-green-100 text-green-800 text-xs\">confirmed</Badge>\n                    </div>\n                    <div className=\"flex items-center gap-1 text-sm text-gray-600\">\n                      <Home className=\"w-3 h-3\" />\n                      Home Visit\n                    </div>\n                  </div>\n                  <div className=\"text-sm text-gray-600 mb-2\">General Practice</div>\n                  <div className=\"text-sm text-gray-500 mb-3\">123 Main St</div>\n                  <div className=\"flex items-center gap-2 mb-3\">\n                    <Calendar className=\"w-4 h-4 text-gray-400\" />\n                    <span className=\"text-sm\">Tomorrow</span>\n                    <Clock className=\"w-4 h-4 text-gray-400 ml-2\" />\n                    <span className=\"text-sm\">10:00 AM</span>\n                  </div>\n                  <div className=\"text-xs text-gray-500 mb-3\">Edit with Lovable</div>\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"bg-transparent\">\n                      Reschedule\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" className=\"text-red-600 border-red-200 bg-transparent\">\n                      Cancel\n                    </Button>\n                  </div>\n                  <div className=\"flex gap-2 mt-2\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1 bg-transparent\">\n                      View History\n                    </Button>\n                    <Button size=\"sm\" className=\"flex-1 bg-green-500 hover:bg-green-600\">\n                      <MapPin className=\"w-3 h-3 mr-1\" />\n                      Book Home Visit\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        {/* Quick Actions */}\n        <div className=\"mt-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Zap className=\"w-5 h-5 text-blue-500\" />\n                Quick Actions\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-3 sm:gap-4\">\n                <Button\n                  variant=\"outline\"\n                  className=\"h-16 sm:h-20 flex-col gap-1 sm:gap-2 bg-transparent text-xs sm:text-sm\"\n                >\n                  <UserCheck className=\"w-5 h-5 sm:w-6 sm:h-6 text-green-500\" />\n                  <span>Check In</span>\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"h-16 sm:h-20 flex-col gap-1 sm:gap-2 bg-transparent text-xs sm:text-sm\"\n                >\n                  <AlertTriangle className=\"w-5 h-5 sm:w-6 sm:h-6 text-red-500\" />\n                  <span>Emergency</span>\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"h-16 sm:h-20 flex-col gap-1 sm:gap-2 bg-transparent text-xs sm:text-sm\"\n                >\n                  <Clock className=\"w-5 h-5 sm:w-6 sm:h-6 text-blue-500\" />\n                  <span>Reschedule</span>\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"h-16 sm:h-20 flex-col gap-1 sm:gap-2 bg-transparent text-xs sm:text-sm\"\n                >\n                  <Home className=\"w-5 h-5 sm:w-6 sm:h-6 text-purple-500\" />\n                  <span>Home Care</span>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  )\n}\n","size_bytes":22940},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import \"dotenv/config\";\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { queueService } from \"./services/queue\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  const isDevMode = process.env.NODE_ENV === \"development\" || app.get(\"env\") === \"development\";\n  log(`Environment: NODE_ENV=${process.env.NODE_ENV}, app.env=${app.get(\"env\")}, isDevMode=${isDevMode}`);\n  \n  if (isDevMode) {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n\n  if (isDevMode) {\n    // Development configuration with proper host binding for Replit\n    server.listen(port, \"0.0.0.0\", () => {\n      log(`serving on port ${port} in development mode`);\n\n      // Start automatic queue wait time updates every 60 seconds\n      setInterval(async () => {\n        try {\n          console.log(\"🔥 Running automatic queue wait time update...\");\n          await queueService.broadcastWebSocketUpdate();\n        } catch (error) {\n          console.error(\"Error updating queue wait times:\", error);\n        }\n      }, 60000); // 60 seconds\n    });\n  } else {\n    // Production configuration with full options\n    server.listen(\n      {\n        port,\n        host: \"0.0.0.0\",\n        reusePort: true,\n      },\n      () => {\n        log(`serving on port ${port} in production mode`);\n\n        // Start automatic queue wait time updates every 60 seconds\n        setInterval(async () => {\n          try {\n            console.log(\"🔥 Running automatic queue wait time update...\");\n            await queueService.broadcastWebSocketUpdate();\n          } catch (error) {\n            console.error(\"Error updating queue wait times:\", error);\n          }\n        }, 60000); // 60 seconds\n      },\n    );\n  }\n})();\n","size_bytes":3427},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport jwt from 'jsonwebtoken';\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema, insertAppointmentSchema, insertQueueTokenSchema, \n  insertMedicineSchema, insertPrescriptionSchema, insertMedicineReminderSchema,\n  insertDelayNotificationSchema, insertHomeVisitSchema, insertMedicalHistorySchema,\n  insertStaffVerificationSchema, insertPatientFeedbackSchema, insertClinicSchema,\n  insertEmergencyRequestSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { authMiddleware, requireRole, requireSuperAdmin } from \"./middleware/auth\";\nimport { gpsVerificationMiddleware } from \"./middleware/gps\";\nimport { authService } from \"./services/auth\";\nimport bcrypt from 'bcrypt';\nimport { emailService } from \"./services/email\";\nimport { queueService } from \"./services/queue\";\nimport { schedulerService } from \"./services/scheduler\";\nimport { smsService } from \"./services/sms\";\nimport { WebSocketServer, WebSocket } from 'ws';\n\n// Helper function to generate timings from frequency\nfunction generateTimingsFromFrequency(frequency: string): string[] {\n  switch (frequency) {\n    case 'once_daily':\n      return ['08:00'];\n    case 'twice_daily':\n      return ['08:00', '20:00'];\n    case 'three_times_daily':\n      return ['08:00', '14:00', '20:00'];\n    case 'four_times_daily':\n      return ['08:00', '12:00', '16:00', '20:00'];\n    case 'as_needed':\n      return ['08:00'];\n    default:\n      return ['08:00'];\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Create HTTP server first\n  const httpServer = createServer(app);\n  \n  // Manual approval endpoint for testing (no auth required)\n  app.get('/api/test-approve/:appointmentId', async (req, res) => {\n    try {\n      const { appointmentId } = req.params;\n      console.log('🔥 TEST APPROVE - Processing appointment:', appointmentId);\n      \n      // Update appointment status to scheduled\n      const appointment = await storage.updateAppointment(appointmentId, { \n        status: 'scheduled' \n      });\n      \n      if (!appointment) {\n        return res.status(404).json({ error: 'Appointment not found' });\n      }\n\n      console.log('🔥 TEST APPROVE - Appointment updated');\n\n      // Send email notification\n      const patient = await storage.getUser(appointment.patientId);\n      const doctor = await storage.getUser(appointment.doctorId);\n      \n      console.log('🔥 TEST APPROVE - Patient:', { id: patient?.id, email: patient?.email });\n      console.log('🔥 TEST APPROVE - Doctor:', { id: doctor?.id, name: `${doctor?.firstName} ${doctor?.lastName}` });\n      \n      if (patient && doctor && patient.email) {\n        const appointmentDate = new Date(appointment.appointmentDate);\n        \n        console.log('🔥 TEST APPROVE - Sending email to:', patient.email);\n        \n        const emailResult = await emailService.sendAppointmentApproved(patient.email, {\n          doctorName: `Dr. ${doctor.firstName} ${doctor.lastName}`,\n          appointmentDate: appointmentDate.toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' }),\n          appointmentTime: appointmentDate.toLocaleTimeString('en-IN', { \n            timeZone: 'Asia/Kolkata',\n            hour: '2-digit',\n            minute: '2-digit'\n          }),\n          clinic: 'SmartClinic'\n        });\n        \n        console.log('🔥 TEST APPROVE - Email result:', emailResult);\n        \n        res.json({ \n          success: true, \n          message: 'Appointment approved and email sent',\n          emailResult\n        });\n      } else {\n        res.json({ \n          success: false, \n          message: 'Missing patient or doctor data'\n        });\n      }\n    } catch (error: any) {\n      console.error('🔥 TEST APPROVE - Error:', error);\n      res.status(500).json({ error: 'Failed to approve: ' + error.message });\n    }\n  });\n  \n  // Test endpoint to recreate reminders with fixed scheduler\n  app.get('/api/test-recreate-reminders', async (req, res) => {\n    try {\n      const { prescriptionId } = req.query;\n      \n      if (!prescriptionId) {\n        return res.status(400).json({ error: 'prescriptionId required' });\n      }\n      \n      console.log('🔥 RECREATE REMINDERS - Starting for prescription:', prescriptionId);\n      \n      if (schedulerService) {\n        await schedulerService.createMedicineReminders(prescriptionId as string);\n        console.log('🔥 RECREATE REMINDERS - Success');\n        res.json({ success: true, message: 'Reminders recreated successfully' });\n      } else {\n        res.status(500).json({ error: 'Scheduler service not available' });\n      }\n    } catch (error: any) {\n      console.error('🔥 RECREATE REMINDERS - Error:', error);\n      res.status(500).json({ error: 'Failed to recreate reminders: ' + error.message });\n    }\n  });\n\n  // Simple email test endpoint (no auth required for debugging)\n  app.get('/api/email-debug', async (req, res) => {\n    try {\n      console.log('🔥 EMAIL DEBUG - Starting test...');\n      console.log('🔥 EMAIL DEBUG - Environment check:', {\n        GMAIL_USER: !!process.env.GMAIL_USER,\n        GMAIL_APP_PASSWORD: !!process.env.GMAIL_APP_PASSWORD\n      });\n      \n      // Import and test email service\n      const { emailService } = await import('./services/email');\n      \n      const result = await emailService.sendAppointmentApproved('soham.banerjee@iiitb.ac.in', {\n        doctorName: 'Dr. SmartClinic Doctor',\n        appointmentDate: new Date('2025-08-09T14:00:00').toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' }),\n        appointmentTime: new Date('2025-08-09T14:00:00').toLocaleTimeString('en-IN', { hour: 'numeric', minute: '2-digit', hour12: true, timeZone: 'Asia/Kolkata' }),\n        clinic: 'SmartClinic'\n      });\n      \n      console.log('🔥 EMAIL DEBUG - Result:', result);\n      \n      res.json({\n        success: true,\n        message: 'Email debug test completed',\n        emailResult: result,\n        env: {\n          hasGmailUser: !!process.env.GMAIL_USER,\n          hasGmailPassword: !!process.env.GMAIL_APP_PASSWORD\n        }\n      });\n    } catch (error) {\n      console.error('🔥 EMAIL DEBUG - Error:', error);\n      res.status(500).json({\n        success: false,\n        error: error.message,\n        stack: error.stack\n      });\n    }\n  });\n  // Authentication routes\n  app.post(\"/api/auth/send-otp\", async (req, res) => {\n    try {\n      const { phoneNumber } = z.object({ phoneNumber: z.string() }).parse(req.body);\n      \n      const result = await authService.sendOtp(phoneNumber);\n      \n      if (result.success) {\n        res.json({ message: \"OTP sent successfully\" });\n      } else {\n        // In development mode, return OTP for testing when SMS fails\n        if (process.env.NODE_ENV === 'development' && result.otp) {\n          res.json({ \n            message: \"SMS delivery failed, but OTP generated for testing\", \n            developmentOtp: result.otp,\n            error: result.error\n          });\n        } else {\n          res.json({ message: \"OTP sent successfully\" }); // Don't expose errors to client in production\n        }\n      }\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/verify-otp\", async (req, res) => {\n    try {\n      const { phoneNumber, otp } = z.object({ \n        phoneNumber: z.string(), \n        otp: z.string() \n      }).parse(req.body);\n      \n      const result = await authService.verifyOtp(phoneNumber, otp, req.ip, req.get('User-Agent'));\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Email Authentication routes\n  app.post(\"/api/auth/send-email-otp\", async (req, res) => {\n    try {\n      const { email } = z.object({ email: z.string().email() }).parse(req.body);\n      \n      console.log(`🔥 EMAIL OTP REQUEST - Sending OTP to: ${email}`);\n      const result = await authService.sendEmailOtp(email);\n      \n      if (result.success) {\n        const response: any = { message: \"OTP sent successfully to your email\" };\n        \n        // In development mode, include additional info\n        if (process.env.NODE_ENV === 'development') {\n          if (result.previewUrl) {\n            response.previewUrl = result.previewUrl;\n            response.message = \"OTP sent! Check the preview URL or console for the email.\";\n          } else if (result.otp) {\n            response.developmentOtp = result.otp;\n            response.message = \"Email service fallback - check console for OTP\";\n          }\n        }\n        \n        res.json(response);\n      } else {\n        res.json({ message: \"OTP sent successfully to your email\" }); // Don't expose errors to client in production\n      }\n    } catch (error: any) {\n      console.error('🔥 EMAIL OTP ERROR:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/verify-email-otp\", async (req, res) => {\n    try {\n      const { email, otp } = z.object({ \n        email: z.string().email(), \n        otp: z.string() \n      }).parse(req.body);\n      \n      console.log(`🔥 EMAIL OTP VERIFICATION - Email: ${email}, OTP: ${otp}`);\n      const result = await authService.verifyEmailOtp(email, otp, req.ip, req.get('User-Agent'));\n      res.json(result);\n    } catch (error: any) {\n      console.error('🔥 EMAIL OTP VERIFICATION ERROR:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Firebase Authentication routes\n  // Patient signup with email OTP - Step 1: Send OTP\n  app.post(\"/api/auth/patient-signup-otp\", async (req, res) => {\n    try {\n      const signupData = z.object({\n        firstName: z.string().min(1),\n        lastName: z.string().min(1),\n        email: z.string().email(),\n        password: z.string().min(6),\n        phoneNumber: z.string().optional(),\n        dateOfBirth: z.string().optional(),\n        address: z.string().optional(),\n        emergencyContact: z.string().optional()\n      }).parse(req.body);\n\n      console.log(`🔥 EMAIL SIGNUP - Initiating signup for: ${signupData.email}`);\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(signupData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Account already exists with this email address\" });\n      }\n\n      // Store signup data temporarily and send OTP\n      const tempData = {\n        ...signupData,\n        role: 'patient' as const,\n        isActive: true,\n        dateOfBirth: signupData.dateOfBirth ? new Date(signupData.dateOfBirth) : undefined,\n        phoneNumber: signupData.phoneNumber || `temp${Date.now().toString().slice(-8)}${Math.random().toString(36).substr(2, 4)}`\n      };\n\n      // Generate 6-digit OTP\n      const otp = Math.floor(100000 + Math.random() * 900000).toString();\n      console.log(`🔥 EMAIL SIGNUP - Generated 6-digit OTP: ${otp} for ${signupData.email}`);\n      \n      // Generate and send OTP via email\n      const otpResult = await emailService.sendOtp(signupData.email, otp);\n      \n      if (!otpResult.success) {\n        // Fallback for development\n        if (process.env.NODE_ENV === 'development' && otpResult.otp) {\n          console.log(`🔥 EMAIL SIGNUP - Development mode: OTP ${otpResult.otp} for ${signupData.email}`);\n          // Store temp data with OTP for verification\n          await storage.storeTempSignupData(signupData.email, { ...tempData, otp: otpResult.otp });\n          return res.json({ \n            message: \"Verification code sent\",\n            developmentOtp: otpResult.otp \n          });\n        }\n        return res.status(500).json({ message: \"Failed to send verification email. Please try again.\" });\n      }\n\n      // Store temp signup data for verification (include OTP hash for verification)\n      const otpHash = await bcrypt.hash(otp, 10);\n      await storage.storeTempSignupData(signupData.email, { ...tempData, otpHash });\n      \n      console.log(`🔥 EMAIL SIGNUP - OTP sent successfully to: ${signupData.email}`);\n      res.json({ message: \"Verification code sent to your email\" });\n    } catch (error: any) {\n      console.error('🔥 EMAIL SIGNUP ERROR:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Patient signup with email OTP - Step 2: Verify OTP and complete signup\n  app.post(\"/api/auth/verify-signup-otp\", async (req, res) => {\n    try {\n      const { email, otp } = z.object({\n        email: z.string().email(),\n        otp: z.string().length(6)\n      }).parse(req.body);\n\n      console.log(`🔥 EMAIL SIGNUP - Verifying OTP for: ${email}`);\n\n      // Get stored signup data first\n      const tempData = await storage.getTempSignupData(email);\n      if (!tempData) {\n        return res.status(400).json({ message: \"Signup session expired. Please start over.\" });\n      }\n\n      // Verify OTP using bcrypt comparison\n      const otpValid = await bcrypt.compare(otp, tempData.otpHash);\n      if (!otpValid) {\n        return res.status(400).json({ message: \"Invalid verification code\" });\n      }\n\n      // Hash password before storing\n      const hashedPassword = await bcrypt.hash(tempData.password, 12);\n\n      // Create user account\n      const userData = {\n        ...tempData,\n        password: hashedPassword,\n        isApproved: true // Auto-approve patients\n      };\n\n      const user = await storage.createUser(userData);\n      \n      // Generate JWT token for immediate login (use same secret as auth service)\n      const token = jwt.sign(\n        { \n          userId: user.id,\n          role: user.role \n        },\n        process.env.JWT_SECRET || process.env.SESSION_SECRET || 'your-super-secret-jwt-key-change-this-in-production',\n        { expiresIn: '7d' }\n      );\n\n      // Create auth session\n      const expiresAt = new Date();\n      expiresAt.setDate(expiresAt.getDate() + 7);\n\n      await storage.createAuthSession({\n        userId: user.id,\n        token,\n        expiresAt,\n        ipAddress: req.ip || '',\n        userAgent: req.get('User-Agent') || '',\n        lastActivity: new Date()\n      });\n\n      // Clean up temp data\n      await storage.deleteTempSignupData(email);\n\n      console.log(`🔥 EMAIL SIGNUP - Account created successfully for: ${user.email}`);\n\n      res.json({\n        token,\n        user: {\n          id: user.id,\n          role: user.role,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          email: user.email,\n          isActive: user.isActive,\n          phoneNumber: user.phoneNumber,\n          dateOfBirth: user.dateOfBirth,\n          address: user.address,\n          emergencyContact: user.emergencyContact\n        }\n      });\n    } catch (error: any) {\n      console.error('🔥 EMAIL SIGNUP VERIFICATION ERROR:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/patient-signup\", async (req, res) => {\n    try {\n      const signupData = z.object({\n        firstName: z.string().min(1),\n        lastName: z.string().min(1),\n        email: z.string().email(),\n        phoneNumber: z.string().optional(),\n        dateOfBirth: z.string().optional(),\n        address: z.string().optional(),\n        emergencyContact: z.string().optional(),\n        firebaseUid: z.string().min(1),\n        authProvider: z.enum(['email', 'google']).default('email')\n      }).parse(req.body);\n\n      console.log(`🔥 FIREBASE SIGNUP - Creating patient account for: ${signupData.email}`);\n\n      // Check if user already exists with this Firebase UID\n      const existingUser = await storage.getUserByFirebaseUid(signupData.firebaseUid);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Account already exists with this authentication method\" });\n      }\n\n      // Check if user exists with this email\n      const existingEmailUser = await storage.getUserByEmail(signupData.email);\n      if (existingEmailUser) {\n        return res.status(400).json({ message: \"Account already exists with this email address\" });\n      }\n\n      // Create new patient user\n      const userData = {\n        ...signupData,\n        role: 'patient' as const,\n        isActive: true,\n        isApproved: true, // Auto-approve patients\n        dateOfBirth: signupData.dateOfBirth ? new Date(signupData.dateOfBirth) : undefined,\n        // Generate unique phone number for Firebase users if not provided (max 20 chars)\n        phoneNumber: signupData.phoneNumber || `fb${Date.now().toString().slice(-8)}${Math.random().toString(36).substr(2, 5)}`\n      };\n\n      const user = await storage.createUser(userData);\n      \n      // Generate JWT token for immediate login\n      const token = jwt.sign(\n        { \n          userId: user.id,\n          role: user.role \n        },\n        process.env.SESSION_SECRET || 'your-super-secret-jwt-key-change-this-in-production',\n        { expiresIn: '7d' }\n      );\n\n      // Create auth session\n      const expiresAt = new Date();\n      expiresAt.setDate(expiresAt.getDate() + 7); // 7 days from now\n\n      await storage.createAuthSession({\n        userId: user.id,\n        token,\n        expiresAt,\n        ipAddress: req.ip || '',\n        userAgent: req.get('User-Agent') || '',\n        lastActivity: new Date()\n      });\n\n      console.log(`🔥 FIREBASE SIGNUP - Account created successfully for: ${user.email}`);\n\n      res.json({\n        token,\n        user: {\n          id: user.id,\n          role: user.role,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          email: user.email,\n          isActive: user.isActive\n        }\n      });\n    } catch (error: any) {\n      console.error('🔥 FIREBASE SIGNUP ERROR:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Direct email/password login for database-created accounts\n  app.post(\"/api/auth/login-email\", async (req, res) => {\n    try {\n      const { email, password } = z.object({\n        email: z.string().email(),\n        password: z.string().min(1)\n      }).parse(req.body);\n\n      console.log(`🔥 EMAIL LOGIN - Attempting login for: ${email}`);\n\n      // Find user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(404).json({ message: \"Account not found. Please check your email or create a new account.\" });\n      }\n\n      if (!user.isActive) {\n        return res.status(403).json({ message: \"Account is not active\" });\n      }\n\n      // Check if user has a password set (for accounts created via email/OTP vs phone/OTP)\n      if (!user.password) {\n        return res.status(400).json({ \n          message: \"This account was created with phone verification. Please use the 'Forgot Password' feature to set up email login, or contact support for assistance.\",\n          needsPasswordSetup: true\n        });\n      }\n\n      // Verify password\n      const passwordValid = await bcrypt.compare(password, user.password);\n      if (!passwordValid) {\n        return res.status(401).json({ message: \"Incorrect password. Please check your password and try again.\" });\n      }\n\n      // Generate JWT token\n      const token = jwt.sign(\n        { \n          userId: user.id, \n          role: user.role,\n          ...(user.clinicId && { clinicId: user.clinicId })\n        },\n        process.env.SESSION_SECRET || 'your-super-secret-jwt-key-change-this-in-production',\n        { expiresIn: '7d' }\n      );\n\n      // Create auth session\n      const expiresAt = new Date();\n      expiresAt.setDate(expiresAt.getDate() + 7);\n\n      await storage.createAuthSession({\n        token,\n        userId: user.id,\n        ipAddress: req.ip || 'unknown',\n        userAgent: req.get('User-Agent') || 'unknown',\n        expiresAt,\n        lastActivity: new Date()\n      });\n\n      console.log(`🔥 EMAIL LOGIN - Login successful for: ${user.email}`);\n\n      res.json({\n        token,\n        user: {\n          id: user.id,\n          role: user.role,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          email: user.email,\n          isActive: user.isActive\n        }\n      });\n    } catch (error: any) {\n      console.error('🔥 EMAIL LOGIN ERROR:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Set password for existing accounts (for users who signed up with phone/OTP)\n  app.post(\"/api/auth/set-password\", async (req, res) => {\n    try {\n      const { email, newPassword } = z.object({\n        email: z.string().email(),\n        newPassword: z.string().min(6)\n      }).parse(req.body);\n\n      console.log(`🔥 SET PASSWORD - Setting password for: ${email}`);\n\n      // Find user by email\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(404).json({ message: \"Account not found.\" });\n      }\n\n      if (!user.isActive) {\n        return res.status(403).json({ message: \"Account is not active\" });\n      }\n\n      // Hash the new password\n      const hashedPassword = await bcrypt.hash(newPassword, 12);\n\n      // Update user with new password\n      await storage.updateUser(user.id, { \n        password: hashedPassword,\n        authProvider: 'email' // Update auth provider to email since they're setting a password\n      });\n\n      console.log(`🔥 SET PASSWORD - Password set successfully for: ${email}`);\n\n      res.json({ \n        message: \"Password set successfully. You can now login with email and password.\",\n        success: true\n      });\n    } catch (error: any) {\n      console.error('🔥 SET PASSWORD ERROR:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/firebase-login\", async (req, res) => {\n    try {\n      const loginData = z.object({\n        firebaseUid: z.string().min(1),\n        email: z.string().email(),\n        name: z.string().min(1)\n      }).parse(req.body);\n\n      console.log(`🔥 FIREBASE LOGIN - Attempting login for: ${loginData.email}`);\n\n      // Find user by Firebase UID first, then by email\n      let user = await storage.getUserByFirebaseUid(loginData.firebaseUid);\n      \n      if (!user) {\n        // If no user found by Firebase UID, try to find by email\n        user = await storage.getUserByEmail(loginData.email);\n        \n        if (user) {\n          // Update existing user with Firebase UID\n          const updatedUser = await storage.updateUser(user.id, {\n            firebaseUid: loginData.firebaseUid,\n            authProvider: 'google'\n          });\n          if (updatedUser) {\n            user = updatedUser;\n            console.log(`🔥 FIREBASE LOGIN - Updated existing user with Firebase UID: ${user.email}`);\n          }\n        } else {\n          console.log(`🔥 FIREBASE LOGIN - No account found for email: ${loginData.email}`);\n          return res.status(404).json({ \n            message: \"No account found for this email address. Please create an account first using the signup page.\",\n            emailNotFound: true \n          });\n        }\n      }\n\n      if (!user.isActive) {\n        return res.status(403).json({ message: \"Account is not active\" });\n      }\n\n      // Generate JWT token with auth session\n      const token = jwt.sign(\n        { \n          userId: user.id, \n          role: user.role,\n          ...(user.clinicId && { clinicId: user.clinicId })\n        },\n        process.env.SESSION_SECRET || 'your-super-secret-jwt-key-change-this-in-production',\n        { expiresIn: '7d' }\n      );\n\n      // Create auth session in database\n      const expiresAt = new Date();\n      expiresAt.setDate(expiresAt.getDate() + 7); // 7 days\n\n      await storage.createAuthSession({\n        token,\n        userId: user.id,\n        ipAddress: req.ip || 'unknown',\n        userAgent: req.get('User-Agent') || 'unknown',\n        expiresAt,\n        lastActivity: new Date()\n      });\n\n      console.log(`🔥 FIREBASE LOGIN - Login successful for: ${user.email}`);\n\n      res.json({\n        token,\n        user: {\n          id: user.id,\n          role: user.role,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          email: user.email,\n          isActive: user.isActive\n        }\n      });\n    } catch (error: any) {\n      console.error('🔥 FIREBASE LOGIN ERROR:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", authMiddleware, async (req, res) => {\n    try {\n      const token = req.get('Authorization')?.replace('Bearer ', '');\n      if (token) {\n        await storage.invalidateAuthSession(token);\n      }\n      res.json({ message: \"Logged out successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/register\", authMiddleware, requireSuperAdmin, async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(validatedData);\n      res.json(user);\n    } catch (error: any) {\n      console.error('User registration error:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authMiddleware, async (req, res) => {\n    try {\n      res.json({ user: req.user });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // User management routes\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(validatedData);\n      res.json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/users/me\", authMiddleware, async (req, res) => {\n    try {\n      const user = await storage.getUser(req.user!.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/users/me\", authMiddleware, async (req, res) => {\n    try {\n      // Handle date conversion if dateOfBirth is provided as string\n      const { dateOfBirth, ...otherData } = req.body;\n      const userData = {\n        ...otherData,\n        ...(dateOfBirth && { dateOfBirth: new Date(dateOfBirth) })\n      };\n      \n      const validatedData = insertUserSchema.partial().parse(userData);\n      const user = await storage.updateUser(req.user!.id, validatedData);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/users\", authMiddleware, async (req, res) => {\n    try {\n      const { role } = req.query;\n      \n      // Allow all authenticated users to view doctors (for appointment booking)\n      if (role === 'doctor') {\n        const users = await storage.getUsersByRole('doctor');\n        res.json(users);\n      } else {\n        // For other roles, require admin permissions\n        if (req.user!.role !== 'admin') {\n          return res.status(403).json({ message: \"Access denied. Insufficient permissions\" });\n        }\n        \n        // If no role specified, get all non-patient users for staff management\n        if (!role) {\n          let staffUsers;\n          \n          // Check if super admin - show all clinics data\n          const isSuperAdmin = req.user!.email === '44441100sf@gmail.com';\n          \n          if (isSuperAdmin) {\n            // Super admin - get all users from all clinics\n            const users = await storage.getAllUsers();\n            staffUsers = users.filter(user => user.role !== 'patient');\n            console.log('🔥 USERS - Super admin fetching ALL staff from all clinics. Total users:', users.length, 'Staff users:', staffUsers.length);\n          } else if (req.user!.clinicId) {\n            // Regular admin with clinic ID - filter by clinic\n            const users = await storage.getUsersByClinic(req.user!.clinicId);\n            staffUsers = users.filter(user => user.role !== 'patient');\n            console.log('🔥 USERS - Admin fetching staff for clinic:', req.user!.clinicId, 'Staff users:', staffUsers.length);\n          } else {\n            // Admin without clinic ID - get all users\n            const users = await storage.getAllUsers();\n            staffUsers = users.filter(user => user.role !== 'patient');\n            console.log('Fetching staff users. Total users:', users.length, 'Staff users:', staffUsers.length);\n          }\n          // Add cache-busting headers\n          res.set('Cache-Control', 'no-cache, no-store, must-revalidate');\n          res.set('Pragma', 'no-cache');\n          res.set('Expires', '0');\n          res.json(staffUsers);\n        } else {\n          let users;\n          \n          // Check if super admin - show all clinics data\n          const isSuperAdmin = req.user!.email === '44441100sf@gmail.com';\n          \n          if (isSuperAdmin) {\n            // Super admin - get all users of specified role from all clinics\n            users = await storage.getUsersByRole(role as string);\n            console.log('🔥 USERS - Super admin fetching role', role, 'from ALL clinics. Count:', users.length);\n          } else if (req.user!.clinicId && req.user!.role === 'admin') {\n            // Regular admin with clinic ID - filter by role and clinic\n            users = await storage.getUsersByRoleAndClinic(role as string, req.user!.clinicId);\n            console.log('🔥 USERS - Admin fetching role', role, 'for clinic:', req.user!.clinicId, 'Count:', users.length);\n          } else {\n            users = await storage.getUsersByRole(role as string);\n          }\n          res.json(users);\n        }\n      }\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/users/:id/approve\", authMiddleware, requireSuperAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const user = await storage.approveUser(id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/users/:id/deactivate\", authMiddleware, requireSuperAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const user = await storage.deactivateUser(id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Public doctors endpoint for appointment booking (no auth required)\n  app.get('/api/doctors', async (req, res) => {\n    try {\n      const doctors = await storage.getUsersByRole('doctor');\n      const activeDoctors = doctors.filter(doctor => doctor.isActive);\n      res.json(activeDoctors);\n    } catch (error) {\n      console.error('Error fetching doctors:', error);\n      res.status(500).json({ error: 'Failed to fetch doctors' });\n    }\n  });\n\n  // Route to handle authenticated patient appointment requests\n  app.post('/api/appointments/patient-request', authMiddleware, async (req, res) => {\n    try {\n      console.log('🔥 PATIENT APPOINTMENT REQUEST:', req.body);\n      \n      const { doctorId, type, symptoms, preferredDate, urgency, notes } = req.body;\n      const patientId = req.user!.id;\n\n      // Get user's clinic ID\n      const user = await storage.getUser(patientId);\n      const doctor = await storage.getUser(doctorId);\n      const clinicId = doctor?.clinicId || user?.clinicId || '84e1b3c6-3b25-4446-96e8-a227d9e92d76'; // fallback to default clinic\n\n      // Create appointment request\n      const appointmentData = {\n        patientId,\n        doctorId,\n        clinicId,\n        appointmentDate: new Date(preferredDate),\n        duration: 30, // Default duration\n        type,\n        status: 'pending_approval' as const,\n        symptoms: symptoms || '',\n        notes: notes || ''\n      };\n\n      console.log('🔥 Creating appointment with data:', appointmentData);\n      \n      const appointment = await storage.createAppointment(appointmentData);\n      console.log('🔥 Appointment created successfully:', appointment.id);\n\n      res.json({\n        success: true,\n        appointmentId: appointment.id,\n        message: \"Appointment request submitted successfully. You will receive an SMS notification once reviewed.\"\n      });\n\n    } catch (error: any) {\n      console.error('Error creating patient appointment request:', error);\n      res.status(500).json({ error: 'Failed to submit appointment request' });\n    }\n  });\n\n  // Submit appointment request (no auth required for public booking)\n  app.post('/api/appointments/request', async (req, res) => {\n    try {\n      console.log('🔥 APPOINTMENT REQUEST RECEIVED:', req.body);\n      \n      const { patientInfo, appointmentDetails } = req.body;\n      \n      // First, check if patient exists or create new patient record\n      let patientId;\n      try {\n        const existingPatient = await storage.getUserByPhone(patientInfo.phoneNumber);\n        if (existingPatient) {\n          patientId = existingPatient.id;\n          console.log('🔥 Found existing patient:', patientId);\n        } else {\n          // Create new patient record\n          const newPatient = await storage.createUser({\n            phoneNumber: patientInfo.phoneNumber,\n            role: 'patient',\n            firstName: patientInfo.firstName,\n            lastName: patientInfo.lastName,\n            email: patientInfo.email || null,\n            dateOfBirth: patientInfo.dateOfBirth || null,\n            isActive: true,\n            isApproved: false // Will be approved when appointment is approved\n          });\n          patientId = newPatient.id;\n          console.log('🔥 Created new patient:', patientId);\n        }\n      } catch (error) {\n        console.error('Error handling patient:', error);\n        return res.status(500).json({ error: 'Failed to process patient information' });\n      }\n      \n      // Get doctor's clinic ID\n      const doctor = await storage.getUser(appointmentDetails.doctorId);\n      const clinicId = doctor?.clinicId || '84e1b3c6-3b25-4446-96e8-a227d9e92d76'; // fallback to default clinic\n\n      // Create appointment request\n      const appointmentData = {\n        patientId,\n        doctorId: appointmentDetails.doctorId,\n        clinicId,\n        appointmentDate: new Date(appointmentDetails.preferredDate),\n        duration: 30, // Default duration\n        type: appointmentDetails.type,\n        status: 'pending_approval' as const,\n        symptoms: appointmentDetails.symptoms || '',\n        notes: appointmentDetails.notes || ''\n      };\n      \n      console.log('🔥 Creating appointment with data:', appointmentData);\n      const appointment = await storage.createAppointment(appointmentData);\n      \n      console.log('🔥 Appointment request created successfully:', appointment.id);\n      \n      // Send SMS notification to patient\n      try {\n        const doctor = await storage.getUser(appointmentDetails.doctorId);\n        await smsService.send(patientInfo.phoneNumber, `Your appointment request with Dr. ${doctor?.firstName} ${doctor?.lastName} for ${new Date(appointmentDetails.preferredDate).toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' })} has been submitted. Appointment ID: ${appointment.id}`);\n        console.log('🔥 SMS notification sent to patient');\n      } catch (smsError) {\n        console.error('SMS notification failed:', smsError);\n        // Don't fail the request if SMS fails\n      }\n      \n      res.json({ \n        success: true, \n        appointmentId: appointment.id,\n        patientId,\n        message: 'Appointment request submitted successfully. You will receive an SMS notification once reviewed.' \n      });\n      \n    } catch (error) {\n      console.error('Error creating appointment request:', error);\n      res.status(500).json({ error: 'Failed to submit appointment request' });\n    }\n  });\n\n  // Get pending appointment requests for admin approval\n  app.get('/api/appointments/pending', authMiddleware, requireRole(['admin', 'staff']), async (req, res) => {\n    try {\n      console.log('🔥 FETCHING PENDING APPOINTMENTS FOR ADMIN');\n      const pendingAppointments = await storage.getPendingAppointments();\n      console.log('🔥 Found pending appointments:', pendingAppointments.length);\n      res.json(pendingAppointments);\n    } catch (error) {\n      console.error('Error fetching pending appointments:', error);\n      res.status(500).json({ error: 'Failed to fetch pending appointments' });\n    }\n  });\n\n  // Approve or reject appointment request\n  app.patch('/api/appointments/:id/status', authMiddleware, requireRole(['admin', 'staff']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status, rejectionReason, confirmedDate, confirmedTime } = req.body;\n      \n      console.log('🔥 UPDATING APPOINTMENT STATUS:', { id, status, confirmedDate, confirmedTime });\n      \n      if (!['approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ error: 'Invalid status. Must be approved or rejected.' });\n      }\n      \n      // Get appointment details\n      const appointment = await storage.getAppointmentById(id);\n      if (!appointment) {\n        return res.status(404).json({ error: 'Appointment not found' });\n      }\n      \n      // Update appointment status\n      const updateData: any = { status };\n      \n      if (status === 'approved') {\n        // If approved, set confirmed date/time and approve patient\n        if (confirmedDate && confirmedTime) {\n          updateData.appointmentDate = `${confirmedDate}T${confirmedTime}:00.000Z`;\n        }\n        \n        // Approve the patient if they were pending\n        await storage.updateUserStatus(appointment.patientId, { isApproved: true });\n        console.log('🔥 Patient approved:', appointment.patientId);\n      } else if (status === 'rejected') {\n        updateData.notes = rejectionReason || updateData.notes;\n      }\n      \n      const updatedAppointment = await storage.updateAppointment(id, updateData);\n      \n      // Send SMS notification\n      try {\n        const patient = await storage.getUser(appointment.patientId);\n        const doctor = await storage.getUser(appointment.doctorId);\n        \n        if (status === 'approved') {\n          await emailService.sendAppointmentApproved(patient?.email || '', {\n            doctorName: `Dr. ${doctor?.firstName} ${doctor?.lastName}`,\n            appointmentDate: new Date(updateData.appointmentDate || appointment.appointmentDate).toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' }),\n            appointmentTime: new Date(updateData.appointmentDate || appointment.appointmentDate).toLocaleTimeString('en-IN', { \n              timeZone: 'Asia/Kolkata',\n              hour: '2-digit',\n              minute: '2-digit'\n            }),\n            clinic: 'SmartClinic'\n          });\n        } else {\n          await emailService.sendAppointmentRejected(patient?.email || '', {\n            doctorName: `Dr. ${doctor?.firstName} ${doctor?.lastName}`,\n            reason: rejectionReason || 'No reason provided',\n            appointmentId: id\n          });\n        }\n        console.log('🔥 Status update SMS sent to patient');\n      } catch (smsError) {\n        console.error('SMS notification failed:', smsError);\n      }\n      \n      res.json({ \n        success: true, \n        appointment: updatedAppointment,\n        message: `Appointment ${status} successfully` \n      });\n      \n    } catch (error) {\n      console.error('Error updating appointment status:', error);\n      res.status(500).json({ error: 'Failed to update appointment status' });\n    }\n  });\n\n  // Staff GPS verification routes\n  app.post(\"/api/staff/checkin\", authMiddleware, requireRole(['staff', 'doctor', 'nurse']), gpsVerificationMiddleware, async (req, res) => {\n    try {\n      const { latitude, longitude, workLocation } = z.object({\n        latitude: z.number(),\n        longitude: z.number(),\n        workLocation: z.string()\n      }).parse(req.body);\n\n      // Create verification record\n      const verification = await storage.createStaffVerification({\n        staffId: req.user!.id,\n        clinicId: req.user!.clinicId || 'clinic-mumbai-main', // Default to Mumbai clinic\n        latitude,\n        longitude,\n        workLocation\n      });\n\n      // Also create/update staff presence record for today\n      await storage.markStaffPresent(req.user!.id, req.user!.clinicId || 'clinic-mumbai-main');\n\n      res.json({ ...verification, message: \"Checked in successfully - attendance marked!\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/staff/checkout\", authMiddleware, requireRole(['staff', 'doctor', 'nurse']), async (req, res) => {\n    try {\n      await storage.checkOutStaff(req.user!.id);\n      // Update staff presence with checkout time\n      await storage.updateStaffCheckout(req.user!.id);\n      res.json({ message: \"Checked out successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/staff/verifications\", authMiddleware, requireRole(['staff', 'doctor', 'nurse', 'admin']), async (req, res) => {\n    try {\n      const { date } = req.query;\n      const staffId = req.user!.role === 'admin' ? req.query.staffId as string : req.user!.id;\n      const verificationDate = date ? new Date(date as string) : undefined;\n      \n      const verifications = await storage.getStaffVerifications(staffId, verificationDate);\n      res.json(verifications);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Admin staff attendance routes\n  app.get(\"/api/staff-presence/today\", authMiddleware, requireRole(['admin', 'staff', 'super_admin']), async (req, res) => {\n    try {\n      const staffPresence = await storage.getTodayStaffPresence();\n      console.log('🔥 STAFF PRESENCE DEBUG - Raw data:', JSON.stringify(staffPresence, null, 2));\n      console.log('🔥 STAFF PRESENCE DEBUG - Count:', staffPresence.length);\n      console.log('🔥 STAFF PRESENCE DEBUG - Present count:', staffPresence.filter(p => p.isPresent).length);\n      res.json(staffPresence);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/staff-presence/:date\", authMiddleware, requireRole(['admin', 'super_admin']), async (req, res) => {\n    try {\n      const { date } = req.params;\n      const targetDate = new Date(date);\n      \n      if (isNaN(targetDate.getTime())) {\n        return res.status(400).json({ message: \"Invalid date format\" });\n      }\n      \n      const staffPresence = await storage.getStaffPresenceForDate(targetDate);\n      res.json(staffPresence);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Admin appointment routes (MUST come before general routes)\n  app.get(\"/api/appointments/admin\", authMiddleware, requireSuperAdmin, async (req, res) => {\n    console.log('🔥 ADMIN APPOINTMENTS ROUTE HIT - START');\n    try {\n\n      // Check if super admin - show all clinics data\n      const isSuperAdmin = req.user!.email === '44441100sf@gmail.com';\n      const adminClinicId = req.user!.clinicId;\n      \n      console.log('🔥 Super admin:', isSuperAdmin, 'Admin clinic ID:', adminClinicId);\n      \n      if (!isSuperAdmin && !adminClinicId) {\n        console.log('🔥 No clinic ID found for admin user');\n        return res.status(400).json({ message: \"Admin user has no associated clinic\" });\n      }\n\n      let appointments;\n      if (isSuperAdmin) {\n        console.log('🔥 Super admin: About to call storage.getAllAppointments() for ALL clinics');\n        appointments = await storage.getAllAppointments();\n        console.log('🔥 Super admin: Found appointments from ALL clinics:', appointments?.length || 0);\n      } else {\n        console.log('🔥 About to call storage.getAppointmentsByClinic() with clinic ID:', adminClinicId);\n        appointments = await storage.getAppointmentsByClinic(adminClinicId);\n        console.log('🔥 Found appointments for clinic:', appointments?.length || 0);\n      }\n      \n      if (appointments && appointments.length > 0) {\n        console.log('🔥 Sample appointment:', JSON.stringify(appointments[0], null, 2));\n      } else {\n        console.log('🔥 No appointments returned from storage');\n      }\n      \n      console.log('🔥 Sending response with', appointments?.length || 0, 'appointments');\n      res.json(appointments || []);\n    } catch (error: any) {\n      console.error('🔥 ERROR in admin appointments route:', error);\n      console.error('🔥 Error stack:', error.stack);\n      res.status(500).json({ message: \"Failed to fetch appointments\", error: error.message });\n    }\n  });\n\n  // Admin route to approve appointment\n  app.post('/api/appointments/admin/:appointmentId/approve', authMiddleware, async (req, res) => {\n    try {\n      const { appointmentId } = req.params;\n      console.log('🔥 APPROVING APPOINTMENT:', appointmentId);\n      \n      // Update appointment status to scheduled\n      const appointment = await storage.updateAppointment(appointmentId, { \n        status: 'scheduled' \n      });\n      \n      if (!appointment) {\n        return res.status(404).json({ error: 'Appointment not found' });\n      }\n\n      console.log('🔥 Appointment approved:', appointment.id);\n\n      // Send email and SMS notifications to patient\n      try {\n        const patient = appointment.patient || await storage.getUser(appointment.patientId);\n        const doctor = appointment.doctor || await storage.getUser(appointment.doctorId);\n        \n        console.log('🔥 APPROVAL - Patient data:', { id: patient?.id, email: patient?.email });\n        console.log('🔥 APPROVAL - Doctor data:', { id: doctor?.id, name: `${doctor?.firstName} ${doctor?.lastName}` });\n        \n        if (patient && doctor && patient.email) {\n          const appointmentDate = new Date(appointment.appointmentDate);\n          \n          console.log('🔥 APPROVAL - Sending email to:', patient.email);\n          \n          // Send email notification with IST timezone\n          const emailResult = await emailService.sendAppointmentApproved(patient.email, {\n            doctorName: `Dr. ${doctor.firstName} ${doctor.lastName}`,\n            appointmentDate: appointmentDate.toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' }),\n            appointmentTime: appointmentDate.toLocaleTimeString('en-IN', { \n              timeZone: 'Asia/Kolkata',\n              hour: '2-digit',\n              minute: '2-digit'\n            }),\n            clinic: 'SmartClinic'\n          });\n          \n          console.log('🔥 APPROVAL - Email result:', emailResult);\n          \n          if (emailResult.success) {\n            console.log('🔥 APPROVAL - Email sent successfully to:', patient.email);\n          } else {\n            console.error('🔥 APPROVAL - Email failed:', emailResult.error);\n          }\n          \n          // Send SMS notification (keeping existing SMS functionality)\n          try {\n            const message = `Good news! Your appointment with Dr. ${doctor.firstName} ${doctor.lastName} on ${appointmentDate.toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' })} at ${appointmentDate.toLocaleTimeString('en-IN', { timeZone: 'Asia/Kolkata', hour: '2-digit', minute: '2-digit' })} has been approved. Please arrive 15 minutes early.`;\n            await smsService.send(patient.phoneNumber, message);\n            console.log('🔥 APPROVAL - SMS sent to:', patient.phoneNumber);\n          } catch (smsError) {\n            console.error('🔥 APPROVAL - SMS failed:', smsError);\n          }\n        } else {\n          console.error('🔥 APPROVAL - Missing data:', { \n            patient: !!patient, \n            doctor: !!doctor, \n            email: patient?.email || 'NO EMAIL' \n          });\n        }\n      } catch (notificationError) {\n        console.error('🔥 APPROVAL - Notification error:', notificationError);\n      }\n\n      res.json({ \n        success: true, \n        message: 'Appointment approved successfully',\n        appointment \n      });\n    } catch (error: any) {\n      console.error('Error approving appointment:', error);\n      res.status(500).json({ error: 'Failed to approve appointment' });\n    }\n  });\n\n  // Admin route to reject appointment\n  app.post('/api/appointments/admin/:appointmentId/reject', authMiddleware, async (req, res) => {\n    try {\n      const { appointmentId } = req.params;\n      console.log('🔥 REJECTING APPOINTMENT:', appointmentId);\n      \n      // Update appointment status to cancelled\n      const appointment = await storage.updateAppointment(appointmentId, { \n        status: 'cancelled' \n      });\n      \n      if (!appointment) {\n        return res.status(404).json({ error: 'Appointment not found' });\n      }\n\n      console.log('🔥 Appointment rejected:', appointment.id);\n\n      // Send SMS notification to patient\n      try {\n        const patient = appointment.patient || await storage.getUser(appointment.patientId);\n        const doctor = appointment.doctor || await storage.getUser(appointment.doctorId);\n        \n        if (patient && doctor) {\n          const appointmentDate = new Date(appointment.appointmentDate);\n          const message = `We're sorry, but your appointment request with Dr. ${doctor.firstName} ${doctor.lastName} on ${appointmentDate.toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' })} could not be approved. Please contact the clinic to schedule an alternative time.`;\n          \n          await smsService.sendSMS(patient.phoneNumber, message);\n          console.log('🔥 Rejection SMS sent to:', patient.phoneNumber);\n        }\n      } catch (smsError) {\n        console.error('Failed to send rejection SMS:', smsError);\n        // Don't fail the request if SMS fails\n      }\n\n      res.json({ \n        success: true, \n        message: 'Appointment rejected successfully',\n        appointment \n      });\n    } catch (error: any) {\n      console.error('Error rejecting appointment:', error);\n      res.status(500).json({ error: 'Failed to reject appointment' });\n    }\n  });\n\n  // Admin appointment creation route (accepts patientName instead of patientId)\n  app.post(\"/api/appointments/admin\", authMiddleware, requireSuperAdmin, async (req, res) => {\n    try {\n      console.log('🔥 ADMIN APPOINTMENT CREATION:', req.body);\n      const { patientName, doctorId, appointmentDate, type, symptoms, status } = req.body;\n      \n      if (!patientName || !doctorId || !appointmentDate) {\n        return res.status(400).json({ message: \"Missing required fields: patientName, doctorId, appointmentDate\" });\n      }\n\n      // Try to find existing patient by name (fuzzy search)\n      const patients = await storage.getPatients(req.user!.clinicId);\n      const patient = patients.find(p => \n        `${p.firstName} ${p.lastName}`.toLowerCase().includes(patientName.toLowerCase()) ||\n        patientName.toLowerCase().includes(`${p.firstName} ${p.lastName}`.toLowerCase())\n      );\n\n      let patientId: string;\n      \n      if (patient) {\n        // Use existing patient\n        patientId = patient.id;\n        console.log('🔥 Found existing patient:', patientId, patientName);\n      } else {\n        // Create new patient from name\n        const nameParts = patientName.trim().split(' ');\n        const firstName = nameParts[0] || 'Unknown';\n        const lastName = nameParts.slice(1).join(' ') || 'Patient';\n        \n        console.log('🔥 Creating new patient:', firstName, lastName);\n        \n        const newPatient = await storage.createUser({\n          firstName,\n          lastName,\n          phoneNumber: `temp${Date.now()}`, // Temporary phone number\n          role: 'patient' as const,\n          password: 'temp123',\n          clinicId: req.user!.clinicId,\n          isApproved: true\n        });\n        \n        patientId = newPatient.id;\n        console.log('🔥 Created new patient:', patientId);\n      }\n\n      // Create appointment with found/created patient\n      const appointmentData = {\n        patientId,\n        doctorId,\n        clinicId: req.user!.clinicId,\n        appointmentDate: new Date(appointmentDate),\n        duration: 30,\n        type: type || 'clinic',\n        status: status || 'scheduled',\n        symptoms: symptoms || '',\n        notes: `Scheduled by admin for: ${patientName}`\n      };\n      \n      const validatedData = insertAppointmentSchema.parse(appointmentData);\n      const appointment = await storage.createAppointment(validatedData);\n      \n      console.log('🔥 Created appointment:', appointment.id);\n      res.json(appointment);\n    } catch (error: any) {\n      console.error('🔥 Error creating admin appointment:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Appointment routes\n  app.post(\"/api/appointments\", authMiddleware, async (req, res) => {\n    try {\n      // Handle date conversion if appointmentDate is provided as string\n      const { appointmentDate, ...otherData } = req.body;\n      const appointmentData = {\n        ...otherData,\n        ...(appointmentDate && { appointmentDate: new Date(appointmentDate) }),\n        patientId: req.user!.id  // Always set to current user for patients\n      };\n      \n      const validatedData = insertAppointmentSchema.parse(appointmentData);\n      \n      const appointment = await storage.createAppointment(validatedData);\n      res.json(appointment);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/appointments\", authMiddleware, async (req, res) => {\n    try {\n      const { date, doctorId } = req.query;\n      \n      if (date) {\n        const appointmentDate = new Date(date as string);\n        const appointments = await storage.getAppointmentsByDate(appointmentDate, doctorId as string);\n        res.json(appointments);\n      } else {\n        const appointments = await storage.getUserAppointments(req.user!.id, req.user!.role);\n        res.json(appointments);\n      }\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/appointments/:id\", authMiddleware, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const appointment = await storage.getAppointmentWithDetails(id);\n      \n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n\n      // Check access permissions\n      if (req.user!.role === 'patient' && appointment.patientId !== req.user!.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      if (req.user!.role === 'doctor' && appointment.doctorId !== req.user!.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(appointment);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/appointments/:id\", authMiddleware, async (req, res) => {\n    console.log('🚨🚨🚨 CORRECT RESCHEDULE ROUTE HIT!!! 🚨🚨🚨');\n    console.log('🚨 Method:', req.method, 'Path:', req.path);\n    console.log('🚨 Appointment ID:', req.params.id);\n    console.log('🚨 Request body:', JSON.stringify(req.body, null, 2));\n    \n    try {\n      const { id } = req.params;\n      // Handle date conversion if appointmentDate is provided as string\n      const { appointmentDate, ...otherData } = req.body;\n      // Get the original appointment first to compare dates\n      const existingAppointment = await storage.getAppointment(id);\n      if (!existingAppointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n      \n      const appointmentData = {\n        ...otherData,\n        ...(appointmentDate && { appointmentDate: new Date(appointmentDate) })\n      };\n      \n      // If rescheduling a completed appointment, reset status to scheduled\n      if (existingAppointment.status === 'completed' && appointmentDate) {\n        appointmentData.status = 'scheduled';\n        console.log('🚨 RESCHEDULE - Resetting completed appointment status to scheduled');\n      }\n      \n      const validatedData = insertAppointmentSchema.partial().parse(appointmentData);\n\n      // Check permissions\n      if (req.user!.role === 'patient' && existingAppointment.patientId !== req.user!.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      if (req.user!.role === 'doctor' && existingAppointment.doctorId !== req.user!.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const appointment = await storage.updateAppointment(id, validatedData);\n      \n      if (!appointment) {\n        return res.status(500).json({ message: \"Failed to update appointment\" });\n      }\n      \n      // Check if appointment date was changed (rescheduled)\n      const wasRescheduled = appointmentData.appointmentDate && \n        new Date(appointmentData.appointmentDate).getTime() !== new Date(existingAppointment.appointmentDate).getTime();\n      \n      console.log('🔥 RESCHEDULE DEBUG - Was rescheduled?', wasRescheduled);\n      console.log('🔥 RESCHEDULE DEBUG - Original date:', existingAppointment.appointmentDate);\n      console.log('🔥 RESCHEDULE DEBUG - New date:', appointmentData.appointmentDate);\n      \n      if (wasRescheduled) {\n        console.log('🔥 RESCHEDULE DEBUG - Sending email notification...');\n        \n        try {\n          // Get patient and doctor details for email\n          const patient = await storage.getUser(appointment.patientId);\n          const doctor = await storage.getUser(appointment.doctorId);\n          \n          console.log('🔥 RESCHEDULE DEBUG - Patient email:', patient?.email);\n          console.log('🔥 RESCHEDULE DEBUG - Doctor name:', doctor?.firstName, doctor?.lastName);\n          \n          if (patient?.email) {\n            // Format dates for email using Indian Standard Time\n            const originalDate = new Date(existingAppointment.appointmentDate);\n            const newDate = new Date(appointmentData.appointmentDate);\n            \n            console.log('🔥 RESCHEDULE DEBUG - Calling emailService.sendAppointmentRescheduled...');\n            \n            const emailResult = await emailService.sendAppointmentRescheduled(patient.email, {\n              doctorName: `Dr. ${doctor?.firstName} ${doctor?.lastName}`,\n              originalDate: originalDate.toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' }),\n              originalTime: originalDate.toLocaleTimeString('en-IN', { \n                timeZone: 'Asia/Kolkata',\n                hour: '2-digit',\n                minute: '2-digit'\n              }),\n              newDate: newDate.toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' }),\n              newTime: newDate.toLocaleTimeString('en-IN', { \n                timeZone: 'Asia/Kolkata',\n                hour: '2-digit',\n                minute: '2-digit'\n              }),\n              clinic: 'SmartClinic'\n            });\n            \n            console.log('🔥 RESCHEDULE DEBUG - Email result:', emailResult);\n            \n            if (emailResult.success) {\n              console.log('✅ Reschedule email sent successfully to:', patient.email);\n            } else {\n              console.error('❌ Failed to send reschedule email:', emailResult.error);\n            }\n          } else {\n            console.log('🔥 RESCHEDULE DEBUG - No patient email found, skipping email notification');\n          }\n        } catch (emailError) {\n          console.error('🔥 RESCHEDULE DEBUG - Error sending email:', emailError);\n        }\n      } else {\n        console.log('🔥 RESCHEDULE DEBUG - No email sent because appointment was not rescheduled');\n      }\n      \n      res.json(appointment);\n    } catch (error: any) {\n      console.error('🔥 RESCHEDULE DEBUG - Route error:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/appointments/:id\", authMiddleware, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const appointment = await storage.cancelAppointment(id);\n      \n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n\n      res.json(appointment);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Queue management routes\n  app.post(\"/api/queue/join\", authMiddleware, requireRole(['patient']), async (req, res) => {\n    try {\n      const { doctorId, appointmentId, priority } = z.object({\n        doctorId: z.string(),\n        appointmentId: z.string().optional(),\n        priority: z.number().default(1)\n      }).parse(req.body);\n\n      // Get clinic ID from user or doctor\n      const user = await storage.getUser(req.user!.id);\n      const doctor = await storage.getUser(doctorId);\n      const clinicId = user?.clinicId || doctor?.clinicId || '84e1b3c6-3b25-4446-96e8-a227d9e92d76';\n\n      // Validate clinic hours\n      const now = new Date();\n      if (clinicId) {\n        const isWithinHours = await storage.isWithinClinicHours(clinicId, now);\n        if (!isWithinHours) {\n          const clinic = await storage.getClinicById(clinicId);\n          return res.status(400).json({ \n            error: \"Queue is closed. Please join during clinic operating hours.\",\n            clinicHours: clinic?.operatingHours\n          });\n        }\n      }\n\n      const tokenNumber = await storage.getNextTokenNumber(doctorId, appointmentId);\n\n      const queueToken = await storage.createQueueToken({\n        tokenNumber,\n        patientId: req.user!.id,\n        doctorId,\n        clinicId,\n        appointmentId,\n        priority\n      });\n\n      res.json(queueToken);\n      \n      // Trigger WebSocket broadcast for live queue updates\n      await queueService.broadcastWebSocketUpdate(doctorId);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Test endpoint to add queue token for testing (admin only)\n  // Reorder queue by appointment time (admin only)\n  app.post(\"/api/queue/reorder\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const { doctorId } = z.object({\n        doctorId: z.string()\n      }).parse(req.body);\n\n      console.log('🔥 MANUAL REORDER - Starting for doctor:', doctorId);\n      await storage.reorderQueueByAppointmentTime(doctorId);\n      \n      // Trigger WebSocket broadcast for live queue updates\n      await queueService.broadcastWebSocketUpdate(doctorId);\n\n      res.json({ success: true, message: \"Queue reordered by appointment time\" });\n    } catch (error: any) {\n      console.error('🔥 QUEUE REORDER ERROR:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n\n\n  // Test reorder directly\n  app.get(\"/api/queue/test-reorder\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const doctorId = \"f3c906ec-c286-4a3c-b345-efb174acddad\";\n      console.log('🔥 TEST REORDER - Starting for doctor:', doctorId);\n      await storage.reorderQueueByAppointmentTime(doctorId);\n      \n      // Get updated queue after reorder\n      const updatedQueue = await storage.getAllQueueTokens();\n      \n      // Broadcast updates\n      await queueService.broadcastWebSocketUpdate(doctorId);\n      \n      res.json({ success: true, message: \"Queue reordered\", queue: updatedQueue });\n    } catch (error: any) {\n      console.error('🔥 TEST REORDER ERROR:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // API endpoint to clean up duplicate queue entries\n  app.post(\"/api/queue/cleanup\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      await storage.removeDuplicateQueueTokens();\n      res.json({ success: true, message: \"Queue cleanup completed\" });\n    } catch (error: any) {\n      console.error('🔥 CLEANUP ERROR:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/queue/test-add\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const { patientId, doctorId } = z.object({\n        patientId: z.string(),\n        doctorId: z.string()\n      }).parse(req.body);\n\n      const tokenNumber = await storage.getNextTokenNumber(doctorId);\n      const queueToken = await storage.createQueueToken({\n        tokenNumber,\n        patientId,\n        doctorId,\n        clinicId: '84e1b3c6-3b25-4446-96e8-a227d9e92d76',\n        priority: 1\n      });\n\n      console.log('🔥 TEST QUEUE TOKEN CREATED:', queueToken);\n      \n      // Trigger WebSocket broadcast for live queue updates\n      await queueService.broadcastWebSocketUpdate(doctorId);\n      console.log('🔥 TEST BROADCAST SENT');\n\n      res.json({ success: true, queueToken });\n    } catch (error: any) {\n      console.error('🔥 TEST QUEUE ERROR:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/queue/doctor/:doctorId\", authMiddleware, async (req, res) => {\n    try {\n      const { doctorId } = req.params;\n      const queue = await storage.getDoctorQueue(doctorId);\n      res.json(queue);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/queue/position\", authMiddleware, requireRole(['patient', 'admin']), async (req, res) => {\n    try {\n      const { doctorId } = req.query;\n      // If no doctorId provided, get the latest queue position for the patient\n      const position = await storage.getPatientQueuePosition(req.user!.id, doctorId as string);\n      res.json(position || { tokenNumber: null, position: null, estimatedWaitTime: 0 });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/queue/:id/status\", authMiddleware, requireRole(['admin', 'doctor', 'staff']), async (req, res) => {\n    try {\n      console.log('🔥 FIRST QUEUE ROUTE HIT - User role:', req.user?.role, 'Token ID:', req.params.id)\n      \n      const { id } = req.params;\n      const { status } = z.object({ status: z.string() }).parse(req.body);\n      \n      console.log('🔥 First route updating token:', id, 'to status:', status)\n      const token = await storage.updateQueueTokenStatus(id, status, new Date());\n      if (!token) {\n        return res.status(404).json({ message: \"Queue token not found\" });\n      }\n\n      // Broadcast queue update via Server-Sent Events\n      queueService.broadcastQueueUpdate(token.doctorId);\n      \n      // Broadcast to WebSocket clients\n      queueService.broadcastWebSocketUpdate(token.doctorId);\n\n      console.log('🔥 First route update successful')\n      res.json(token);\n    } catch (error: any) {\n      console.log('🔥 First route error:', error.message)\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Real-time queue updates (Server-Sent Events)\n  app.get(\"/api/queue/events/:doctorId\", authMiddleware, (req, res) => {\n    const { doctorId } = req.params;\n    \n    res.writeHead(200, {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive',\n      'Access-Control-Allow-Origin': '*'\n    });\n\n    queueService.addClient(doctorId, res);\n\n    req.on('close', () => {\n      queueService.removeClient(doctorId, res);\n    });\n  });\n\n  // WebSocket server for real-time updates (queue and general)\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  wss.on('connection', (ws: WebSocket, req: any) => {\n    console.log('🔥 WebSocket client connected');\n    queueService.addWebSocketClient(ws);\n    \n    ws.on('message', async (message: string) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        // Handle queue-specific subscriptions\n        if (data.type === 'subscribe_patient_queue' && data.patientId) {\n          // Subscribe patient to their queue updates\n          (ws as any).patientId = data.patientId;\n          console.log(`🔥 Patient ${data.patientId} subscribed to queue updates`);\n          \n          // Send current queue position\n          const position = await storage.getPatientQueuePosition(data.patientId);\n          ws.send(JSON.stringify({ type: 'queue_position', data: position || { tokenNumber: null, position: null, estimatedWaitTime: 0 } }));\n          \n          // Also send full queue data for patient's clinic\n          const user = await storage.getUser(data.patientId);\n          if (user?.clinicId) {\n            const fullQueue = await storage.getQueueTokensByClinic(user.clinicId);\n            // Filter for today's active tokens\n            const today = new Date();\n            today.setHours(0, 0, 0, 0);\n            const tomorrow = new Date(today);\n            tomorrow.setDate(tomorrow.getDate() + 1);\n            \n            const activeTokens = fullQueue.filter(token => {\n              const isActive = token.status !== 'completed' && token.status !== 'cancelled';\n              const appointmentDate = token.appointmentDate ? new Date(token.appointmentDate) : new Date();\n              appointmentDate.setHours(0, 0, 0, 0);\n              const isToday = appointmentDate >= today && appointmentDate < tomorrow;\n              return isActive && isToday;\n            });\n            \n            console.log('🔥 Patient subscription - Sending full queue:', activeTokens.length, 'tokens');\n            ws.send(JSON.stringify({ type: 'full_queue_update', data: activeTokens }));\n          }\n        }\n        \n        if (data.type === 'subscribe_admin_queue') {\n          // Subscribe admin to all queue updates\n          (ws as any).isAdmin = true;\n          console.log('🔥 Admin subscribed to queue updates');\n          \n          // Send current queue data\n          const queueTokens = await storage.getAllQueueTokens();\n          console.log('🔥 Admin subscription - Queue tokens found:', queueTokens?.length || 0);\n          console.log('🔥 Admin subscription - Sample token:', queueTokens?.[0] || 'none');\n          \n          const response = { type: 'admin_queue_update', data: queueTokens };\n          console.log('🔥 Admin subscription - Sending WebSocket response:', JSON.stringify(response).substring(0, 200) + '...');\n          \n          ws.send(JSON.stringify(response));\n          console.log('🔥 Admin subscription - WebSocket message sent successfully');\n        }\n        \n        // Handle general WebSocket messages\n        if (data.type === 'subscribe') {\n          ws.send(JSON.stringify({ type: 'subscribed', channel: data.channel }));\n        }\n        \n        if (data.type === 'ping') {\n          ws.send(JSON.stringify({ type: 'pong' }));\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n    \n    ws.on('close', () => {\n      console.log('🔥 WebSocket client disconnected');\n      queueService.removeWebSocketClient(ws);\n    });\n    \n    // Send initial connection confirmation\n    ws.send(JSON.stringify({ type: 'connected', timestamp: new Date().toISOString() }));\n  });\n\n  // Medicine routes\n  app.post(\"/api/medicines\", authMiddleware, requireRole(['doctor', 'admin']), async (req, res) => {\n    try {\n      const medicineData = insertMedicineSchema.parse(req.body);\n      const medicine = await storage.createMedicine(medicineData);\n      res.json(medicine);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Removed duplicate medicines endpoint - using the one below at line 2436\n\n  // Prescription routes\n  app.post(\"/api/prescriptions\", authMiddleware, requireRole(['doctor']), async (req, res) => {\n    try {\n      const prescriptionData = insertPrescriptionSchema.parse(req.body);\n      prescriptionData.doctorId = req.user!.id;\n      \n      const prescription = await storage.createPrescription(prescriptionData);\n      \n      // Schedule medicine reminders\n      await schedulerService.createMedicineReminders(prescription.id);\n      \n      res.json(prescription);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/prescriptions\", authMiddleware, async (req, res) => {\n    try {\n      const { patientId } = req.query;\n      \n      if (req.user!.role === 'patient') {\n        const prescriptions = await storage.getPatientPrescriptions(req.user!.id);\n        res.json(prescriptions);\n      } else if (patientId) {\n        const prescriptions = await storage.getPatientPrescriptions(patientId as string);\n        res.json(prescriptions);\n      } else {\n        res.status(400).json({ message: \"Patient ID required\" });\n      }\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/prescriptions/active\", authMiddleware, requireRole(['patient', 'admin']), async (req, res) => {\n    try {\n      const prescriptions = await storage.getActivePrescriptions(req.user!.id);\n      res.json(prescriptions);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Custom medicine routes - properly implemented\n  \n  // Edit medicine\n  app.put(\"/api/custom-medicines/:id\", authMiddleware, requireRole(['patient', 'admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { name, dosage, frequency, instructions, startDate, endDate, timings } = req.body;\n      \n      // Get existing prescription to update\n      const prescription = await storage.getPrescription(id);\n      if (!prescription) {\n        return res.status(404).json({ message: \"Medicine not found\" });\n      }\n      \n      // Update medicine details\n      const updatedMedicine = await storage.updateMedicine(prescription.medicineId, {\n        name,\n        strength: dosage || '1 tablet',\n        manufacturer: 'Patient Added'\n      });\n      \n      // Update prescription with custom timings\n      const updatedPrescription = await storage.updatePrescription(id, {\n        dosage,\n        frequency,\n        instructions,\n        startDate: new Date(startDate),\n        endDate: endDate ? new Date(endDate) : null,\n        timings: timings || null\n      });\n      \n      // Delete existing future reminders and regenerate with new timings\n      await storage.deleteFutureReminders(id);\n      \n      // Regenerate reminders with new timings\n      try {\n        await schedulerService.createMedicineReminders(id);\n        console.log('🔥 Medicine reminders regenerated with new timings');\n      } catch (error) {\n        console.error('Error regenerating reminders:', error);\n      }\n      \n      if (!updatedPrescription || !updatedMedicine) {\n        return res.status(500).json({ message: \"Failed to update medicine\" });\n      }\n      \n      res.json({ \n        success: true, \n        medicine: {\n          id: updatedPrescription.id,\n          name: updatedMedicine.name,\n          dosage: updatedPrescription.dosage,\n          frequency: updatedPrescription.frequency,\n          instructions: updatedPrescription.instructions,\n          startDate: updatedPrescription.startDate,\n          endDate: updatedPrescription.endDate,\n          timings: timings || []\n        }\n      });\n    } catch (error: any) {\n      console.error('Error updating medicine:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n  \n  // Delete medicine\n  app.delete(\"/api/custom-medicines/:id\", authMiddleware, requireRole(['patient', 'admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Get prescription first\n      const prescription = await storage.getPrescription(id);\n      if (!prescription) {\n        return res.status(404).json({ message: \"Medicine not found\" });\n      }\n      \n      // Delete associated reminders first\n      await storage.deleteFutureReminders(id);\n      \n      // Delete prescription\n      await storage.deletePrescription(id);\n      \n      // Delete medicine if it was patient-added (get medicine info first)\n      const medicine = await storage.getMedicine(prescription.medicineId);\n      if (medicine && medicine.manufacturer === 'Patient Added') {\n        await storage.deleteMedicine(prescription.medicineId);\n      }\n      \n      res.json({ success: true, message: \"Medicine deleted successfully\" });\n    } catch (error: any) {\n      console.error('Error deleting medicine:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/custom-medicines\", authMiddleware, requireRole(['patient', 'admin']), async (req, res) => {\n    try {\n      const { name, dosage, frequency, instructions, startDate, endDate, timings } = req.body;\n      \n      // First create a medicine entry for patient\n      const medicine = await storage.createPatientMedicine({\n        name,\n        description: `Custom medicine added by patient`,\n        dosageForm: 'custom',\n        strength: dosage,\n        manufacturer: 'Patient Added'\n      });\n\n      // Then create a prescription for this custom medicine\n      const prescription = await storage.createPrescription({\n        patientId: req.user!.id,\n        doctorId: req.user!.id, // Self-prescribed for custom medicines\n        medicineId: medicine.id,\n        dosage,\n        frequency,\n        instructions,\n        startDate: new Date(startDate),\n        endDate: endDate ? new Date(endDate) : undefined,\n        timings: timings || null,\n        totalDoses: 30, // Default\n        status: 'active'\n      });\n\n      // Create reminders for this prescription\n      if (schedulerService) {\n        try {\n          await schedulerService.createMedicineReminders(prescription.id);\n        } catch (error) {\n          console.error('Failed to create reminders for custom medicine:', error);\n        }\n      }\n\n      res.json({ success: true, medicine, prescription, timings });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/custom-medicines\", authMiddleware, requireRole(['patient', 'admin']), async (req, res) => {\n    try {\n      // Return patient's custom medicines (medicines they added themselves)\n      const prescriptions = await storage.getPatientPrescriptions(req.user!.id);\n      const customMedicines = prescriptions\n        .filter(p => p.medicine.manufacturer === 'Patient Added')\n        .map(p => {\n          // Use custom timings if available, otherwise fall back to frequency-based defaults\n          const timings = p.timings && p.timings.length > 0 \n            ? p.timings \n            : generateTimingsFromFrequency(p.frequency);\n          \n          return {\n            id: p.id,\n            name: p.medicine.name,\n            dosage: p.dosage,\n            frequency: p.frequency,\n            instructions: p.instructions,\n            startDate: p.startDate,\n            endDate: p.endDate,\n            status: p.status,\n            medicine: p.medicine,\n            timings\n          };\n        });\n      \n      res.json(customMedicines);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/medicines/upload\", authMiddleware, requireRole(['patient', 'admin']), async (req, res) => {\n    try {\n      const { medicineList } = req.body;\n      \n      if (!medicineList || typeof medicineList !== 'string') {\n        return res.status(400).json({ message: \"Medicine list text is required\" });\n      }\n\n      // Parse the medicine list (expecting format like \"Medicine Name - Dosage - Frequency - Instructions\")\n      const lines = medicineList.split('\\n').filter(line => line.trim());\n      const createdMedicines = [];\n\n      // Helper function to normalize frequency text to valid enum values\n      const normalizeFrequency = (freq: string): \"once_daily\" | \"twice_daily\" | \"three_times_daily\" | \"four_times_daily\" | \"as_needed\" | \"weekly\" | \"monthly\" => {\n        const normalized = freq.toLowerCase().replace(/[^a-z0-9]/g, '');\n        \n        if (normalized.includes('once') || normalized.includes('1') || normalized.includes('daily') || normalized === '') {\n          return 'once_daily';\n        } else if (normalized.includes('twice') || normalized.includes('2') || normalized.includes('bid')) {\n          return 'twice_daily';\n        } else if (normalized.includes('three') || normalized.includes('3') || normalized.includes('tid')) {\n          return 'three_times_daily';\n        } else if (normalized.includes('four') || normalized.includes('4') || normalized.includes('qid')) {\n          return 'four_times_daily';\n        } else if (normalized.includes('needed') || normalized.includes('prn')) {\n          return 'as_needed';\n        } else if (normalized.includes('week')) {\n          return 'weekly';\n        } else if (normalized.includes('month')) {\n          return 'monthly';\n        } else {\n          return 'once_daily'; // default fallback\n        }\n      };\n\n      console.log('🔥 BULK UPLOAD - Processing lines:', lines);\n      \n      for (const line of lines) {\n        const parts = line.split('-').map(part => part.trim());\n        if (parts.length >= 1 && parts[0]) { // Only require medicine name\n          const name = parts[0];\n          const dosage = parts[1] || '1 tablet';\n          const rawFrequency = parts[2] || 'once daily';\n          const frequency = normalizeFrequency(rawFrequency);\n          const instructions = parts[3] || 'Take as prescribed';\n\n          console.log(`🔥 BULK UPLOAD - Processing: ${name} | ${dosage} | ${rawFrequency} -> ${frequency} | ${instructions}`);\n\n          try {\n            // Create medicine\n            const medicine = await storage.createPatientMedicine({\n              name,\n              description: `Uploaded medicine by patient`,\n              dosageForm: 'tablet',\n              strength: dosage,\n              manufacturer: 'Patient Added'\n            });\n\n            // Create prescription\n            const prescription = await storage.createPrescription({\n              patientId: req.user!.id,\n              doctorId: req.user!.id,\n              medicineId: medicine.id,\n              dosage,\n              frequency: frequency,\n              instructions,\n              startDate: new Date(),\n              totalDoses: 30,\n              status: 'active'\n            });\n\n            // Create reminders for this prescription\n            if (schedulerService) {\n              try {\n                await schedulerService.createMedicineReminders(prescription.id);\n              } catch (error) {\n                console.error('Failed to create reminders for uploaded medicine:', error);\n              }\n            }\n\n            createdMedicines.push({ medicine, prescription });\n            console.log(`🔥 BULK UPLOAD - Successfully added: ${name}`);\n          } catch (error) {\n            console.error(`🔥 BULK UPLOAD - Failed to add ${name}:`, error);\n          }\n        } else {\n          console.log(`🔥 BULK UPLOAD - Skipping invalid line: \"${line}\"`);\n        }\n      }\n\n      res.json({ \n        success: true, \n        message: `Added ${createdMedicines.length} medicines`,\n        medicines: createdMedicines\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/reminders/:id\", authMiddleware, requireRole(['patient', 'admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = z.object({ status: z.enum(['taken', 'skipped', 'not_taken']) }).parse(req.body);\n      \n      if (status === 'not_taken') {\n        // Reset the reminder status to not taken\n        const reminder = await storage.resetReminderStatus(id);\n        if (!reminder) {\n          return res.status(404).json({ message: \"Reminder not found\" });\n        }\n        res.json(reminder);\n      } else {\n        const reminder = await storage.updateReminderStatus(id, status);\n        if (!reminder) {\n          return res.status(404).json({ message: \"Reminder not found\" });\n        }\n        res.json(reminder);\n      }\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Get missed doses count for each medicine\n  app.get(\"/api/reminders/missed\", authMiddleware, requireRole(['patient', 'admin']), async (req, res) => {\n    try {\n      const reminders = await storage.getPatientReminders(req.user!.id);\n      const now = new Date();\n      \n      // Group by medicine and count missed doses\n      const missedDosesPerMedicine = reminders.reduce((acc: any, reminder: any) => {\n        const medicineName = reminder.prescription?.medicine?.name;\n        const scheduledTime = new Date(reminder.scheduledAt);\n        const isOverdue = !reminder.isTaken && !reminder.isSkipped && scheduledTime < now;\n        \n        if (!acc[medicineName]) {\n          acc[medicineName] = {\n            medicineName,\n            totalReminders: 0,\n            missedDoses: 0,\n            overdueToday: 0\n          };\n        }\n        \n        acc[medicineName].totalReminders++;\n        \n        if (reminder.isSkipped) {\n          acc[medicineName].missedDoses++;\n        }\n        \n        if (isOverdue) {\n          acc[medicineName].overdueToday++;\n        }\n        \n        return acc;\n      }, {});\n      \n      res.json(Object.values(missedDosesPerMedicine));\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Emergency request endpoint\n  app.post(\"/api/emergency\", authMiddleware, requireRole(['patient']), async (req, res) => {\n    try {\n      const { doctorId, urgencyLevel, symptoms, contactMethod, location, notes } = req.body;\n      \n      // For now, return success message - would integrate with actual emergency services\n      res.json({ \n        success: true, \n        message: \"Emergency request submitted successfully. A doctor will contact you immediately.\",\n        emergencyId: `emergency_${Date.now()}`,\n        estimatedResponseTime: contactMethod === 'ambulance' ? '5-10 minutes' : '2-5 minutes'\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Settings endpoints\n  app.put(\"/api/users/settings\", authMiddleware, async (req, res) => {\n    try {\n      const settings = req.body;\n      \n      // For now, return success - would store in user preferences table\n      res.json({ success: true, message: \"Settings updated successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Delete account endpoint\n  app.delete(\"/api/users/me\", authMiddleware, async (req, res) => {\n    try {\n      // Deactivate user instead of deleting to preserve data integrity\n      const user = await storage.deactivateUser(req.user!.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Invalidate all user sessions\n      await storage.invalidateUserSessions(req.user!.id);\n      \n      res.json({ success: true, message: \"Account deactivated successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Notification endpoints\n  app.get(\"/api/notifications\", authMiddleware, async (req, res) => {\n    try {\n      // For now, return sample notifications\n      const notifications = [\n        {\n          id: \"1\",\n          title: \"Appointment Reminder\",\n          message: \"You have an appointment with Dr. Sarah Johnson at 2:30 PM today\",\n          type: \"appointment\",\n          read: false,\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: \"2\", \n          title: \"Medicine Reminder\",\n          message: \"Time to take your medication - Aspirin 500mg\",\n          type: \"medicine\",\n          read: false,\n          createdAt: new Date().toISOString()\n        },\n        {\n          id: \"3\",\n          title: \"Queue Update\", \n          message: \"You are now #2 in the queue for Dr. Kumar\",\n          type: \"queue\",\n          read: true,\n          createdAt: new Date().toISOString()\n        }\n      ];\n      res.json(notifications);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/notifications/:id/read\", authMiddleware, async (req, res) => {\n    try {\n      const { id } = req.params;\n      // For now, return success\n      res.json({ success: true, message: \"Notification marked as read\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Cancel appointment endpoint\n  app.put(\"/api/appointments/:id/cancel\", authMiddleware, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { reason } = req.body;\n      \n      const appointment = await storage.cancelAppointment(id);\n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n      \n      res.json(appointment);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Medicine reminder routes\n  app.get(\"/api/reminders\", authMiddleware, requireRole(['patient', 'admin']), async (req, res) => {\n    try {\n      const { date } = req.query;\n      const reminderDate = date ? new Date(date as string) : new Date();\n      const reminders = await storage.getPatientReminders(req.user!.id, reminderDate);\n      res.json(reminders);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/reminders/:id/taken\", authMiddleware, requireRole(['patient', 'admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const reminder = await storage.markReminderTaken(id);\n      \n      if (!reminder) {\n        return res.status(404).json({ message: \"Reminder not found\" });\n      }\n\n      res.json(reminder);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/reminders/:id/skipped\", authMiddleware, requireRole(['patient', 'admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const reminder = await storage.markReminderSkipped(id);\n      \n      if (!reminder) {\n        return res.status(404).json({ message: \"Reminder not found\" });\n      }\n\n      res.json(reminder);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Delay notification routes\n  app.post(\"/api/delays\", authMiddleware, requireRole(['doctor', 'staff', 'admin']), async (req, res) => {\n    try {\n      const delayData = insertDelayNotificationSchema.parse(req.body);\n      // For doctors, use their own ID; for staff/admin, use the provided doctorId\n      if (req.user!.role === 'doctor') {\n        delayData.doctorId = req.user!.id;\n      }\n      \n      const notification = await storage.createDelayNotification(delayData);\n      \n      // Send SMS notifications to affected patients\n      await smsService.sendDelayNotifications(notification.doctorId, notification.delayMinutes, notification.reason || undefined);\n      \n      res.json(notification);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Public endpoint for delay notifications (patients should see all active delays)\n  app.get(\"/api/delays\", async (req, res) => {\n    try {\n      // Get all active delay notifications for public viewing\n      const notifications = await storage.getAllActiveDelayNotifications();\n      res.json(notifications);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/delays/:id/resolve\", authMiddleware, requireRole(['doctor', 'staff']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const notification = await storage.resolveDelayNotification(id);\n      \n      if (!notification) {\n        return res.status(404).json({ message: \"Delay notification not found\" });\n      }\n\n      res.json(notification);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Patient Feedback routes\n  app.post(\"/api/feedback\", async (req, res) => {\n    try {\n      const feedbackData = insertPatientFeedbackSchema.parse(req.body);\n      \n      // Check if user is authenticated, if so use their ID, otherwise allow anonymous feedback\n      if (req.headers.authorization) {\n        try {\n          const token = req.headers.authorization.split(' ')[1];\n          const jwt = require('jsonwebtoken');\n          const decoded = jwt.verify(token, process.env.JWT_SECRET || 'smartclinic-secret') as any;\n          feedbackData.patientId = decoded.id;\n        } catch {\n          // Invalid token, but still allow feedback submission\n          feedbackData.patientId = null;\n        }\n      } else {\n        feedbackData.patientId = null;\n      }\n      \n      const feedback = await storage.createPatientFeedback(feedbackData);\n      res.json(feedback);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/feedback\", authMiddleware, requireRole(['admin', 'staff']), async (req, res) => {\n    try {\n      const feedback = await storage.getAllPatientFeedback();\n      res.json(feedback);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/feedback/patient/:patientId\", authMiddleware, requireRole(['admin', 'staff', 'doctor']), async (req, res) => {\n    try {\n      const { patientId } = req.params;\n      const feedback = await storage.getPatientFeedbackByPatientId(patientId);\n      res.json(feedback);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/feedback/:id/read\", authMiddleware, requireRole(['admin', 'staff']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updatedFeedback = await storage.markFeedbackAsRead(id);\n      if (!updatedFeedback) {\n        return res.status(404).json({ message: \"Feedback not found\" });\n      }\n      res.json(updatedFeedback);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Home visit routes\n  app.post(\"/api/home-visits\", authMiddleware, requireRole(['doctor']), async (req, res) => {\n    try {\n      const visitData = insertHomeVisitSchema.parse(req.body);\n      visitData.doctorId = req.user!.id;\n      \n      const visit = await storage.createHomeVisit(visitData);\n      res.json(visit);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/home-visits\", authMiddleware, async (req, res) => {\n    try {\n      const { date } = req.query;\n      const visitDate = date ? new Date(date as string) : undefined;\n      \n      if (req.user!.role === 'doctor') {\n        const visits = await storage.getDoctorHomeVisits(req.user!.id, visitDate);\n        res.json(visits);\n      } else {\n        res.status(403).json({ message: \"Access denied\" });\n      }\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/home-visits/:id\", authMiddleware, requireRole(['doctor']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const visitData = insertHomeVisitSchema.partial().parse(req.body);\n      \n      const visit = await storage.updateHomeVisit(id, visitData);\n      if (!visit) {\n        return res.status(404).json({ message: \"Home visit not found\" });\n      }\n\n      res.json(visit);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Medical history routes\n  app.post(\"/api/medical-history\", authMiddleware, requireRole(['doctor']), async (req, res) => {\n    try {\n      const historyData = insertMedicalHistorySchema.parse(req.body);\n      historyData.doctorId = req.user!.id;\n      \n      const history = await storage.createMedicalHistory(historyData);\n      res.json(history);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/medical-history\", authMiddleware, async (req, res) => {\n    try {\n      const { patientId } = req.query;\n      \n      if (req.user!.role === 'patient') {\n        const history = await storage.getPatientMedicalHistory(req.user!.id);\n        res.json(history);\n      } else if (patientId) {\n        const history = await storage.getPatientMedicalHistory(patientId as string);\n        res.json(history);\n      } else {\n        res.status(400).json({ message: \"Patient ID required\" });\n      }\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Admin-specific routes\n  app.get(\"/api/admin/dashboard-stats\", authMiddleware, requireSuperAdmin, async (req, res) => {\n    try {\n\n      // Check if super admin - show all clinics data\n      const isSuperAdmin = req.user!.email === '44441100sf@gmail.com';\n      const adminClinicId = req.user!.clinicId;\n      \n      console.log('🔥 DASHBOARD STATS - Super admin:', isSuperAdmin, 'Admin clinic ID:', adminClinicId);\n      \n      if (!isSuperAdmin && !adminClinicId) {\n        return res.status(400).json({ message: \"Admin user has no associated clinic\" });\n      }\n\n      // Get today's date for filtering - use current date as \"today\"\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n\n      console.log('🔥 DASHBOARD STATS - Date range:', { \n        today: today.toISOString(), \n        tomorrow: tomorrow.toISOString(),\n        todayLocal: today.toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' }),\n        tomorrowLocal: tomorrow.toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' })\n      });\n\n      // Fetch stats - all clinics for super admin, specific clinic for regular admin\n      let todayAppointments;\n      if (isSuperAdmin) {\n        todayAppointments = await storage.getAppointmentsByDateRange(today, tomorrow); // No clinic filter\n        console.log('🔥 DASHBOARD STATS - Super admin: Found appointments from ALL clinics:', todayAppointments.length);\n      } else {\n        todayAppointments = await storage.getAppointmentsByDateRange(today, tomorrow, adminClinicId);\n        console.log('🔥 DASHBOARD STATS - Found appointments for clinic:', todayAppointments.length);\n      }\n      console.log('🔥 DASHBOARD STATS - Sample appointment dates:', todayAppointments.slice(0, 3).map(apt => ({\n        id: apt.id,\n        appointmentDate: apt.appointmentDate,\n        status: apt.status\n      })));\n      \n      const completedAppointments = todayAppointments.filter((apt: any) => apt.status === 'completed');\n      console.log('🔥 DASHBOARD STATS - Completed appointments:', completedAppointments.length);\n      console.log('🔥 DASHBOARD STATS - Completed IDs:', completedAppointments.map(apt => ({ id: apt.id, status: apt.status })));\n      \n      const revenue = completedAppointments.length * 150; // Assuming $150 per consultation\n\n      // Calculate active staff - all clinics for super admin, specific clinic for regular admin\n      let activeStaff;\n      if (isSuperAdmin) {\n        activeStaff = await storage.getActiveStaffCount(); // All clinics\n      } else {\n        activeStaff = await storage.getActiveStaffCountByClinic(adminClinicId);\n      }\n\n      const stats = {\n        patientsToday: todayAppointments.length,\n        completedAppointments: completedAppointments.length,\n        revenue: revenue,\n        activeStaff: activeStaff,\n      };\n\n      console.log('🔥 DASHBOARD STATS - Final stats:', stats);\n      res.json(stats);\n    } catch (error: any) {\n      console.error('🔥 DASHBOARD STATS - Error:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Reports endpoint\n  app.get(\"/api/reports/daily\", authMiddleware, requireSuperAdmin, async (req, res) => {\n    try {\n      // Get today's date for filtering\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n\n      // Fetch comprehensive data for the report\n      const todayAppointments = await storage.getAppointmentsByDateRange(today, tomorrow);\n      const completedAppointments = todayAppointments.filter((apt: any) => apt.status === 'completed');\n      const cancelledAppointments = todayAppointments.filter((apt: any) => apt.status === 'cancelled');\n      const pendingAppointments = todayAppointments.filter((apt: any) => apt.status === 'scheduled');\n      \n      const allPatients = await storage.getPatients();\n      const todayPatients = allPatients.filter(patient => {\n        const patientDate = new Date(patient.createdAt);\n        return patientDate >= today && patientDate < tomorrow;\n      });\n\n      const queueTokens = await storage.getQueueTokens();\n      const todayQueue = queueTokens.filter(token => {\n        const tokenDate = new Date(token.createdAt);\n        return tokenDate >= today && tokenDate < tomorrow;\n      });\n\n      const revenue = completedAppointments.length * 150; // $150 per consultation\n      const activeStaff = await storage.getActiveStaffCount();\n\n      const report = {\n        date: today.toISOString().split('T')[0],\n        summary: {\n          totalPatients: todayPatients.length,\n          totalAppointments: todayAppointments.length,\n          completedAppointments: completedAppointments.length,\n          cancelledAppointments: cancelledAppointments.length,\n          pendingAppointments: pendingAppointments.length,\n          revenue: revenue,\n          activeStaff: activeStaff,\n          queueProcessed: todayQueue.length\n        },\n        appointments: {\n          total: todayAppointments.length,\n          completed: completedAppointments.length,\n          cancelled: cancelledAppointments.length,\n          pending: pendingAppointments.length,\n          completionRate: todayAppointments.length > 0 ? Math.round((completedAppointments.length / todayAppointments.length) * 100) : 0\n        },\n        patients: {\n          newRegistrations: todayPatients.length,\n          totalActive: allPatients.filter(p => p.isActive).length,\n          totalRegistered: allPatients.length\n        },\n        queue: {\n          processed: todayQueue.filter(t => t.status === 'completed').length,\n          waiting: todayQueue.filter(t => t.status === 'waiting').length,\n          missed: todayQueue.filter(t => t.status === 'missed').length,\n          averageWaitTime: todayQueue.length > 0 ? Math.round(todayQueue.reduce((acc, t) => acc + (t.estimatedWaitTime || 15), 0) / todayQueue.length) : 0\n        },\n        financial: {\n          grossRevenue: revenue,\n          consultationFees: completedAppointments.length * 150,\n          averageRevenuePerPatient: todayPatients.length > 0 ? Math.round(revenue / todayPatients.length) : 0\n        },\n        staff: {\n          active: activeStaff,\n          onDuty: activeStaff, // Assuming all active staff are on duty\n          productivity: completedAppointments.length > 0 ? Math.round(completedAppointments.length / Math.max(activeStaff, 1)) : 0\n        },\n        generatedAt: new Date().toISOString(),\n        generatedBy: req.user!.firstName + ' ' + req.user!.lastName\n      };\n\n      res.json(report);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Medicine management routes - accessible by patients, staff, doctors, and admins\n  app.get(\"/api/medicines\", authMiddleware, async (req, res) => {\n    try {\n      console.log('🔥 MEDICINES GET - User:', req.user!.email, 'Role:', req.user!.role, 'Clinic ID:', req.user!.clinicId);\n      \n      // Allow all authenticated users to access medicines\n      // For admin users, filter by clinic ID\n      if (req.user!.role === 'admin' && req.user!.clinicId) {\n        const medicines = await storage.getMedicinesByClinic(req.user!.clinicId);\n        console.log('🔥 MEDICINES - Admin fetching for clinic:', req.user!.clinicId, 'Count:', medicines.length);\n        res.json(medicines);\n      } else {\n        // For patients, doctors, and staff - show all available medicines\n        const medicines = await storage.getAllMedicines();\n        console.log('🔥 MEDICINES - All medicines count:', medicines.length);\n        res.json(medicines);\n      }\n    } catch (error: any) {\n      console.error('🔥 MEDICINES - Error:', error);\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/medicines\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { name, strength, dosageForm, manufacturer, stock, description } = req.body;\n      \n      const medicine = await storage.addMedicine({\n        name,\n        strength,\n        dosageForm,\n        manufacturer,\n        clinicId: req.user!.clinicId || 'default-clinic-id', // Add the required clinicId\n        stock: parseInt(stock) || 0,\n        description\n      });\n      \n      console.log('🔥 MEDICINE ADDED - Admin:', req.user!.email, 'Clinic:', req.user!.clinicId, 'Medicine:', name);\n      res.json(medicine);\n    } catch (error: any) {\n      console.error('🔥 MEDICINE ADD ERROR:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/medicines/:medicineId\", authMiddleware, requireSuperAdmin, async (req, res) => {\n    try {\n\n      const { medicineId } = req.params;\n      const { name, strength, dosageForm, manufacturer, stock, description } = req.body;\n      \n      console.log(`Updating medicine ${medicineId} with:`, { name, strength, dosageForm, manufacturer, stock, description });\n      \n      const medicine = await storage.updateMedicine(medicineId, {\n        name,\n        strength,\n        dosageForm,\n        manufacturer,\n        stock: parseInt(stock) || 0,\n        description\n      });\n      \n      console.log('Updated medicine result:', medicine);\n      \n      if (!medicine) {\n        return res.status(404).json({ message: \"Medicine not found\" });\n      }\n      \n      res.json(medicine);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/medicines/:medicineId/restock\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { medicineId } = req.params;\n      const { amount } = req.body;\n      \n      const medicine = await storage.getMedicineById(medicineId);\n      if (!medicine) {\n        return res.status(404).json({ message: \"Medicine not found\" });\n      }\n      \n      const newStock = (medicine.stock || 0) + parseInt(amount);\n      console.log(`Restocking medicine ${medicineId}: current stock ${medicine.stock}, adding ${amount}, new stock ${newStock}`);\n      \n      const updatedMedicine = await storage.updateMedicine(medicineId, {\n        ...medicine,\n        stock: newStock\n      });\n      \n      console.log('Updated medicine result:', updatedMedicine);\n      res.json(updatedMedicine);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Other admin routes\n  app.get(\"/api/queue/admin\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Get admin's clinic ID\n      const adminClinicId = req.user!.clinicId;\n      console.log('🔥 QUEUE ADMIN - Admin clinic ID:', adminClinicId);\n      \n      if (!adminClinicId) {\n        return res.status(400).json({ message: \"Admin user has no associated clinic\" });\n      }\n\n      const tokens = await storage.getQueueTokensByClinic(adminClinicId);\n      console.log('🔥 QUEUE ADMIN - Found tokens for clinic:', tokens.length);\n      res.json(tokens);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Public queue view for patients - shows full queue for their clinic\n  app.get(\"/api/queue/public\", authMiddleware, async (req, res) => {\n    try {\n      // Get user's clinic ID\n      const userClinicId = req.user!.clinicId;\n      console.log('🔥 QUEUE PUBLIC - User clinic ID:', userClinicId);\n      \n      if (!userClinicId) {\n        return res.status(400).json({ message: \"User has no associated clinic\" });\n      }\n\n      const tokens = await storage.getQueueTokensByClinic(userClinicId);\n      console.log('🔥 QUEUE PUBLIC - Found tokens for clinic:', tokens.length);\n      \n      // Filter out completed tokens and only show today's queue\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      \n      const activeTokens = tokens.filter(token => {\n        const isActive = token.status !== 'completed' && token.status !== 'cancelled';\n        const appointmentDate = token.appointmentDate ? new Date(token.appointmentDate) : new Date();\n        appointmentDate.setHours(0, 0, 0, 0);\n        const isToday = appointmentDate >= today && appointmentDate < tomorrow;\n        return isActive && isToday;\n      });\n      \n      console.log('🔥 QUEUE PUBLIC - Active tokens for today:', activeTokens.length);\n      res.json(activeTokens);\n    } catch (error: any) {\n      console.error('🔥 QUEUE PUBLIC ERROR:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n\n\n  app.put(\"/api/users/:userId/approve\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { userId } = req.params;\n      const { isApproved } = req.body;\n      \n      const user = await storage.updateUserApproval(userId, isApproved);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"User approval status updated successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/queue/:tokenId/status\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.role !== 'admin' && req.user!.role !== 'doctor' && req.user!.role !== 'staff') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { tokenId } = req.params;\n      const { status } = req.body;\n      \n      const updatedToken = await storage.updateQueueTokenStatus(tokenId, status, new Date());\n      if (!updatedToken) {\n        return res.status(404).json({ message: \"Queue token not found\" });\n      }\n\n      res.json({ message: \"Queue status updated successfully\", token: updatedToken });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Staff Management Routes\n  app.put(\"/api/users/:userId/activate\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { userId } = req.params;\n      const user = await storage.updateUser(userId, { isActive: true });\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"User activated successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/users/:userId/deactivate\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { userId } = req.params;\n      const user = await storage.updateUser(userId, { isActive: false });\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({ message: \"User deactivated successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Appointment Management Routes\n  app.put(\"/api/appointments/:appointmentId/status\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.role !== 'admin' && req.user!.role !== 'doctor' && req.user!.role !== 'staff') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { appointmentId } = req.params;\n      const { status } = req.body;\n      \n      const appointment = await storage.updateAppointment(appointmentId, { status });\n      \n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n\n      res.json({ message: \"Appointment status updated successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/appointments/:appointmentId\", authMiddleware, async (req, res) => {\n    console.log('🚨🚨🚨 RESCHEDULE ROUTE HIT!!! 🚨🚨🚨');\n    console.log('🚨 Method:', req.method, 'Path:', req.path);\n    console.log('🚨 Appointment ID:', req.params.appointmentId);\n    console.log('🚨 Request body:', JSON.stringify(req.body, null, 2));\n    \n    try {\n      if (req.user!.role !== 'admin' && req.user!.role !== 'doctor' && req.user!.role !== 'staff') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { appointmentId } = req.params;\n      const updates = { ...req.body, updatedAt: new Date() };\n      \n      console.log('🔥 RESCHEDULE DEBUG - Appointment ID:', appointmentId);\n      console.log('🔥 RESCHEDULE DEBUG - Updates received:', updates);\n      \n      // Get the original appointment first to compare dates\n      const originalAppointment = await storage.getAppointmentById(appointmentId);\n      if (!originalAppointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n      \n      console.log('🔥 RESCHEDULE DEBUG - Original appointment date:', originalAppointment.appointmentDate);\n      \n      const appointment = await storage.updateAppointment(appointmentId, updates);\n      \n      if (!appointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n\n      console.log('🔥 RESCHEDULE DEBUG - Updated appointment date:', appointment.appointmentDate);\n\n      // Check if appointment date was changed (rescheduled)\n      const wasRescheduled = updates.appointmentDate && \n        new Date(updates.appointmentDate).getTime() !== new Date(originalAppointment.appointmentDate).getTime();\n\n      console.log('🔥 RESCHEDULE DEBUG - Was rescheduled?', wasRescheduled);\n      console.log('🔥 RESCHEDULE DEBUG - Original date time:', new Date(originalAppointment.appointmentDate).getTime());\n      console.log('🔥 RESCHEDULE DEBUG - New date time:', updates.appointmentDate ? new Date(updates.appointmentDate).getTime() : 'undefined');\n\n      if (wasRescheduled) {\n        try {\n          console.log('🔥 RESCHEDULE DEBUG - Starting email notification process');\n          \n          // Get patient and doctor details for email notification\n          const patient = await storage.getUser(appointment.patientId);\n          const doctor = await storage.getUser(appointment.doctorId);\n          \n          console.log('🔥 RESCHEDULE DEBUG - Patient email:', patient?.email);\n          console.log('🔥 RESCHEDULE DEBUG - Doctor details:', doctor ? `${doctor.firstName} ${doctor.lastName}` : 'Not found');\n          \n          if (patient && doctor && patient.email) {\n            console.log('🔥 RESCHEDULE NOTIFICATION - Sending email to:', patient.email);\n            \n            const originalDate = new Date(originalAppointment.appointmentDate);\n            const newDate = new Date(appointment.appointmentDate);\n            \n            await emailService.sendAppointmentRescheduled(patient.email, {\n              doctorName: `Dr. ${doctor.firstName} ${doctor.lastName}`,\n              originalDate: originalDate.toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' }),\n              originalTime: originalDate.toLocaleTimeString('en-IN', { \n                hour: 'numeric', \n                minute: '2-digit', \n                hour12: true, \n                timeZone: 'Asia/Kolkata' \n              }),\n              newDate: newDate.toLocaleDateString('en-IN', { timeZone: 'Asia/Kolkata' }),\n              newTime: newDate.toLocaleTimeString('en-IN', { \n                hour: 'numeric', \n                minute: '2-digit', \n                hour12: true, \n                timeZone: 'Asia/Kolkata' \n              }),\n              clinic: 'SmartClinic'\n            });\n            \n            console.log('🔥 RESCHEDULE NOTIFICATION - Email sent successfully');\n          } else {\n            console.log('🔥 RESCHEDULE DEBUG - Email not sent. Patient:', !!patient, 'Doctor:', !!doctor, 'Patient email:', patient?.email);\n          }\n        } catch (emailError) {\n          console.error('🔥 RESCHEDULE EMAIL ERROR:', emailError);\n          // Don't fail the request if email fails\n        }\n      } else {\n        console.log('🔥 RESCHEDULE DEBUG - No email sent because appointment was not rescheduled');\n      }\n\n      res.json(appointment);\n    } catch (error: any) {\n      console.error('🔥 RESCHEDULE ROUTE ERROR:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Medicine/Inventory Management Routes (Duplicate removed - using the one at line 2733)\n\n  app.put(\"/api/medicines/:medicineId\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.role !== 'admin' && req.user!.role !== 'staff') {\n        return res.status(403).json({ message: \"Admin or staff access required\" });\n      }\n\n      const { medicineId } = req.params;\n      const medicine = await storage.updateMedicine(medicineId, req.body);\n      res.json(medicine);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Patient Records Management\n  app.put(\"/api/patients/:patientId\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.role !== 'admin' && req.user!.role !== 'doctor') {\n        return res.status(403).json({ message: \"Admin or doctor access required\" });\n      }\n\n      const { patientId } = req.params;\n      const patient = await storage.updateUser(patientId, req.body);\n      \n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n\n      res.json({ message: \"Patient updated successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Reports Generation\n  app.get(\"/api/reports/daily\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      // Get admin's clinic ID\n      const adminClinicId = req.user!.clinicId;\n      console.log('🔥 DAILY REPORTS - Admin clinic ID:', adminClinicId);\n      \n      if (!adminClinicId) {\n        return res.status(400).json({ message: \"Admin user has no associated clinic\" });\n      }\n\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n\n      const appointments = await storage.getAppointmentsByDateRange(today, tomorrow, adminClinicId);\n      console.log('🔥 DAILY REPORTS - Found appointments for clinic:', appointments.length);\n      const completedAppointments = appointments.filter(apt => apt.status === 'completed');\n      const cancelledAppointments = appointments.filter(apt => apt.status === 'cancelled');\n      \n      const report = {\n        date: today.toISOString().split('T')[0],\n        totalAppointments: appointments.length,\n        completedAppointments: completedAppointments.length,\n        cancelledAppointments: cancelledAppointments.length,\n        revenue: completedAppointments.length * 150,\n        appointments: appointments\n      };\n\n      res.json(report);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/queue/admin\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.role !== 'admin' && req.user!.role !== 'staff') {\n        return res.status(403).json({ message: \"Admin or staff access required\" });\n      }\n\n      const queueTokens = await storage.getAllQueueTokens();\n      res.json(queueTokens);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n\n\n  app.get(\"/api/patients\", authMiddleware, async (req, res) => {\n    try {\n      console.log('🔥 PATIENTS ENDPOINT - User:', req.user);\n      if (req.user!.role !== 'admin' && req.user!.role !== 'staff') {\n        return res.status(403).json({ message: \"Admin or staff access required\" });\n      }\n\n      // For admin users, filter by clinic ID\n      if (req.user!.role === 'admin' && req.user!.clinicId) {\n        const patients = await storage.getPatientsByClinic(req.user!.clinicId);\n        console.log('🔥 PATIENTS ENDPOINT - Admin found patients for clinic:', patients.length);\n        res.json(patients);\n      } else {\n        const patients = await storage.getAllPatients();\n        console.log('🔥 PATIENTS ENDPOINT - Found patients:', patients.length);\n        res.json(patients);\n      }\n    } catch (error: any) {\n      console.error('🔥 PATIENTS ENDPOINT - Error:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/queue/:tokenId/status\", authMiddleware, async (req, res) => {\n    try {\n      console.log('🔥 QUEUE STATUS UPDATE - User role:', req.user?.role, 'User ID:', req.user?.id)\n      \n      if (req.user!.role !== 'admin' && req.user!.role !== 'staff' && req.user!.role !== 'doctor') {\n        console.log('🔥 Permission denied - Required: admin/staff/doctor, Got:', req.user!.role)\n        return res.status(403).json({ message: \"Admin, staff, or doctor access required\" });\n      }\n\n      const { tokenId } = req.params;\n      const { status } = z.object({ status: z.string() }).parse(req.body);\n      \n      console.log('🔥 Updating token:', tokenId, 'to status:', status)\n      const result = await storage.updateQueueTokenStatus(tokenId, status);\n      console.log('🔥 Update result:', result)\n      res.json(result);\n    } catch (error: any) {\n      console.log('🔥 Queue update error:', error.message)\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n\n\n  app.put(\"/api/users/:userId/approve\", authMiddleware, async (req, res) => {\n    try {\n      if (req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { userId } = req.params;\n      const { isApproved } = z.object({ isApproved: z.boolean() }).parse(req.body);\n      \n      const result = await storage.updateUserApproval(userId, isApproved);\n      res.json(result);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Staff presence routes\n  app.post(\"/api/staff-presence/checkin\", authMiddleware, requireRole(['staff', 'doctor', 'admin']), async (req, res) => {\n    try {\n      const staffId = req.user!.id;\n      const today = new Date();\n      \n      const presence = await storage.createOrUpdateStaffPresence(staffId, today);\n      res.json(presence);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/staff-presence/today\", authMiddleware, requireRole(['admin', 'staff']), async (req, res) => {\n    try {\n      const staffPresence = await storage.getTodayStaffPresence();\n      res.json(staffPresence);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/staff-presence/:id\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { isPresent, markedByAdmin } = req.body;\n      \n      const presence = await storage.updateStaffPresence(id, {\n        isPresent,\n        markedByAdmin: markedByAdmin !== undefined ? markedByAdmin : true,\n        updatedAt: new Date()\n      });\n      \n      if (!presence) {\n        return res.status(404).json({ message: \"Staff presence record not found\" });\n      }\n      \n      res.json(presence);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Update staff presence by userId - creates record if it doesn't exist\n  app.put(\"/api/staff-presence/update/:userId\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const { isPresent, markedByAdmin } = req.body;\n      const user = req.user as any;\n      \n      console.log('🔥 STAFF PRESENCE UPDATE - UserId:', userId, 'IsPresent:', isPresent);\n      \n      // Try to get existing presence record for today\n      const existingPresence = await storage.getTodayStaffPresence();\n      const userPresence = existingPresence.find(p => p.staffId === userId);\n      \n      let presence;\n      if (userPresence) {\n        // Update existing record\n        console.log('🔥 STAFF PRESENCE UPDATE - Updating existing record:', userPresence.id);\n        presence = await storage.updateStaffPresence(userPresence.id, {\n          isPresent,\n          markedByAdmin: markedByAdmin !== undefined ? markedByAdmin : true\n        });\n      } else {\n        // Create new record using createOrUpdateStaffPresence\n        console.log('🔥 STAFF PRESENCE UPDATE - Creating new record for userId:', userId);\n        if (isPresent) {\n          presence = await storage.createOrUpdateStaffPresence(userId, new Date(), user.clinicId);\n          // Update the markedByAdmin flag if needed\n          if (markedByAdmin !== undefined) {\n            presence = await storage.updateStaffPresence(presence.id, { markedByAdmin });\n          }\n        } else {\n          // Create absent record manually\n          presence = await storage.createStaffPresence({\n            staffId: userId,\n            clinicId: user.clinicId,\n            date: new Date(),\n            isPresent: false,\n            markedByAdmin: markedByAdmin !== undefined ? markedByAdmin : true\n          });\n        }\n      }\n      \n      console.log('🔥 STAFF PRESENCE UPDATE - Result:', presence);\n      res.json(presence);\n    } catch (error: any) {\n      console.error('🔥 STAFF PRESENCE UPDATE - Error:', error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/staff-presence/:date\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const { date } = req.params;\n      const targetDate = new Date(date);\n      \n      if (isNaN(targetDate.getTime())) {\n        return res.status(400).json({ message: \"Invalid date format\" });\n      }\n      \n      const staffPresence = await storage.getStaffPresenceForDate(targetDate);\n      res.json(staffPresence);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Clinic management routes\n  app.post(\"/api/clinics\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const clinicData = insertClinicSchema.parse(req.body);\n      const clinic = await storage.createClinic(clinicData);\n      res.json(clinic);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Public clinic registration endpoint for homepage\n  app.post(\"/api/clinics/register\", async (req, res) => {\n    try {\n      const { clinicData, adminData } = req.body;\n      \n      // Validate clinic data\n      const validatedClinicData = insertClinicSchema.parse(clinicData);\n      \n      // Validate admin data\n      const validatedAdminData = insertUserSchema.parse({\n        ...adminData,\n        role: 'admin',\n        isActive: true,\n        isApproved: true\n      });\n      \n      // Create clinic first\n      const clinic = await storage.createClinic(validatedClinicData);\n      \n      // Create admin user for the clinic\n      const adminUser = await storage.createUser({\n        ...validatedAdminData,\n        clinicId: clinic.id\n      });\n      \n      // Send email notification to soham.banerjee@iiitb.ac.in\n      try {\n        console.log('🔥 CLINIC REGISTRATION - Sending email notification...');\n        const emailResult = await emailService.sendClinicRegistrationNotification(\n          validatedClinicData,\n          validatedAdminData\n        );\n        \n        if (emailResult.success) {\n          console.log('🔥 CLINIC REGISTRATION - Email notification sent successfully');\n        } else {\n          console.error('🔥 CLINIC REGISTRATION - Email notification failed:', emailResult.error);\n        }\n      } catch (emailError) {\n        console.error('🔥 CLINIC REGISTRATION - Email notification error:', emailError);\n        // Don't fail the registration if email fails\n      }\n      \n      res.json({ \n        clinic, \n        message: 'Clinic registration submitted successfully! We will review your application and notify you within 48 hours.',\n        isNewClinic: true\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/clinics\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const clinics = await storage.getAllClinics();\n      res.json(clinics);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/clinics/:id\", authMiddleware, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const clinic = await storage.getClinicById(id);\n      \n      if (!clinic) {\n        return res.status(404).json({ message: \"Clinic not found\" });\n      }\n\n      res.json(clinic);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/clinics/:id\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const clinicData = insertClinicSchema.partial().parse(req.body);\n      \n      const updatedClinic = await storage.updateClinic(id, clinicData);\n      if (!updatedClinic) {\n        return res.status(404).json({ message: \"Clinic not found\" });\n      }\n\n      res.json(updatedClinic);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete(\"/api/clinics/:id\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Check if clinic has any associated data\n      const hasUsers = await storage.getClinicUserCount(id);\n      if (hasUsers > 0) {\n        return res.status(400).json({ \n          message: \"Cannot delete clinic with associated users. Please transfer or remove users first.\" \n        });\n      }\n\n      const deleted = await storage.deleteClinic(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Clinic not found\" });\n      }\n\n      res.json({ message: \"Clinic deleted successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Clinic-specific endpoints for individual clinic admin dashboards\n\n  // Get clinic-specific appointments\n  app.get(\"/api/appointments/clinic/:clinicId\", authMiddleware, async (req, res) => {\n    try {\n      const { clinicId } = req.params;\n      const appointments = await storage.getAppointmentsByClinic(clinicId);\n      res.json(appointments);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/users/clinic/:clinicId', authMiddleware, async (req, res) => {\n    try {\n      const { clinicId } = req.params;\n      const users = await storage.getUsersByClinic(clinicId);\n      res.json(users);\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to fetch clinic users' });\n    }\n  });\n\n  app.get('/api/patients/clinic/:clinicId', authMiddleware, async (req, res) => {\n    try {\n      const { clinicId } = req.params;\n      const patients = await storage.getPatientsByClinic(clinicId);\n      res.json(patients);\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to fetch clinic patients' });\n    }\n  });\n\n  app.get('/api/queue/clinic/:clinicId', authMiddleware, async (req, res) => {\n    try {\n      const { clinicId } = req.params;\n      const queue = await storage.getQueueTokensByClinic(clinicId);\n      res.json(queue);\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to fetch clinic queue' });\n    }\n  });\n\n  app.get('/api/clinic/dashboard-stats/:clinicId', authMiddleware, async (req, res) => {\n    try {\n      const { clinicId } = req.params;\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n\n      // Get today's appointments for this clinic\n      const todayAppointments = await storage.getAppointmentsByDateRange(today, tomorrow, clinicId);\n      const completedAppointments = todayAppointments.filter(apt => apt.status === 'completed');\n      const activeStaff = await storage.getActiveStaffCountByClinic(clinicId);\n\n      const stats = {\n        patientsToday: todayAppointments.length,\n        completedAppointments: completedAppointments.length,\n        revenue: completedAppointments.length * 150, // Assume $150 per appointment\n        activeStaff: activeStaff\n      };\n\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to fetch clinic dashboard stats' });\n    }\n  });\n\n  // Get clinic-specific staff/users\n  app.get(\"/api/users/clinic/:clinicId\", authMiddleware, async (req, res) => {\n    try {\n      const { clinicId } = req.params;\n      const users = await storage.getUsersByClinic(clinicId);\n      res.json(users);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Get clinic-specific patients\n  app.get(\"/api/patients/clinic/:clinicId\", authMiddleware, async (req, res) => {\n    try {\n      const { clinicId } = req.params;\n      const patients = await storage.getPatientsByClinic(clinicId);\n      res.json(patients);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Get clinic-specific queue\n  app.get(\"/api/queue/clinic/:clinicId\", authMiddleware, async (req, res) => {\n    try {\n      const { clinicId } = req.params;\n      const queue = await storage.getQueueTokensByClinic(clinicId);\n      res.json(queue);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Get clinic-specific dashboard stats\n  app.get(\"/api/clinic/dashboard-stats/:clinicId\", authMiddleware, async (req, res) => {\n    try {\n      const { clinicId } = req.params;\n      \n      // Calculate today's date range\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n\n      console.log(`🔥 CLINIC DASHBOARD STATS - Date range for ${clinicId}:`, {\n        today: today.toISOString(),\n        tomorrow: tomorrow.toISOString(),\n        todayLocal: today.toLocaleDateString(),\n        tomorrowLocal: tomorrow.toLocaleDateString()\n      });\n\n      // Get appointments for today at this clinic\n      const todayAppointments = await storage.getAppointmentsByDateRange(today, tomorrow, clinicId);\n      console.log(`🔥 CLINIC DASHBOARD STATS - Found appointments for clinic ${clinicId}:`, todayAppointments.length);\n\n      const completedAppointments = todayAppointments.filter(apt => apt.status === 'completed');\n      console.log(`🔥 CLINIC DASHBOARD STATS - Completed appointments for clinic ${clinicId}:`, completedAppointments.length);\n\n      // Calculate revenue (assuming $150 per completed appointment)\n      const revenue = completedAppointments.length * 150;\n\n      // Get active staff count for this clinic\n      const activeStaff = await storage.getActiveStaffCountByClinic(clinicId);\n\n      const stats = {\n        patientsToday: todayAppointments.length,\n        completedAppointments: completedAppointments.length,\n        revenue,\n        activeStaff: activeStaff.toString()\n      };\n\n      console.log(`🔥 CLINIC DASHBOARD STATS - Final stats for clinic ${clinicId}:`, stats);\n      res.json(stats);\n    } catch (error: any) {\n      console.error(`🔥 CLINIC DASHBOARD STATS - Error for clinic ${req.params.clinicId}:`, error);\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Get clinic statistics\n  app.get(\"/api/clinics/:id/stats\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const stats = await storage.getClinicStats(id);\n      res.json(stats);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Medicine stock alert route\n  app.get('/api/medicines/low-stock', authMiddleware, requireRole(['admin', 'doctor', 'staff']), async (req, res) => {\n    try {\n      const user = (req as any).user;\n      const medicines = await storage.getMedicinesByClinic(user.clinicId);\n      \n      // Filter medicines with low stock (less than 10 units or custom threshold)\n      const threshold = parseInt(req.query.threshold as string) || 10;\n      const lowStockMedicines = medicines.filter(medicine => \n        medicine.stock !== undefined && \n        medicine.stock !== null && \n        medicine.stock < threshold\n      );\n      \n      res.json(lowStockMedicines);\n    } catch (error: any) {\n      console.error('❌ Error checking medicine stock:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Start background services\n  schedulerService.start();\n\n  // Emergency request routes\n  app.post('/api/emergency', authMiddleware, async (req, res) => {\n    try {\n      const user = (req as any).user;\n      const requestData = insertEmergencyRequestSchema.parse(req.body);\n      \n      // Ensure patient can only create requests for themselves\n      if (user.role === 'patient' && requestData.patientId !== user.id) {\n        return res.status(403).json({ error: 'Patients can only create emergency requests for themselves' });\n      }\n      \n      // For non-patients, get patient's clinic\n      if (user.role !== 'patient') {\n        const patient = await storage.getUser(requestData.patientId);\n        if (!patient) {\n          return res.status(404).json({ error: 'Patient not found' });\n        }\n        requestData.clinicId = patient.clinicId || 'default-clinic-id';\n      } else {\n        requestData.clinicId = user.clinicId || 'default-clinic-id';\n      }\n      \n      const emergencyRequest = await storage.createEmergencyRequest(requestData);\n      \n      // Broadcast emergency alert to admin/staff via WebSocket\n      const alertData = {\n        type: 'emergency_alert',\n        data: {\n          ...emergencyRequest,\n          patient: await storage.getUser(emergencyRequest.patientId)\n        }\n      };\n      \n      // Send to all WebSocket clients (admins/staff)\n      wss.clients.forEach((client) => {\n        if (client.readyState === WebSocket.OPEN) {\n          client.send(JSON.stringify(alertData));\n        }\n      });\n      \n      res.json(emergencyRequest);\n    } catch (error: any) {\n      console.error('❌ Error creating emergency request:', error);\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get('/api/emergency', authMiddleware, async (req, res) => {\n    try {\n      const user = (req as any).user;\n      let requests;\n      \n      if (user.role === 'patient') {\n        requests = await storage.getEmergencyRequestsForPatient(user.id);\n      } else {\n        // Admin/staff can see all requests for their clinic\n        requests = await storage.getEmergencyRequestsForClinic(user.clinicId);\n      }\n      \n      res.json(requests);\n    } catch (error: any) {\n      console.error('❌ Error fetching emergency requests:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.patch('/api/emergency/:id', authMiddleware, requireRole(['admin', 'doctor', 'staff']), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      const user = (req as any).user;\n      \n      const updatedRequest = await storage.updateEmergencyRequestStatus(id, status, user.id);\n      \n      if (!updatedRequest) {\n        return res.status(404).json({ error: 'Emergency request not found' });\n      }\n      \n      res.json(updatedRequest);\n    } catch (error: any) {\n      console.error('❌ Error updating emergency request:', error);\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":141391},"server/storage.ts":{"content":"import { \n  users, otpSessions, emailOtpSessions, authSessions, staffVerifications, staffPresence, appointments, \n  queueTokens, medicines, prescriptions, medicineReminders, delayNotifications,\n  homeVisits, medicalHistory, patientFeedback, clinics, emergencyRequests,\n  type User, type InsertUser, type OtpSession, type InsertOtpSession,\n  type EmailOtpSession, type InsertEmailOtpSession,\n  type AuthSession, type InsertAuthSession, type StaffVerification, type InsertStaffVerification,\n  type StaffPresence, type InsertStaffPresence,\n  type Appointment, type InsertAppointment, type QueueToken, type InsertQueueToken,\n  type Medicine, type InsertMedicine, type Prescription, type InsertPrescription,\n  type MedicineReminder, type InsertMedicineReminder, type DelayNotification, type InsertDelayNotification,\n  type HomeVisit, type InsertHomeVisit, type MedicalHistory, type InsertMedicalHistory,\n  type PatientFeedback, type InsertPatientFeedback, type Clinic, type InsertClinic,\n  type EmergencyRequest, type InsertEmergencyRequest\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, gte, lte, desc, asc, sql, not } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByPhone(phoneNumber: string): Promise<User | null>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n  approveUser(id: string): Promise<User | undefined>;\n  deactivateUser(id: string): Promise<User | undefined>;\n  getUsersByRole(role: string): Promise<User[]>;\n  getUsersByClinic(clinicId: string): Promise<User[]>;\n  getUsersByRoleAndClinic(role: string, clinicId: string): Promise<User[]>;\n  getAllUsers(): Promise<User[]>;\n  getPatients(): Promise<User[]>;\n  getActiveStaffCount(): Promise<number>;\n  updateUserApproval(id: string, isApproved: boolean): Promise<User | undefined>;\n  \n  // OTP Sessions\n  createOtpSession(session: InsertOtpSession): Promise<OtpSession>;\n  getOtpSession(phoneNumber: string): Promise<OtpSession | undefined>;\n  invalidateOtpSession(phoneNumber: string): Promise<void>;\n  incrementOtpAttempts(phoneNumber: string): Promise<void>;\n  \n  // Email OTP Sessions\n  createEmailOtpSession(session: InsertEmailOtpSession): Promise<EmailOtpSession>;\n  getEmailOtpSession(email: string): Promise<EmailOtpSession | undefined>;\n  invalidateEmailOtpSession(email: string): Promise<void>;\n  incrementEmailOtpAttempts(email: string): Promise<void>;\n\n  // Temporary Signup Data\n  storeTempSignupData(email: string, data: any): Promise<void>;\n  getTempSignupData(email: string): Promise<any>;\n  deleteTempSignupData(email: string): Promise<void>;\n  \n  // Auth Sessions\n  createAuthSession(session: InsertAuthSession): Promise<AuthSession>;\n  getAuthSession(token: string): Promise<AuthSession | undefined>;\n  getAuthSessionWithUser(token: string): Promise<(AuthSession & { user: User }) | undefined>;\n  updateLastActivity(token: string): Promise<void>;\n  invalidateAuthSession(token: string): Promise<void>;\n  invalidateUserSessions(userId: string): Promise<void>;\n  \n  // Staff Verifications\n  createStaffVerification(verification: InsertStaffVerification): Promise<StaffVerification>;\n  getActiveStaffVerification(staffId: string): Promise<StaffVerification | undefined>;\n  checkOutStaff(staffId: string): Promise<void>;\n  getStaffVerifications(staffId: string, date?: Date): Promise<StaffVerification[]>;\n  \n  // Staff Presence\n  createOrUpdateStaffPresence(staffId: string, date: Date, clinicId?: string): Promise<StaffPresence>;\n  createStaffPresence(data: InsertStaffPresence): Promise<StaffPresence>;\n  getStaffPresence(staffId: string, date: Date): Promise<StaffPresence | undefined>;\n  getStaffPresenceForDate(date: Date): Promise<(StaffPresence & { staff: User })[]>;\n  updateStaffPresence(id: string, updates: Partial<InsertStaffPresence>): Promise<StaffPresence | undefined>;\n  getTodayStaffPresence(): Promise<(StaffPresence & { staff: User })[]>;\n  markStaffPresent(staffId: string, clinicId: string): Promise<StaffPresence>;\n  updateStaffCheckout(staffId: string): Promise<StaffPresence | undefined>;\n  \n  // Appointments\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  getAppointment(id: string): Promise<Appointment | undefined>;\n  getAppointmentWithDetails(id: string): Promise<(Appointment & { patient: User; doctor: User }) | undefined>;\n  getUserAppointments(userId: string, role: string): Promise<(Appointment & { patient: User; doctor: User })[]>;\n  getAppointmentsByDate(date: Date, doctorId?: string): Promise<(Appointment & { patient: User; doctor: User })[]>;\n  updateAppointment(id: string, appointment: Partial<InsertAppointment>): Promise<Appointment | undefined>;\n  cancelAppointment(id: string): Promise<Appointment | undefined>;\n  getAppointments(userId?: string): Promise<(Appointment & { patient: User; doctor: User })[]>;\n  getAppointmentsByDateRange(startDate: Date, endDate: Date, clinicId?: string): Promise<(Appointment & { patient: User; doctor: User })[]>;\n  getAppointmentById(id: string): Promise<Appointment | null>;\n  getPendingAppointments(): Promise<(Appointment & { patient: User; doctor: User })[]>;\n  updateUserStatus(userId: string, status: { isApproved: boolean }): Promise<void>;\n  getUserByPhone(phoneNumber: string): Promise<User | null>;\n  \n  // Queue Management\n  createQueueToken(token: InsertQueueToken): Promise<QueueToken>;\n  getQueueToken(id: string): Promise<QueueToken | undefined>;\n  getQueueTokenWithDetails(id: string): Promise<(QueueToken & { patient: User; doctor: User }) | undefined>;\n  getDoctorQueue(doctorId: string): Promise<(QueueToken & { patient: User })[]>;\n  getCurrentServingToken(doctorId: string): Promise<(QueueToken & { patient: User }) | undefined>;\n  getNextTokenNumber(doctorId: string): Promise<number>;\n  updateQueueTokenStatus(id: string, status: string, timestamp?: Date): Promise<QueueToken | undefined>;\n  getPatientQueuePosition(patientId: string, doctorId: string): Promise<QueueToken | undefined>;\n  getQueueTokens(): Promise<(QueueToken & { patient: User; doctor: User })[]>;\n  \n  // Medicines\n  createMedicine(medicine: InsertMedicine): Promise<Medicine>;\n  getMedicine(id: string): Promise<Medicine | undefined>;\n  getMedicineByName(name: string): Promise<Medicine | undefined>;\n  getAllMedicines(): Promise<Medicine[]>;\n  getMedicinesByClinic(clinicId: string): Promise<Medicine[]>;\n  getClinicMedicines(clinicId: string): Promise<Medicine[]>;\n  searchMedicines(query: string): Promise<Medicine[]>;\n  searchClinicMedicines(query: string, clinicId: string): Promise<Medicine[]>;\n  addMedicine(medicine: Omit<Medicine, 'id' | 'createdAt' | 'updatedAt'>): Promise<Medicine>;\n  getMedicineById(medicineId: string): Promise<Medicine | null>;\n  updateMedicine(medicineId: string, updates: Partial<Medicine>): Promise<Medicine | null>;\n  deleteMedicine(medicineId: string): Promise<boolean>;\n  \n  // Prescriptions\n  createPrescription(prescription: InsertPrescription): Promise<Prescription>;\n  getPrescription(id: string): Promise<Prescription | undefined>;\n  getPrescriptionWithDetails(id: string): Promise<(Prescription & { medicine: Medicine; patient: User; doctor: User }) | undefined>;\n  getPatientPrescriptions(patientId: string): Promise<(Prescription & { medicine: Medicine; doctor: User })[]>;\n  deletePrescription(prescriptionId: string): Promise<boolean>;\n  deleteFutureReminders(prescriptionId: string): Promise<boolean>;\n  \n  // Admin-specific methods\n  getAllQueueTokens(): Promise<(QueueToken & { patient: User; doctor: User })[]>;\n  getAllAppointments(): Promise<(Appointment & { patient: User; doctor: User })[]>;\n  getAllPatients(): Promise<User[]>;\n  getActiveStaffCount(): Promise<number>;\n  updateAppointmentStatus(id: string, status: string): Promise<Appointment | undefined>;\n  updateUserApproval(id: string, isApproved: boolean): Promise<User | undefined>;\n  getActivePrescriptions(patientId: string): Promise<(Prescription & { medicine: Medicine })[]>;\n  updatePrescription(id: string, prescription: Partial<InsertPrescription>): Promise<Prescription | undefined>;\n  \n  // Medicine Reminders\n  createMedicineReminder(reminder: InsertMedicineReminder): Promise<MedicineReminder>;\n  getMedicineReminder(id: string): Promise<MedicineReminder | undefined>;\n  getPatientReminders(patientId: string, date?: Date): Promise<(MedicineReminder & { prescription: Prescription & { medicine: Medicine } })[]>;\n  getDueReminders(): Promise<(MedicineReminder & { prescription: Prescription & { medicine: Medicine; patient: User } })[]>;\n  markReminderTaken(id: string): Promise<MedicineReminder | undefined>;\n  markReminderSkipped(id: string): Promise<MedicineReminder | undefined>;\n  updateReminderStatus(id: string, status: 'taken' | 'skipped'): Promise<MedicineReminder | undefined>;\n  resetReminderStatus(id: string): Promise<MedicineReminder | undefined>;\n  \n  // Delay Notifications\n  createDelayNotification(notification: InsertDelayNotification): Promise<DelayNotification>;\n  getActiveDelayNotifications(doctorId: string): Promise<DelayNotification[]>;\n  resolveDelayNotification(id: string): Promise<DelayNotification | undefined>;\n  \n  // Home Visits\n  createHomeVisit(visit: InsertHomeVisit): Promise<HomeVisit>;\n  getHomeVisit(id: string): Promise<HomeVisit | undefined>;\n  getHomeVisitWithDetails(id: string): Promise<(HomeVisit & { appointment: Appointment; patient: User; doctor: User }) | undefined>;\n  getDoctorHomeVisits(doctorId: string, date?: Date): Promise<(HomeVisit & { appointment: Appointment; patient: User })[]>;\n  updateHomeVisit(id: string, visit: Partial<InsertHomeVisit>): Promise<HomeVisit | undefined>;\n  \n  // Medical History\n  createMedicalHistory(history: InsertMedicalHistory): Promise<MedicalHistory>;\n  getPatientMedicalHistory(patientId: string): Promise<(MedicalHistory & { doctor: User })[]>;\n  getMedicalHistoryByAppointment(appointmentId: string): Promise<MedicalHistory | undefined>;\n\n  // Patient Feedback\n  createPatientFeedback(feedback: InsertPatientFeedback): Promise<PatientFeedback>;\n  getAllPatientFeedback(): Promise<(PatientFeedback & { patient?: User; appointment?: Appointment })[]>;\n  getPatientFeedbackById(id: string): Promise<PatientFeedback | null>;\n  getPatientFeedbackByPatientId(patientId: string): Promise<PatientFeedback[]>;\n  markFeedbackAsRead(id: string): Promise<PatientFeedback | null>;\n\n  // Clinic Management\n  createClinic(clinic: InsertClinic): Promise<Clinic>;\n  getAllClinics(): Promise<Clinic[]>;\n  getClinicById(id: string): Promise<Clinic | null>;\n  updateClinic(id: string, clinic: Partial<InsertClinic>): Promise<Clinic | null>;\n  deleteClinic(id: string): Promise<boolean>;\n  getClinicUserCount(clinicId: string): Promise<number>;\n  getClinicStats(clinicId: string): Promise<{\n    totalUsers: number;\n    totalAppointments: number;\n    totalMedicines: number;\n    activeStaff: number;\n  }>;\n\n  // Clinic-specific data methods\n  getAppointmentsByClinic(clinicId: string): Promise<(Appointment & { patient: User; doctor: User })[]>;\n  getUsersByClinic(clinicId: string): Promise<User[]>;\n  getPatientsByClinic(clinicId: string): Promise<User[]>;\n  getQueueTokensByClinic(clinicId: string): Promise<(QueueToken & { patient: User; doctor: User })[]>;\n  getAppointmentsByDateRange(startDate: Date, endDate: Date, clinicId?: string): Promise<(Appointment & { patient: User; doctor: User })[]>;\n  getActiveStaffCountByClinic(clinicId: string): Promise<number>;\n\n  // Emergency Requests\n  createEmergencyRequest(request: InsertEmergencyRequest): Promise<EmergencyRequest>;\n  getEmergencyRequest(id: string): Promise<EmergencyRequest | undefined>;\n  getEmergencyRequestsForClinic(clinicId: string): Promise<(EmergencyRequest & { patient: User })[]>;\n  getEmergencyRequestsForPatient(patientId: string): Promise<(EmergencyRequest & { doctor?: User })[]>;\n  updateEmergencyRequestStatus(id: string, status: string, doctorId?: string): Promise<EmergencyRequest | undefined>;\n  getActiveEmergencyRequests(): Promise<(EmergencyRequest & { patient: User; doctor?: User })[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByPhone(phoneNumber: string): Promise<User | null> {\n    const [user] = await db.select().from(users).where(eq(users.phoneNumber, phoneNumber));\n    return user || null;\n  }\n\n  async updateUserApproval(id: string, isApproved: boolean): Promise<User | undefined> {\n    const [updatedUser] = await db.update(users)\n      .set({ isApproved, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.firebaseUid, firebaseUid));\n    return user || undefined;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [newUser] = await db.insert(users).values(user).returning();\n    return newUser;\n  }\n\n  async updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined> {\n    const [updatedUser] = await db.update(users)\n      .set({ ...user, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser || undefined;\n  }\n\n  async approveUser(id: string): Promise<User | undefined> {\n    const [approvedUser] = await db.update(users)\n      .set({ isApproved: true, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return approvedUser || undefined;\n  }\n\n  async deactivateUser(id: string): Promise<User | undefined> {\n    const [deactivatedUser] = await db.update(users)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return deactivatedUser || undefined;\n  }\n\n  async getUsersByRole(role: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, role as any));\n  }\n\n  async getUsersByRoleAndClinic(role: string, clinicId: string): Promise<User[]> {\n    return await db.select().from(users).where(\n      and(\n        eq(users.role, role as any),\n        eq(users.clinicId, clinicId)\n      )\n    );\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async getPatients(): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, 'patient'));\n  }\n\n\n\n  // OTP Sessions\n  async createOtpSession(session: InsertOtpSession): Promise<OtpSession> {\n    const [newSession] = await db.insert(otpSessions).values(session).returning();\n    return newSession;\n  }\n\n  async getOtpSession(phoneNumber: string): Promise<OtpSession | undefined> {\n    const [session] = await db.select().from(otpSessions)\n      .where(and(\n        eq(otpSessions.phoneNumber, phoneNumber),\n        eq(otpSessions.isUsed, false),\n        gte(otpSessions.expiresAt, new Date())\n      ))\n      .orderBy(desc(otpSessions.createdAt));\n    return session || undefined;\n  }\n\n  async invalidateOtpSession(phoneNumber: string): Promise<void> {\n    await db.update(otpSessions)\n      .set({ isUsed: true })\n      .where(eq(otpSessions.phoneNumber, phoneNumber));\n  }\n\n  async incrementOtpAttempts(phoneNumber: string): Promise<void> {\n    await db.update(otpSessions)\n      .set({ attempts: sql`${otpSessions.attempts} + 1` })\n      .where(eq(otpSessions.phoneNumber, phoneNumber));\n  }\n\n  // Email OTP Sessions\n  async createEmailOtpSession(session: InsertEmailOtpSession): Promise<EmailOtpSession> {\n    const [newSession] = await db.insert(emailOtpSessions).values(session).returning();\n    return newSession;\n  }\n\n  async getEmailOtpSession(email: string): Promise<EmailOtpSession | undefined> {\n    const [session] = await db.select().from(emailOtpSessions)\n      .where(and(\n        eq(emailOtpSessions.email, email),\n        eq(emailOtpSessions.isUsed, false),\n        gte(emailOtpSessions.expiresAt, new Date())\n      ))\n      .orderBy(desc(emailOtpSessions.createdAt));\n    return session || undefined;\n  }\n\n  async invalidateEmailOtpSession(email: string): Promise<void> {\n    await db.update(emailOtpSessions)\n      .set({ isUsed: true })\n      .where(eq(emailOtpSessions.email, email));\n  }\n\n  async incrementEmailOtpAttempts(email: string): Promise<void> {\n    await db.update(emailOtpSessions)\n      .set({ attempts: sql`${emailOtpSessions.attempts} + 1` })\n      .where(eq(emailOtpSessions.email, email));\n  }\n\n  // Auth Sessions\n  async createAuthSession(session: InsertAuthSession): Promise<AuthSession> {\n    const [newSession] = await db.insert(authSessions).values(session).returning();\n    return newSession;\n  }\n\n  async getAuthSession(token: string): Promise<AuthSession | undefined> {\n    const [session] = await db.select().from(authSessions)\n      .where(and(\n        eq(authSessions.token, token),\n        gte(authSessions.expiresAt, new Date())\n      ));\n    return session || undefined;\n  }\n\n  async getAuthSessionWithUser(token: string): Promise<(AuthSession & { user: User }) | undefined> {\n    const [result] = await db.select({\n      id: authSessions.id,\n      userId: authSessions.userId,\n      token: authSessions.token,\n      expiresAt: authSessions.expiresAt,\n      lastActivity: authSessions.lastActivity,\n      ipAddress: authSessions.ipAddress,\n      userAgent: authSessions.userAgent,\n      createdAt: authSessions.createdAt,\n      user: users\n    })\n    .from(authSessions)\n    .innerJoin(users, eq(authSessions.userId, users.id))\n    .where(and(\n      eq(authSessions.token, token),\n      gte(authSessions.expiresAt, new Date())\n    ));\n    return result || undefined;\n  }\n\n  async updateLastActivity(token: string): Promise<void> {\n    await db.update(authSessions)\n      .set({ lastActivity: new Date() })\n      .where(eq(authSessions.token, token));\n  }\n\n  async invalidateAuthSession(token: string): Promise<void> {\n    await db.delete(authSessions).where(eq(authSessions.token, token));\n  }\n\n  async invalidateUserSessions(userId: string): Promise<void> {\n    await db.delete(authSessions).where(eq(authSessions.userId, userId));\n  }\n\n  // Staff Verifications\n  async createStaffVerification(verification: InsertStaffVerification): Promise<StaffVerification> {\n    const [newVerification] = await db.insert(staffVerifications).values(verification).returning();\n    return newVerification;\n  }\n\n  async getActiveStaffVerification(staffId: string): Promise<StaffVerification | undefined> {\n    const [verification] = await db.select().from(staffVerifications)\n      .where(and(\n        eq(staffVerifications.staffId, staffId),\n        sql`${staffVerifications.checkedOutAt} IS NULL`\n      ))\n      .orderBy(desc(staffVerifications.checkedInAt));\n    return verification || undefined;\n  }\n\n  async checkOutStaff(staffId: string): Promise<void> {\n    await db.update(staffVerifications)\n      .set({ checkedOutAt: new Date() })\n      .where(and(\n        eq(staffVerifications.staffId, staffId),\n        sql`${staffVerifications.checkedOutAt} IS NULL`\n      ));\n  }\n\n  async getStaffVerifications(staffId: string, date?: Date): Promise<StaffVerification[]> {\n    let whereConditions = [eq(staffVerifications.staffId, staffId)];\n    \n    if (date) {\n      const startOfDay = new Date(date);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(date);\n      endOfDay.setHours(23, 59, 59, 999);\n      \n      whereConditions.push(\n        gte(staffVerifications.checkedInAt, startOfDay),\n        lte(staffVerifications.checkedInAt, endOfDay)\n      );\n    }\n    \n    return await db.select().from(staffVerifications)\n      .where(and(...whereConditions))\n      .orderBy(desc(staffVerifications.checkedInAt));\n  }\n\n  // Appointments\n  async createAppointment(appointment: InsertAppointment): Promise<Appointment> {\n    const [newAppointment] = await db.insert(appointments).values(appointment).returning();\n    return newAppointment;\n  }\n\n  async getAppointment(id: string): Promise<Appointment | undefined> {\n    const [appointment] = await db.select().from(appointments).where(eq(appointments.id, id));\n    return appointment || undefined;\n  }\n\n  async getAppointmentWithDetails(id: string): Promise<(Appointment & { patient: User; doctor: User }) | undefined> {\n    const result = await db.query.appointments.findFirst({\n      where: eq(appointments.id, id),\n      with: {\n        patient: true,\n        doctor: true,\n      },\n    });\n    \n    return result || undefined;\n  }\n\n  async getUserAppointments(userId: string, role: string): Promise<(Appointment & { patient: User; doctor: User })[]> {\n    console.log(`Storage: Getting appointments for user ${userId} with role ${role}`);\n    console.log(`Storage: Looking for appointments where patientId = ${userId}`);\n    \n    // For dashboard context, show appointments from today onwards (include today)\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Start of today\n    \n    const appointmentRecords = await db.select().from(appointments)\n      .where(\n        and(\n          eq(appointments.patientId, userId),\n          gte(appointments.appointmentDate, today), // Include today's appointments\n          sql`${appointments.status} IN ('scheduled', 'confirmed', 'pending_approval')`\n        )\n      )\n      .orderBy(asc(appointments.appointmentDate))\n      .limit(5); // Show multiple appointments for context\n    \n    console.log(`Storage: Raw Drizzle query returned ${appointmentRecords.length} appointments from today onwards`);\n    console.log(`Storage: Today's date filter start:`, today.toISOString());\n    if (appointmentRecords.length > 0) {\n      console.log(`Storage: First appointment:`, appointmentRecords[0]);\n      appointmentRecords.forEach((apt, index) => {\n        console.log(`Storage: Appointment ${index + 1}: ${apt.id} at ${apt.appointmentDate}`);\n      });\n    }\n    \n    console.log(`Storage: Found ${appointmentRecords.length} appointments from today onwards for user ${userId}`);\n    \n    // Manually join with users\n    const appointmentsWithUsers = [];\n    for (const appointment of appointmentRecords) {\n      const [patient] = await db.select().from(users).where(eq(users.id, appointment.patientId));\n      const [doctor] = await db.select().from(users).where(eq(users.id, appointment.doctorId));\n      \n      if (patient && doctor) {\n        appointmentsWithUsers.push({\n          ...appointment,\n          patient,\n          doctor\n        });\n      } else {\n        console.log(`Storage: Missing user data for appointment ${appointment.id} - patient: ${!!patient}, doctor: ${!!doctor}`);\n      }\n    }\n    \n    console.log(`Storage: Returning ${appointmentsWithUsers.length} appointments with user data for user ${userId}`);\n    return appointmentsWithUsers;\n  }\n\n  async getAppointmentsByDate(date: Date, doctorId?: string): Promise<(Appointment & { patient: User; doctor: User })[]> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n    \n    let whereConditions = [\n      gte(appointments.appointmentDate, startOfDay),\n      lte(appointments.appointmentDate, endOfDay)\n    ];\n    \n    if (doctorId) {\n      whereConditions.push(eq(appointments.doctorId, doctorId));\n    }\n    \n    return await db.query.appointments.findMany({\n      where: and(...whereConditions),\n      with: {\n        patient: true,\n        doctor: true,\n      },\n      orderBy: asc(appointments.appointmentDate),\n    });\n  }\n\n  async getAppointmentById(id: string): Promise<Appointment | null> {\n    const [appointment] = await db.select()\n      .from(appointments)\n      .where(eq(appointments.id, id))\n      .limit(1);\n    return appointment || null;\n  }\n\n  async updateAppointment(id: string, appointment: Partial<InsertAppointment>): Promise<Appointment | undefined> {\n    const [updatedAppointment] = await db.update(appointments)\n      .set({ ...appointment, updatedAt: new Date() })\n      .where(eq(appointments.id, id))\n      .returning();\n    return updatedAppointment || undefined;\n  }\n\n  async cancelAppointment(id: string): Promise<Appointment | undefined> {\n    const [cancelledAppointment] = await db.update(appointments)\n      .set({ status: 'cancelled', updatedAt: new Date() })\n      .where(eq(appointments.id, id))\n      .returning();\n    return cancelledAppointment || undefined;\n  }\n\n  async getAppointments(userId?: string): Promise<(Appointment & { patient: User; doctor: User })[]> {\n    console.log('Storage: Getting appointments for admin...');\n    \n    // For admin dashboard, prioritize pending approvals and show all active appointments\n    const appointmentRecords = await db.select().from(appointments)\n      .where(sql`${appointments.status} NOT IN ('completed', 'cancelled', 'no_show')`)\n      .orderBy(\n        sql`CASE WHEN ${appointments.status} = 'pending_approval' THEN 0 ELSE 1 END`,\n        desc(appointments.appointmentDate)\n      );\n    console.log('Storage: Direct query found active appointments:', appointmentRecords?.length || 0);\n    \n    // Manually join with users\n    const appointmentsWithUsers = [];\n    for (const appointment of appointmentRecords) {\n      const [patient] = await db.select().from(users).where(eq(users.id, appointment.patientId));\n      const [doctor] = await db.select().from(users).where(eq(users.id, appointment.doctorId));\n      \n      if (patient && doctor) {\n        appointmentsWithUsers.push({\n          ...appointment,\n          patient,\n          doctor\n        });\n      } else {\n        console.log(`Storage: Missing user data for appointment ${appointment.id} - patient: ${!!patient}, doctor: ${!!doctor}`);\n      }\n    }\n    \n    console.log('Storage: Final result with users:', appointmentsWithUsers.length);\n    return appointmentsWithUsers;\n  }\n\n\n\n  // Queue Management\n  async createQueueToken(token: InsertQueueToken): Promise<QueueToken> {\n    const [newToken] = await db.insert(queueTokens).values(token).returning();\n    return newToken;\n  }\n\n  async getQueueToken(id: string): Promise<QueueToken | undefined> {\n    const [token] = await db.select().from(queueTokens).where(eq(queueTokens.id, id));\n    return token || undefined;\n  }\n\n  async getQueueTokenWithDetails(id: string): Promise<(QueueToken & { patient: User; doctor: User }) | undefined> {\n    const result = await db.query.queueTokens.findFirst({\n      where: eq(queueTokens.id, id),\n      with: {\n        patient: true,\n        doctor: true,\n      },\n    });\n    \n    return result || undefined;\n  }\n\n  async getDoctorQueue(doctorId: string): Promise<(QueueToken & { patient: User })[]> {\n    return await db.query.queueTokens.findMany({\n      where: eq(queueTokens.doctorId, doctorId),\n      with: {\n        patient: true,\n      },\n      orderBy: asc(queueTokens.tokenNumber),\n    });\n  }\n\n  async getCurrentServingToken(doctorId: string): Promise<(QueueToken & { patient: User }) | undefined> {\n    const result = await db.query.queueTokens.findFirst({\n      where: and(\n        eq(queueTokens.doctorId, doctorId),\n        eq(queueTokens.status, 'in_progress')\n      ),\n      with: {\n        patient: true,\n      },\n    });\n    \n    return result || undefined;\n  }\n\n  async getNextTokenNumber(doctorId: string, appointmentId?: string): Promise<number> {\n    // If there's an appointmentId, assign token number based on appointment time order\n    if (appointmentId) {\n      return this.getTokenNumberByAppointmentTime(doctorId, appointmentId);\n    }\n    \n    // Fallback to sequential numbering for walk-ins\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    \n    const [result] = await db.select({\n      maxToken: sql<number>`COALESCE(MAX(${queueTokens.tokenNumber}), 0)`\n    })\n    .from(queueTokens)\n    .where(and(\n      eq(queueTokens.doctorId, doctorId),\n      gte(queueTokens.createdAt, today),\n      lte(queueTokens.createdAt, tomorrow)\n    ));\n    \n    return (result?.maxToken || 0) + 1;\n  }\n\n  async getTokenNumberByAppointmentTime(doctorId: string, appointmentId: string): Promise<number> {\n    // Get the appointment to find its time\n    const appointment = await db.select()\n      .from(appointments)\n      .where(eq(appointments.id, appointmentId))\n      .limit(1);\n    \n    if (!appointment.length) {\n      // Fallback to sequential if appointment not found\n      return this.getNextTokenNumber(doctorId);\n    }\n    \n    const appointmentTime = appointment[0].appointmentDate;\n    \n    // Get all appointments for today for this doctor, ordered by time\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    \n    const todaysAppointments = await db.select()\n      .from(appointments)\n      .where(and(\n        eq(appointments.doctorId, doctorId),\n        gte(appointments.appointmentDate, today),\n        lte(appointments.appointmentDate, tomorrow)\n      ))\n      .orderBy(asc(appointments.appointmentDate));\n    \n    // Find the position of this appointment in the time-ordered list\n    const appointmentIndex = todaysAppointments.findIndex(apt => apt.id === appointmentId);\n    \n    if (appointmentIndex === -1) {\n      // Fallback if appointment not found in today's list\n      return this.getNextTokenNumber(doctorId);\n    }\n    \n    // Token number should be based on appointment time order (1-indexed)\n    return appointmentIndex + 1;\n  }\n\n  async reorderQueueByAppointmentTime(doctorId: string): Promise<void> {\n    // Get all queue tokens for this doctor for today\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    const result = await db.select({\n      token: queueTokens,\n      appointment: appointments\n    })\n    .from(queueTokens)\n    .leftJoin(appointments, eq(queueTokens.appointmentId, appointments.id))\n    .where(and(\n      eq(queueTokens.doctorId, doctorId),\n      eq(queueTokens.status, 'waiting'),\n      gte(queueTokens.createdAt, today),\n      lte(queueTokens.createdAt, tomorrow)\n    ));\n\n    console.log('🔥 REORDER - Found tokens:', result.length);\n    \n    // Sort tokens by appointment time (with walk-ins last)\n    const sortedTokens = result.sort((a, b) => {\n      const aTime = a.appointment?.appointmentDate;\n      const bTime = b.appointment?.appointmentDate;\n      \n      console.log(`🔥 REORDER - Comparing: ${a.token.id} (${aTime}) vs ${b.token.id} (${bTime})`);\n      \n      // If both have appointments, sort by appointment time\n      if (aTime && bTime) {\n        return new Date(aTime).getTime() - new Date(bTime).getTime();\n      }\n      \n      // If only one has an appointment, put that one first\n      if (aTime && !bTime) return -1;\n      if (!aTime && bTime) return 1;\n      \n      // If neither has an appointment, sort by creation time (walk-ins)\n      return new Date(a.token.createdAt).getTime() - new Date(b.token.createdAt).getTime();\n    });\n\n    console.log('🔥 REORDER - Sorted order:');\n    sortedTokens.forEach((item, index) => {\n      const appointmentTime = item.appointment?.appointmentDate || 'No appointment';\n      console.log(`  ${index + 1}. Token ${item.token.id} - Appointment: ${appointmentTime}`);\n    });\n\n    // Update token numbers to match the new order\n    for (let i = 0; i < sortedTokens.length; i++) {\n      const item = sortedTokens[i];\n      const newTokenNumber = i + 1;\n      \n      console.log(`🔥 REORDER - Updating token ${item.token.id}: ${item.token.tokenNumber} -> ${newTokenNumber}`);\n      \n      if (item.token.tokenNumber !== newTokenNumber) {\n        await db.update(queueTokens)\n          .set({ tokenNumber: newTokenNumber })\n          .where(eq(queueTokens.id, item.token.id));\n        \n        console.log(`🔥 REORDER - Updated token ${item.token.id} to position ${newTokenNumber}`);\n      }\n    }\n    \n    console.log('🔥 REORDER - Queue reordering completed');\n  }\n\n  async updateQueueTokenStatus(id: string, status: string, timestamp?: Date): Promise<QueueToken | undefined> {\n    const updateData: any = { status };\n    \n    if (status === 'called' && timestamp) {\n      updateData.calledAt = timestamp;\n    } else if (status === 'completed' && timestamp) {\n      updateData.completedAt = timestamp;\n    }\n    \n    const [updatedToken] = await db.update(queueTokens)\n      .set(updateData)\n      .where(eq(queueTokens.id, id))\n      .returning();\n    \n    return updatedToken || undefined;\n  }\n\n  async removeDuplicateQueueTokens(): Promise<void> {\n    console.log('🔥 CLEANUP - Starting duplicate queue token removal...');\n    \n    // Find duplicate tokens (same patient + doctor combination)\n    const duplicates = await db.select({\n      patientId: queueTokens.patientId,\n      doctorId: queueTokens.doctorId,\n      count: sql<number>`COUNT(*)`\n    })\n    .from(queueTokens)\n    .where(eq(queueTokens.status, 'waiting'))\n    .groupBy(queueTokens.patientId, queueTokens.doctorId)\n    .having(sql`COUNT(*) > 1`);\n\n    console.log(`🔥 CLEANUP - Found ${duplicates.length} duplicate patient-doctor combinations`);\n\n    for (const duplicate of duplicates) {\n      console.log(`🔥 CLEANUP - Processing duplicates for patient ${duplicate.patientId} with doctor ${duplicate.doctorId}`);\n      \n      // Get all tokens for this patient-doctor combination, ordered by creation date (keep the oldest)\n      const tokens = await db.select()\n        .from(queueTokens)\n        .where(and(\n          eq(queueTokens.patientId, duplicate.patientId),\n          eq(queueTokens.doctorId, duplicate.doctorId),\n          eq(queueTokens.status, 'waiting')\n        ))\n        .orderBy(asc(queueTokens.createdAt));\n\n      if (tokens.length > 1) {\n        // Keep the first (oldest) token, remove the rest\n        const tokenToKeep = tokens[0];\n        const tokensToRemove = tokens.slice(1);\n\n        console.log(`🔥 CLEANUP - Keeping token ${tokenToKeep.id}, removing ${tokensToRemove.length} duplicates`);\n\n        for (const tokenToRemove of tokensToRemove) {\n          await db.delete(queueTokens).where(eq(queueTokens.id, tokenToRemove.id));\n          console.log(`🔥 CLEANUP - Removed duplicate token ${tokenToRemove.id}`);\n        }\n      }\n    }\n\n    console.log('🔥 CLEANUP - Duplicate removal completed');\n  }\n\n  async updateQueueTokenWaitTime(id: string, estimatedWaitTime: number): Promise<QueueToken | undefined> {\n    const [updatedToken] = await db.update(queueTokens)\n      .set({ estimatedWaitTime })\n      .where(eq(queueTokens.id, id))\n      .returning();\n    \n    return updatedToken || undefined;\n  }\n\n  async getPatientQueuePosition(patientId: string, doctorId?: string): Promise<QueueToken | undefined> {\n    let whereClause = and(\n      eq(queueTokens.patientId, patientId),\n      sql`${queueTokens.status} IN ('waiting', 'called', 'in_progress')`\n    );\n    \n    if (doctorId) {\n      whereClause = and(whereClause, eq(queueTokens.doctorId, doctorId));\n    }\n    \n    // Get all tokens for this patient\n    const allTokens = await db.select({\n      id: queueTokens.id,\n      tokenNumber: queueTokens.tokenNumber,\n      patientId: queueTokens.patientId,\n      doctorId: queueTokens.doctorId,\n      clinicId: queueTokens.clinicId,\n      appointmentId: queueTokens.appointmentId,\n      status: queueTokens.status,\n      estimatedWaitTime: queueTokens.estimatedWaitTime,\n      calledAt: queueTokens.calledAt,\n      completedAt: queueTokens.completedAt,\n      priority: queueTokens.priority,\n      createdAt: queueTokens.createdAt,\n      appointmentDate: appointments.appointmentDate\n    })\n    .from(queueTokens)\n    .leftJoin(appointments, eq(queueTokens.appointmentId, appointments.id))\n    .where(whereClause)\n    .orderBy(asc(appointments.appointmentDate), desc(queueTokens.createdAt));\n    \n    // Prioritize today's appointments, then most recent\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    \n    const todayTokens = allTokens.filter(token => {\n      const tokenDate = new Date(token.appointmentDate || new Date());\n      tokenDate.setHours(0, 0, 0, 0);\n      return tokenDate.getTime() === today.getTime();\n    });\n    \n    // Return today's token if exists, otherwise most recent token\n    return todayTokens[0] || allTokens[0] || undefined;\n  }\n\n  async getQueueTokens(): Promise<(QueueToken & { patient: User; doctor: User })[]> {\n    return await db.query.queueTokens.findMany({\n      with: {\n        patient: true,\n        doctor: true,\n      },\n      orderBy: [asc(queueTokens.createdAt)],\n    });\n  }\n\n  // Medicines\n  async createMedicine(medicine: InsertMedicine): Promise<Medicine> {\n    const [newMedicine] = await db.insert(medicines).values(medicine).returning();\n    return newMedicine;\n  }\n\n  async getMedicine(id: string): Promise<Medicine | undefined> {\n    const [medicine] = await db.select().from(medicines).where(eq(medicines.id, id));\n    return medicine || undefined;\n  }\n\n  async getMedicineByName(name: string): Promise<Medicine | undefined> {\n    const [medicine] = await db.select().from(medicines).where(eq(medicines.name, name));\n    return medicine || undefined;\n  }\n\n  async getAllMedicines(): Promise<Medicine[]> {\n    return await db.select().from(medicines).orderBy(asc(medicines.name));\n  }\n\n  async getMedicinesByClinic(clinicId: string): Promise<Medicine[]> {\n    return await db.select().from(medicines)\n      .where(eq(medicines.clinicId, clinicId))\n      .orderBy(asc(medicines.name));\n  }\n\n  async getClinicMedicines(clinicId: string): Promise<Medicine[]> {\n    // Only return medicines that are NOT patient-added (exclude manufacturer = 'Patient Added')\n    return await db.select().from(medicines)\n      .where(and(\n        eq(medicines.clinicId, clinicId),\n        not(eq(medicines.manufacturer, 'Patient Added'))\n      ))\n      .orderBy(asc(medicines.name));\n  }\n\n  async searchMedicines(query: string): Promise<Medicine[]> {\n    return await db.select().from(medicines)\n      .where(sql`${medicines.name} ILIKE ${'%' + query + '%'}`)\n      .orderBy(asc(medicines.name));\n  }\n\n  async searchClinicMedicines(query: string, clinicId: string): Promise<Medicine[]> {\n    // Only search medicines that are NOT patient-added (exclude manufacturer = 'Patient Added')\n    return await db.select().from(medicines)\n      .where(and(\n        eq(medicines.clinicId, clinicId),\n        not(eq(medicines.manufacturer, 'Patient Added')),\n        sql`${medicines.name} ILIKE ${'%' + query + '%'}`\n      ))\n      .orderBy(asc(medicines.name));\n  }\n\n  async addMedicine(medicine: Omit<Medicine, 'id' | 'createdAt' | 'updatedAt'>): Promise<Medicine> {\n    const [newMedicine] = await db.insert(medicines).values(medicine).returning();\n    return newMedicine;\n  }\n\n  async createPatientMedicine(medicine: Omit<InsertMedicine, 'clinicId'>): Promise<Medicine> {\n    // For patient-added medicines, use default clinic ID\n    const medicineData = {\n      ...medicine,\n      clinicId: 'default-clinic-id'\n    };\n    const [newMedicine] = await db.insert(medicines).values(medicineData).returning();\n    return newMedicine;\n  }\n\n  async getMedicineById(medicineId: string): Promise<Medicine | null> {\n    const [medicine] = await db.select().from(medicines).where(eq(medicines.id, medicineId));\n    return medicine || null;\n  }\n\n  async updateMedicine(medicineId: string, updates: Partial<Medicine>): Promise<Medicine | null> {\n    const [updatedMedicine] = await db.update(medicines)\n      .set(updates)\n      .where(eq(medicines.id, medicineId))\n      .returning();\n    return updatedMedicine || null;\n  }\n\n  async deleteMedicine(medicineId: string): Promise<boolean> {\n    try {\n      // First, delete all associated reminders\n      await db.delete(medicineReminders)\n        .where(sql`prescription_id IN (SELECT id FROM prescriptions WHERE medicine_id = ${medicineId})`);\n      \n      // Then, delete all associated prescriptions\n      await db.delete(prescriptions)\n        .where(eq(prescriptions.medicineId, medicineId));\n      \n      // Finally, delete the medicine\n      await db.delete(medicines)\n        .where(eq(medicines.id, medicineId));\n      \n      return true;\n    } catch (error) {\n      console.error('Error deleting medicine:', error);\n      return false;\n    }\n  }\n\n  // Prescriptions\n  async createPrescription(prescription: InsertPrescription): Promise<Prescription> {\n    const [newPrescription] = await db.insert(prescriptions).values(prescription).returning();\n    return newPrescription;\n  }\n\n  async getPrescription(id: string): Promise<Prescription | undefined> {\n    const [prescription] = await db.select().from(prescriptions).where(eq(prescriptions.id, id));\n    return prescription || undefined;\n  }\n\n  async getPrescriptionWithDetails(id: string): Promise<(Prescription & { medicine: Medicine; patient: User; doctor: User }) | undefined> {\n    const result = await db.query.prescriptions.findFirst({\n      where: eq(prescriptions.id, id),\n      with: {\n        medicine: true,\n        patient: true,\n        doctor: true,\n      },\n    });\n    \n    return result || undefined;\n  }\n\n  async getPatientPrescriptions(patientId: string): Promise<(Prescription & { medicine: Medicine; doctor: User })[]> {\n    return await db.query.prescriptions.findMany({\n      where: eq(prescriptions.patientId, patientId),\n      with: {\n        medicine: true,\n        doctor: true,\n      },\n      orderBy: desc(prescriptions.createdAt),\n    });\n  }\n\n  async getActivePrescriptions(patientId: string): Promise<(Prescription & { medicine: Medicine })[]> {\n    return await db.query.prescriptions.findMany({\n      where: and(\n        eq(prescriptions.patientId, patientId),\n        eq(prescriptions.status, 'active')\n      ),\n      with: {\n        medicine: true,\n      },\n      orderBy: desc(prescriptions.createdAt),\n    });\n  }\n\n  async updatePrescription(id: string, prescription: Partial<InsertPrescription>): Promise<Prescription | undefined> {\n    const [updatedPrescription] = await db.update(prescriptions)\n      .set({ ...prescription, updatedAt: new Date() })\n      .where(eq(prescriptions.id, id))\n      .returning();\n    return updatedPrescription || undefined;\n  }\n\n  async deletePrescription(prescriptionId: string): Promise<boolean> {\n    try {\n      // First, delete all associated medicine reminders\n      await db.delete(medicineReminders)\n        .where(eq(medicineReminders.prescriptionId, prescriptionId));\n      \n      // Then, delete the prescription\n      await db.delete(prescriptions)\n        .where(eq(prescriptions.id, prescriptionId));\n      \n      return true;\n    } catch (error) {\n      console.error('Error deleting prescription:', error);\n      return false;\n    }\n  }\n\n  async deleteFutureReminders(prescriptionId: string): Promise<boolean> {\n    try {\n      // Delete all reminders from today onwards (including today's remaining reminders)\n      const today = new Date();\n      today.setHours(0, 0, 0, 0); // Start of today\n      \n      await db.delete(medicineReminders)\n        .where(and(\n          eq(medicineReminders.prescriptionId, prescriptionId),\n          gte(medicineReminders.scheduledAt, today),\n          eq(medicineReminders.isTaken, false), // Only delete untaken reminders\n          eq(medicineReminders.isSkipped, false) // Only delete unskipped reminders\n        ));\n      \n      console.log('🔥 Deleted future reminders from today onwards for prescription:', prescriptionId);\n      return true;\n    } catch (error) {\n      console.error('Error deleting future reminders:', error);\n      return false;\n    }\n  }\n\n  // Medicine Reminders\n  async createMedicineReminder(reminder: InsertMedicineReminder): Promise<MedicineReminder> {\n    const [newReminder] = await db.insert(medicineReminders).values(reminder).returning();\n    return newReminder;\n  }\n\n  async getMedicineReminder(id: string): Promise<MedicineReminder | undefined> {\n    const [reminder] = await db.select().from(medicineReminders).where(eq(medicineReminders.id, id));\n    return reminder || undefined;\n  }\n\n  async getPatientReminders(patientId: string, date?: Date): Promise<any[]> {\n    // Use direct SQL query with proper joins\n    const whereConditions = [eq(prescriptions.patientId, patientId)];\n    \n    if (date) {\n      const startOfDay = new Date(date);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(date);\n      endOfDay.setHours(23, 59, 59, 999);\n      \n      whereConditions.push(\n        gte(medicineReminders.scheduledAt, startOfDay),\n        lte(medicineReminders.scheduledAt, endOfDay)\n      );\n    }\n\n    return await db.select({\n      id: medicineReminders.id,\n      prescriptionId: medicineReminders.prescriptionId,\n      scheduledAt: medicineReminders.scheduledAt,\n      takenAt: medicineReminders.takenAt,\n      skippedAt: medicineReminders.skippedAt,\n      isTaken: medicineReminders.isTaken,\n      isSkipped: medicineReminders.isSkipped,\n      smsReminderSent: medicineReminders.smsReminderSent,\n      notes: medicineReminders.notes,\n      medicineName: medicines.name,\n      dosage: prescriptions.dosage,\n      instructions: prescriptions.instructions,\n      frequency: prescriptions.frequency\n    })\n    .from(medicineReminders)\n    .innerJoin(prescriptions, eq(medicineReminders.prescriptionId, prescriptions.id))\n    .innerJoin(medicines, eq(prescriptions.medicineId, medicines.id))\n    .where(and(...whereConditions))\n    .orderBy(asc(medicineReminders.scheduledAt));\n  }\n\n  async getDueReminders(): Promise<any[]> {\n    const now = new Date();\n    const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);\n    \n    // Use direct SQL query to avoid relation issues\n    const results = await db.select({\n      id: medicineReminders.id,\n      prescriptionId: medicineReminders.prescriptionId,\n      scheduledAt: medicineReminders.scheduledAt,\n      patientName: sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`,\n      patientEmail: users.email,\n      patientPhone: users.phoneNumber,\n      medicineName: medicines.name,\n      dosage: prescriptions.dosage,\n      instructions: prescriptions.instructions\n    })\n    .from(medicineReminders)\n    .innerJoin(prescriptions, eq(medicineReminders.prescriptionId, prescriptions.id))\n    .innerJoin(users, eq(prescriptions.patientId, users.id))\n    .innerJoin(medicines, eq(prescriptions.medicineId, medicines.id))\n    .where(and(\n      lte(medicineReminders.scheduledAt, now),\n      gte(medicineReminders.scheduledAt, fiveMinutesAgo),\n      eq(medicineReminders.isTaken, false),\n      eq(medicineReminders.isSkipped, false),\n      eq(medicineReminders.smsReminderSent, false)\n    ));\n    \n    // Transform results to match expected structure\n    return results.map(result => ({\n      id: result.id,\n      prescriptionId: result.prescriptionId,\n      scheduledAt: result.scheduledAt,\n      prescription: {\n        patient: {\n          email: result.patientEmail,\n          name: result.patientName\n        },\n        medicine: {\n          name: result.medicineName\n        },\n        dosage: result.dosage\n      }\n    }));\n  }\n\n  async markReminderTaken(id: string): Promise<MedicineReminder | undefined> {\n    const [updatedReminder] = await db.update(medicineReminders)\n      .set({ isTaken: true, takenAt: new Date() })\n      .where(eq(medicineReminders.id, id))\n      .returning();\n    return updatedReminder || undefined;\n  }\n\n  async markReminderSkipped(id: string): Promise<MedicineReminder | undefined> {\n    const [updatedReminder] = await db.update(medicineReminders)\n      .set({ isSkipped: true, skippedAt: new Date() })\n      .where(eq(medicineReminders.id, id))\n      .returning();\n    return updatedReminder || undefined;\n  }\n\n  async updateReminderStatus(id: string, status: 'taken' | 'skipped'): Promise<MedicineReminder | undefined> {\n    const updateData: any = {};\n    \n    if (status === 'taken') {\n      updateData.isTaken = true;\n      updateData.takenAt = new Date();\n      updateData.isSkipped = false;\n      updateData.skippedAt = null;\n    } else if (status === 'skipped') {\n      updateData.isSkipped = true;\n      updateData.skippedAt = new Date();\n      updateData.isTaken = false;\n      updateData.takenAt = null;\n    }\n    \n    const [updatedReminder] = await db.update(medicineReminders)\n      .set(updateData)\n      .where(eq(medicineReminders.id, id))\n      .returning();\n    \n    return updatedReminder || undefined;\n  }\n\n  async resetReminderStatus(id: string): Promise<MedicineReminder | undefined> {\n    const [updatedReminder] = await db.update(medicineReminders)\n      .set({ \n        isTaken: false, \n        isSkipped: false, \n        takenAt: null, \n        skippedAt: null \n      })\n      .where(eq(medicineReminders.id, id))\n      .returning();\n    \n    return updatedReminder || undefined;\n  }\n\n  async markReminderEmailSent(reminderId: string): Promise<void> {\n    await db.update(medicineReminders)\n      .set({ smsReminderSent: true })\n      .where(eq(medicineReminders.id, reminderId));\n  }\n\n  // Delay Notifications\n  async createDelayNotification(notification: InsertDelayNotification): Promise<DelayNotification> {\n    const [newNotification] = await db.insert(delayNotifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async getActiveDelayNotifications(doctorId: string): Promise<DelayNotification[]> {\n    return await db.select().from(delayNotifications)\n      .where(and(\n        eq(delayNotifications.doctorId, doctorId),\n        eq(delayNotifications.isResolved, false)\n      ))\n      .orderBy(desc(delayNotifications.createdAt));\n  }\n\n  async getAllActiveDelayNotifications(): Promise<DelayNotification[]> {\n    return await db.select().from(delayNotifications)\n      .where(eq(delayNotifications.isResolved, false))\n      .orderBy(desc(delayNotifications.createdAt));\n  }\n\n  // Patient Feedback Methods\n  async createPatientFeedback(feedback: InsertPatientFeedback): Promise<PatientFeedback> {\n    const [newFeedback] = await db.insert(patientFeedback).values(feedback).returning();\n    return newFeedback;\n  }\n\n  async getAllPatientFeedback(): Promise<(PatientFeedback & { patient?: User; appointment?: Appointment })[]> {\n    const feedbackRecords = await db.select().from(patientFeedback)\n      .orderBy(desc(patientFeedback.createdAt));\n    \n    // Manually join with users and appointments - handle anonymous feedback\n    const feedbackWithUsers = [];\n    for (const feedback of feedbackRecords) {\n      let patient = undefined;\n      if (feedback.patientId) {\n        const [patientRecord] = await db.select().from(users).where(eq(users.id, feedback.patientId));\n        patient = patientRecord;\n      }\n      \n      let appointment = undefined;\n      if (feedback.appointmentId) {\n        const [apt] = await db.select().from(appointments).where(eq(appointments.id, feedback.appointmentId));\n        appointment = apt;\n      }\n      \n      // Include feedback regardless of whether patient exists (for anonymous feedback)\n      feedbackWithUsers.push({\n        ...feedback,\n        patient,\n        appointment\n      });\n    }\n    \n    return feedbackWithUsers;\n  }\n\n  async getPatientFeedbackById(id: string): Promise<PatientFeedback | null> {\n    const [feedback] = await db.select()\n      .from(patientFeedback)\n      .where(eq(patientFeedback.id, id));\n    return feedback || null;\n  }\n\n  async getPatientFeedbackByPatientId(patientId: string): Promise<PatientFeedback[]> {\n    return await db.select().from(patientFeedback)\n      .where(eq(patientFeedback.patientId, patientId))\n      .orderBy(desc(patientFeedback.createdAt));\n  }\n\n  async markFeedbackAsRead(id: string): Promise<PatientFeedback | null> {\n    const [updatedFeedback] = await db.update(patientFeedback)\n      .set({ isRead: true })\n      .where(eq(patientFeedback.id, id))\n      .returning();\n    return updatedFeedback || null;\n  }\n\n  async resolveDelayNotification(id: string): Promise<DelayNotification | undefined> {\n    const [resolvedNotification] = await db.update(delayNotifications)\n      .set({ isResolved: true, resolvedAt: new Date() })\n      .where(eq(delayNotifications.id, id))\n      .returning();\n    return resolvedNotification || undefined;\n  }\n\n  // Home Visits\n  async createHomeVisit(visit: InsertHomeVisit): Promise<HomeVisit> {\n    const [newVisit] = await db.insert(homeVisits).values(visit).returning();\n    return newVisit;\n  }\n\n  async getHomeVisit(id: string): Promise<HomeVisit | undefined> {\n    const [visit] = await db.select().from(homeVisits).where(eq(homeVisits.id, id));\n    return visit || undefined;\n  }\n\n  async getHomeVisitWithDetails(id: string): Promise<any | undefined> {\n    const [result] = await db.select({\n      id: homeVisits.id,\n      appointmentId: homeVisits.appointmentId,\n      doctorId: homeVisits.doctorId,\n      patientId: homeVisits.patientId,\n      address: homeVisits.address,\n      latitude: homeVisits.latitude,\n      longitude: homeVisits.longitude,\n      travelStartTime: homeVisits.travelStartTime,\n      arrivalTime: homeVisits.arrivalTime,\n      departureTime: homeVisits.departureTime,\n      travelEndTime: homeVisits.travelEndTime,\n      distance: homeVisits.distance,\n      travelDuration: homeVisits.travelDuration,\n      visitNotes: homeVisits.visitNotes,\n      createdAt: homeVisits.createdAt,\n      appointment: appointments,\n      patient: {\n        id: sql`patient.id`,\n        phoneNumber: sql`patient.phone_number`,\n        role: sql`patient.role`,\n        firstName: sql`patient.first_name`,\n        lastName: sql`patient.last_name`,\n        email: sql`patient.email`,\n        dateOfBirth: sql`patient.date_of_birth`,\n        address: sql`patient.address`,\n        emergencyContact: sql`patient.emergency_contact`,\n        isActive: sql`patient.is_active`,\n        isApproved: sql`patient.is_approved`,\n        createdAt: sql`patient.created_at`,\n        updatedAt: sql`patient.updated_at`,\n      },\n      doctor: {\n        id: sql`doctor.id`,\n        phoneNumber: sql`doctor.phone_number`,\n        role: sql`doctor.role`,\n        firstName: sql`doctor.first_name`,\n        lastName: sql`doctor.last_name`,\n        email: sql`doctor.email`,\n        dateOfBirth: sql`doctor.date_of_birth`,\n        address: sql`doctor.address`,\n        emergencyContact: sql`doctor.emergency_contact`,\n        isActive: sql`doctor.is_active`,\n        isApproved: sql`doctor.is_approved`,\n        createdAt: sql`doctor.created_at`,\n        updatedAt: sql`doctor.updated_at`,\n      }\n    })\n    .from(homeVisits)\n    .innerJoin(appointments, eq(homeVisits.appointmentId, appointments.id))\n    .innerJoin(sql`${users} AS patient`, sql`${homeVisits.patientId} = patient.id`)\n    .innerJoin(sql`${users} AS doctor`, sql`${homeVisits.doctorId} = doctor.id`)\n    .where(eq(homeVisits.id, id));\n    \n    return result || undefined;\n  }\n\n  async getDoctorHomeVisits(doctorId: string, date?: Date): Promise<any[]> {\n    let whereConditions = [eq(homeVisits.doctorId, doctorId)];\n    \n    if (date) {\n      const startOfDay = new Date(date);\n      startOfDay.setHours(0, 0, 0, 0);\n      const endOfDay = new Date(date);\n      endOfDay.setHours(23, 59, 59, 999);\n      \n      whereConditions.push(\n        gte(appointments.appointmentDate, startOfDay),\n        lte(appointments.appointmentDate, endOfDay)\n      );\n    }\n    \n    return await db.select({\n      id: homeVisits.id,\n      appointmentId: homeVisits.appointmentId,\n      doctorId: homeVisits.doctorId,\n      patientId: homeVisits.patientId,\n      address: homeVisits.address,\n      latitude: homeVisits.latitude,\n      longitude: homeVisits.longitude,\n      travelStartTime: homeVisits.travelStartTime,\n      arrivalTime: homeVisits.arrivalTime,\n      departureTime: homeVisits.departureTime,\n      travelEndTime: homeVisits.travelEndTime,\n      distance: homeVisits.distance,\n      travelDuration: homeVisits.travelDuration,\n      visitNotes: homeVisits.visitNotes,\n      createdAt: homeVisits.createdAt,\n      appointment: {\n        id: appointments.id,\n        patientId: appointments.patientId,\n        doctorId: appointments.doctorId,\n        appointmentDate: appointments.appointmentDate,\n        duration: appointments.duration,\n        type: appointments.type,\n        status: appointments.status,\n        location: appointments.location,\n        notes: appointments.notes,\n        symptoms: appointments.symptoms,\n        diagnosis: appointments.diagnosis,\n        treatmentPlan: appointments.treatmentPlan,\n        isDelayed: appointments.isDelayed,\n        delayMinutes: appointments.delayMinutes,\n        delayReason: appointments.delayReason,\n        createdAt: appointments.createdAt,\n        updatedAt: appointments.updatedAt\n      },\n      patient: {\n        id: users.id,\n        phoneNumber: users.phoneNumber,\n        role: users.role,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        email: users.email,\n        dateOfBirth: users.dateOfBirth,\n        address: users.address,\n        emergencyContact: users.emergencyContact,\n        isActive: users.isActive,\n        isApproved: users.isApproved,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt\n      }\n    })\n    .from(homeVisits)\n    .innerJoin(appointments, eq(homeVisits.appointmentId, appointments.id))\n    .innerJoin(users, eq(homeVisits.patientId, users.id))\n    .where(and(...whereConditions))\n    .orderBy(asc(appointments.appointmentDate));\n  }\n\n  async updateHomeVisit(id: string, visit: Partial<InsertHomeVisit>): Promise<HomeVisit | undefined> {\n    const [updatedVisit] = await db.update(homeVisits)\n      .set(visit)\n      .where(eq(homeVisits.id, id))\n      .returning();\n    return updatedVisit || undefined;\n  }\n\n  // Medical History\n  async createMedicalHistory(history: InsertMedicalHistory): Promise<MedicalHistory> {\n    const [newHistory] = await db.insert(medicalHistory).values(history).returning();\n    return newHistory;\n  }\n\n  async getPatientMedicalHistory(patientId: string): Promise<(MedicalHistory & { doctor: User })[]> {\n    return await db.select({\n      id: medicalHistory.id,\n      patientId: medicalHistory.patientId,\n      appointmentId: medicalHistory.appointmentId,\n      doctorId: medicalHistory.doctorId,\n      condition: medicalHistory.condition,\n      symptoms: medicalHistory.symptoms,\n      diagnosis: medicalHistory.diagnosis,\n      treatment: medicalHistory.treatment,\n      medications: medicalHistory.medications,\n      allergies: medicalHistory.allergies,\n      vitalSigns: medicalHistory.vitalSigns,\n      labResults: medicalHistory.labResults,\n      notes: medicalHistory.notes,\n      recordDate: medicalHistory.recordDate,\n      createdAt: medicalHistory.createdAt,\n      doctor: users\n    })\n    .from(medicalHistory)\n    .innerJoin(users, eq(medicalHistory.doctorId, users.id))\n    .where(eq(medicalHistory.patientId, patientId))\n    .orderBy(desc(medicalHistory.recordDate));\n  }\n\n  async getMedicalHistoryByAppointment(appointmentId: string): Promise<MedicalHistory | undefined> {\n    const [history] = await db.select().from(medicalHistory)\n      .where(eq(medicalHistory.appointmentId, appointmentId));\n    return history || undefined;\n  }\n\n  // Admin-specific methods implementation\n  async getAllQueueTokens(): Promise<any[]> {\n    return await db.select({\n      id: queueTokens.id,\n      tokenNumber: queueTokens.tokenNumber,\n      patientId: queueTokens.patientId,\n      doctorId: queueTokens.doctorId,\n      appointmentId: queueTokens.appointmentId,\n      status: queueTokens.status,\n      estimatedWaitTime: queueTokens.estimatedWaitTime,\n      calledAt: queueTokens.calledAt,\n      completedAt: queueTokens.completedAt,\n      priority: queueTokens.priority,\n      createdAt: queueTokens.createdAt,\n      patient: {\n        id: sql`patient.id`,\n        firstName: sql`patient.first_name`,\n        lastName: sql`patient.last_name`,\n        phoneNumber: sql`patient.phone_number`,\n        email: sql`patient.email`,\n        role: sql`patient.role`,\n      },\n      doctor: {\n        id: sql`doctor.id`,\n        firstName: sql`doctor.first_name`,\n        lastName: sql`doctor.last_name`,\n        phoneNumber: sql`doctor.phone_number`,\n        email: sql`doctor.email`,\n        role: sql`doctor.role`,\n      }\n    })\n    .from(queueTokens)\n    .innerJoin(sql`${users} AS patient`, sql`${queueTokens.patientId} = patient.id`)\n    .innerJoin(sql`${users} AS doctor`, sql`${queueTokens.doctorId} = doctor.id`)\n    .where(sql`${queueTokens.status} IN ('waiting', 'called', 'in_progress')`) // Filter out completed/cancelled tokens\n    .orderBy(asc(queueTokens.tokenNumber)); // Order by token number for proper queue display\n  }\n\n  async getAllAppointments(): Promise<any[]> {\n    return await db.select({\n      id: appointments.id,\n      patientId: appointments.patientId,\n      doctorId: appointments.doctorId,\n      appointmentDate: appointments.appointmentDate,\n      duration: appointments.duration,\n      type: appointments.type,\n      status: appointments.status,\n      location: appointments.location,\n      notes: appointments.notes,\n      symptoms: appointments.symptoms,\n      diagnosis: appointments.diagnosis,\n      treatmentPlan: appointments.treatmentPlan,\n      isDelayed: appointments.isDelayed,\n      delayMinutes: appointments.delayMinutes,\n      delayReason: appointments.delayReason,\n      createdAt: appointments.createdAt,\n      updatedAt: appointments.updatedAt,\n      patient: {\n        id: sql`patient.id`,\n        firstName: sql`patient.first_name`,\n        lastName: sql`patient.last_name`,\n        phoneNumber: sql`patient.phone_number`,\n        email: sql`patient.email`,\n        role: sql`patient.role`,\n      },\n      doctor: {\n        id: sql`doctor.id`,\n        firstName: sql`doctor.first_name`,\n        lastName: sql`doctor.last_name`,\n        phoneNumber: sql`doctor.phone_number`,\n        email: sql`doctor.email`,\n        role: sql`doctor.role`,\n      }\n    })\n    .from(appointments)\n    .innerJoin(sql`${users} AS patient`, sql`${appointments.patientId} = patient.id`)\n    .innerJoin(sql`${users} AS doctor`, sql`${appointments.doctorId} = doctor.id`)\n    .orderBy(desc(appointments.appointmentDate));\n  }\n\n  async getAllPatients(): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.role, 'patient')).orderBy(asc(users.firstName));\n  }\n\n  async getAppointmentsByDateRange(startDate: Date, endDate: Date, clinicId?: string): Promise<any[]> {\n    let whereConditions = [\n      gte(appointments.appointmentDate, startDate),\n      lte(appointments.appointmentDate, endDate)\n    ];\n    \n    if (clinicId) {\n      whereConditions.push(eq(appointments.clinicId, clinicId));\n    }\n    \n    return await db.select({\n      id: appointments.id,\n      patientId: appointments.patientId,\n      doctorId: appointments.doctorId,\n      clinicId: appointments.clinicId,\n      appointmentDate: appointments.appointmentDate,\n      duration: appointments.duration,\n      type: appointments.type,\n      status: appointments.status,\n      location: appointments.location,\n      notes: appointments.notes,\n      symptoms: appointments.symptoms,\n      diagnosis: appointments.diagnosis,\n      treatmentPlan: appointments.treatmentPlan,\n      isDelayed: appointments.isDelayed,\n      delayMinutes: appointments.delayMinutes,\n      delayReason: appointments.delayReason,\n      createdAt: appointments.createdAt,\n      updatedAt: appointments.updatedAt,\n      patient: {\n        id: sql`patient.id`,\n        firstName: sql`patient.first_name`,\n        lastName: sql`patient.last_name`,\n        phoneNumber: sql`patient.phone_number`,\n        email: sql`patient.email`,\n        role: sql`patient.role`,\n        dateOfBirth: sql`patient.date_of_birth`,\n        address: sql`patient.address`,\n        emergencyContact: sql`patient.emergency_contact`,\n        clinicId: sql`patient.clinic_id`,\n        isActive: sql`patient.is_active`,\n        isApproved: sql`patient.is_approved`,\n        createdAt: sql`patient.created_at`,\n        updatedAt: sql`patient.updated_at`\n      },\n      doctor: {\n        id: sql`doctor.id`,\n        firstName: sql`doctor.first_name`,\n        lastName: sql`doctor.last_name`,\n        phoneNumber: sql`doctor.phone_number`,\n        email: sql`doctor.email`,\n        role: sql`doctor.role`,\n        dateOfBirth: sql`doctor.date_of_birth`,\n        address: sql`doctor.address`,\n        emergencyContact: sql`doctor.emergency_contact`,\n        clinicId: sql`doctor.clinic_id`,\n        isActive: sql`doctor.is_active`,\n        isApproved: sql`doctor.is_approved`,\n        createdAt: sql`doctor.created_at`,\n        updatedAt: sql`doctor.updated_at`\n      }\n    })\n    .from(appointments)\n    .innerJoin(sql`${users} AS patient`, sql`${appointments.patientId} = patient.id`)\n    .innerJoin(sql`${users} AS doctor`, sql`${appointments.doctorId} = doctor.id`)\n    .where(and(...whereConditions))\n    .orderBy(desc(appointments.appointmentDate));\n  }\n\n  async getActiveStaffCount(): Promise<number> {\n    const result = await db.select({ count: sql<number>`COUNT(*)` })\n      .from(users)\n      .where(and(\n        eq(users.isActive, true),\n        eq(users.isApproved, true),\n        sql`${users.role} IN ('doctor', 'staff', 'admin')`\n      ));\n    \n    return result[0]?.count || 0;\n  }\n\n  async updateAppointmentStatus(id: string, status: string): Promise<Appointment | undefined> {\n    const [updatedAppointment] = await db.update(appointments)\n      .set({ status: status as any, updatedAt: new Date() })\n      .where(eq(appointments.id, id))\n      .returning();\n    return updatedAppointment || undefined;\n  }\n\n\n\n  async getPendingAppointments(): Promise<(Appointment & { patient: User; doctor: User })[]> {\n    const result = await db.select({\n      id: appointments.id,\n      patientId: appointments.patientId,\n      doctorId: appointments.doctorId,\n      appointmentDate: appointments.appointmentDate,\n      duration: appointments.duration,\n      type: appointments.type,\n      status: appointments.status,\n      location: appointments.location,\n      notes: appointments.notes,\n      symptoms: appointments.symptoms,\n      diagnosis: appointments.diagnosis,\n      treatmentPlan: appointments.treatmentPlan,\n      isDelayed: appointments.isDelayed,\n      delayMinutes: appointments.delayMinutes,\n      delayReason: appointments.delayReason,\n      createdAt: appointments.createdAt,\n      updatedAt: appointments.updatedAt,\n      patient: {\n        id: sql`patient.id`,\n        firstName: sql`patient.first_name`,\n        lastName: sql`patient.last_name`,\n        phoneNumber: sql`patient.phone_number`,\n        email: sql`patient.email`,\n        role: sql`patient.role`,\n        dateOfBirth: sql`patient.date_of_birth`,\n        address: sql`patient.address`,\n        emergencyContact: sql`patient.emergency_contact`,\n        isActive: sql`patient.is_active`,\n        isApproved: sql`patient.is_approved`,\n        createdAt: sql`patient.created_at`,\n        updatedAt: sql`patient.updated_at`,\n      },\n      doctor: {\n        id: sql`doctor.id`,\n        firstName: sql`doctor.first_name`,\n        lastName: sql`doctor.last_name`,\n        phoneNumber: sql`doctor.phone_number`,\n        email: sql`doctor.email`,\n        role: sql`doctor.role`,\n        dateOfBirth: sql`doctor.date_of_birth`,\n        address: sql`doctor.address`,\n        emergencyContact: sql`doctor.emergency_contact`,\n        isActive: sql`doctor.is_active`,\n        isApproved: sql`doctor.is_approved`,\n        createdAt: sql`doctor.created_at`,\n        updatedAt: sql`doctor.updated_at`,\n      }\n    })\n    .from(appointments)\n    .innerJoin(sql`${users} AS patient`, sql`${appointments.patientId} = patient.id`)\n    .innerJoin(sql`${users} AS doctor`, sql`${appointments.doctorId} = doctor.id`)\n    .where(eq(appointments.status, 'pending_approval'))\n    .orderBy(desc(appointments.createdAt));\n\n    return result as any[];\n  }\n\n  async updateUserStatus(userId: string, status: { isApproved: boolean }): Promise<void> {\n    await db.update(users)\n      .set({ isApproved: status.isApproved, updatedAt: new Date() })\n      .where(eq(users.id, userId));\n  }\n\n  // Staff Presence Implementation\n  async createOrUpdateStaffPresence(staffId: string, date: Date, clinicId?: string): Promise<StaffPresence> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    // Check if presence record exists for this date\n    const existing = await db.select()\n      .from(staffPresence)\n      .where(and(\n        eq(staffPresence.staffId, staffId),\n        gte(staffPresence.date, startOfDay),\n        lte(staffPresence.date, endOfDay)\n      ))\n      .limit(1);\n\n    if (existing.length > 0) {\n      // Update existing record to mark present\n      const [updated] = await db.update(staffPresence)\n        .set({ \n          isPresent: true, \n          checkInTime: new Date(),\n          updatedAt: new Date() \n        })\n        .where(eq(staffPresence.id, existing[0].id))\n        .returning();\n      return updated;\n    } else {\n      // Get clinicId from the staff user if not provided\n      const staffUser = await this.getUser(staffId);\n      if (!staffUser) {\n        throw new Error('Staff user not found');\n      }\n      \n      // Create new presence record\n      const [newPresence] = await db.insert(staffPresence)\n        .values({\n          staffId,\n          clinicId: clinicId || staffUser.clinicId,\n          date: startOfDay,\n          isPresent: true,\n          checkInTime: new Date(),\n          markedByAdmin: false\n        })\n        .returning();\n      return newPresence;\n    }\n  }\n\n  async getStaffPresence(staffId: string, date: Date): Promise<StaffPresence | undefined> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    const [presence] = await db.select()\n      .from(staffPresence)\n      .where(and(\n        eq(staffPresence.staffId, staffId),\n        gte(staffPresence.date, startOfDay),\n        lte(staffPresence.date, endOfDay)\n      ))\n      .limit(1);\n\n    return presence || undefined;\n  }\n\n  async getStaffPresenceForDate(date: Date): Promise<(StaffPresence & { staff: User })[]> {\n    const startOfDay = new Date(date);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(date);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    return await db.query.staffPresence.findMany({\n      where: and(\n        gte(staffPresence.date, startOfDay),\n        lte(staffPresence.date, endOfDay)\n      ),\n      with: {\n        staff: true\n      }\n    });\n  }\n\n  async updateStaffPresence(id: string, updates: Partial<InsertStaffPresence>): Promise<StaffPresence | undefined> {\n    const [updated] = await db.update(staffPresence)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(staffPresence.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async getTodayStaffPresence(): Promise<(StaffPresence & { staff: User })[]> {\n    const today = new Date();\n    return this.getStaffPresenceForDate(today);\n  }\n\n  async createStaffPresence(data: InsertStaffPresence): Promise<StaffPresence> {\n    const startOfDay = new Date(data.date);\n    startOfDay.setHours(0, 0, 0, 0);\n    \n    const [newPresence] = await db.insert(staffPresence)\n      .values({\n        ...data,\n        date: startOfDay,\n        checkInTime: data.isPresent ? (data.checkInTime || new Date()) : undefined,\n        checkOutTime: data.checkOutTime || undefined\n      })\n      .returning();\n    return newPresence;\n  }\n\n  async markStaffPresent(staffId: string, clinicId: string): Promise<StaffPresence> {\n    const today = new Date();\n    return this.createOrUpdateStaffPresence(staffId, today, clinicId);\n  }\n\n  async updateStaffCheckout(staffId: string): Promise<StaffPresence | undefined> {\n    const today = new Date();\n    const startOfDay = new Date(today);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(today);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    const [updated] = await db.update(staffPresence)\n      .set({ \n        checkOutTime: new Date(),\n        updatedAt: new Date() \n      })\n      .where(and(\n        eq(staffPresence.staffId, staffId),\n        gte(staffPresence.date, startOfDay),\n        lte(staffPresence.date, endOfDay)\n      ))\n      .returning();\n    \n    return updated || undefined;\n  }\n\n  // Clinic Management\n  async createClinic(clinic: InsertClinic): Promise<Clinic> {\n    const [newClinic] = await db.insert(clinics)\n      .values(clinic)\n      .returning();\n    return newClinic;\n  }\n\n  async getAllClinics(): Promise<Clinic[]> {\n    return await db.select().from(clinics);\n  }\n\n  async getClinicById(id: string): Promise<Clinic | null> {\n    const [clinic] = await db.select().from(clinics).where(eq(clinics.id, id));\n    return clinic || null;\n  }\n\n  async updateClinic(id: string, clinic: Partial<InsertClinic>): Promise<Clinic | null> {\n    const [updated] = await db.update(clinics)\n      .set({ ...clinic, updatedAt: new Date() })\n      .where(eq(clinics.id, id))\n      .returning();\n    return updated || null;\n  }\n\n  async deleteClinic(id: string): Promise<boolean> {\n    const result = await db.delete(clinics)\n      .where(eq(clinics.id, id));\n    return result.rowCount > 0;\n  }\n\n  async getClinicUserCount(clinicId: string): Promise<number> {\n    const [result] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(users)\n      .where(eq(users.clinicId, clinicId));\n    return result.count;\n  }\n\n  async getClinicStats(clinicId: string): Promise<{\n    totalUsers: number;\n    totalAppointments: number;\n    totalMedicines: number;\n    activeStaff: number;\n  }> {\n    const [userCount] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(users)\n      .where(eq(users.clinicId, clinicId));\n\n    const [appointmentCount] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(appointments)\n      .where(eq(appointments.clinicId, clinicId));\n\n    const [medicineCount] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(medicines)\n      .where(eq(medicines.clinicId, clinicId));\n\n    const [activeStaffCount] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(users)\n      .where(and(\n        eq(users.clinicId, clinicId),\n        eq(users.isActive, true),\n        sql`${users.role} IN ('staff', 'doctor')`\n      ));\n\n    return {\n      totalUsers: userCount.count,\n      totalAppointments: appointmentCount.count,\n      totalMedicines: medicineCount.count,\n      activeStaff: activeStaffCount.count\n    };\n  }\n\n  // Clinic-specific data methods\n\n  async getAppointmentsByClinic(clinicId: string): Promise<(Appointment & { patient: User; doctor: User })[]> {\n    return await db.select({\n      id: appointments.id,\n      patientId: appointments.patientId,\n      doctorId: appointments.doctorId,\n      clinicId: appointments.clinicId,\n      appointmentDate: appointments.appointmentDate,\n      duration: appointments.duration,\n      type: appointments.type,\n      status: appointments.status,\n      location: appointments.location,\n      notes: appointments.notes,\n      symptoms: appointments.symptoms,\n      diagnosis: appointments.diagnosis,\n      treatmentPlan: appointments.treatmentPlan,\n      isDelayed: appointments.isDelayed,\n      delayMinutes: appointments.delayMinutes,\n      delayReason: appointments.delayReason,\n      createdAt: appointments.createdAt,\n      updatedAt: appointments.updatedAt,\n      patient: {\n        id: sql`${users.id}`.as('patient_id'),\n        phoneNumber: sql`${users.phoneNumber}`.as('patient_phone'),\n        role: sql`${users.role}`.as('patient_role'),\n        firstName: sql`${users.firstName}`.as('patient_first_name'),\n        lastName: sql`${users.lastName}`.as('patient_last_name'),\n        email: sql`${users.email}`.as('patient_email'),\n        dateOfBirth: sql`${users.dateOfBirth}`.as('patient_dob'),\n        address: sql`${users.address}`.as('patient_address'),\n        emergencyContact: sql`${users.emergencyContact}`.as('patient_emergency'),\n        clinicId: sql`${users.clinicId}`.as('patient_clinic_id'),\n        isActive: sql`${users.isActive}`.as('patient_is_active'),\n        isApproved: sql`${users.isApproved}`.as('patient_is_approved'),\n        createdAt: sql`${users.createdAt}`.as('patient_created_at'),\n        updatedAt: sql`${users.updatedAt}`.as('patient_updated_at')\n      },\n      doctor: {\n        id: sql`doctor.id`.as('doctor_id'),\n        phoneNumber: sql`doctor.phone_number`.as('doctor_phone'),\n        role: sql`doctor.role`.as('doctor_role'),\n        firstName: sql`doctor.first_name`.as('doctor_first_name'),\n        lastName: sql`doctor.last_name`.as('doctor_last_name'),\n        email: sql`doctor.email`.as('doctor_email'),\n        dateOfBirth: sql`doctor.date_of_birth`.as('doctor_dob'),\n        address: sql`doctor.address`.as('doctor_address'),\n        emergencyContact: sql`doctor.emergency_contact`.as('doctor_emergency'),\n        clinicId: sql`doctor.clinic_id`.as('doctor_clinic_id'),\n        isActive: sql`doctor.is_active`.as('doctor_is_active'),\n        isApproved: sql`doctor.is_approved`.as('doctor_is_approved'),\n        createdAt: sql`doctor.created_at`.as('doctor_created_at'),\n        updatedAt: sql`doctor.updated_at`.as('doctor_updated_at')\n      }\n    })\n    .from(appointments)\n    .leftJoin(users, eq(appointments.patientId, users.id))\n    .leftJoin(sql`${users} as doctor`, sql`${appointments.doctorId} = doctor.id`)\n    .where(eq(appointments.clinicId, clinicId))\n    .orderBy(desc(appointments.appointmentDate)) as any;\n  }\n\n  async getUsersByClinic(clinicId: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.clinicId, clinicId));\n  }\n\n  async getPatientsByClinic(clinicId: string): Promise<User[]> {\n    return await db.select().from(users)\n      .where(and(eq(users.clinicId, clinicId), eq(users.role, 'patient')));\n  }\n\n  async getQueueTokensByClinic(clinicId: string): Promise<(QueueToken & { patient: User; doctor: User })[]> {\n    const tokens = await db\n      .select()\n      .from(queueTokens)\n      .where(eq(queueTokens.clinicId, clinicId))\n      .orderBy(asc(queueTokens.tokenNumber));\n\n    // Get patient and doctor details separately\n    const enrichedTokens = [];\n    for (const token of tokens) {\n      const patient = await this.getUser(token.patientId);\n      const doctor = await this.getUser(token.doctorId);\n      \n      if (patient && doctor) {\n        enrichedTokens.push({\n          ...token,\n          patient,\n          doctor\n        });\n      }\n    }\n    \n    return enrichedTokens as (QueueToken & { patient: User; doctor: User })[];\n  }\n\n  async getActiveStaffCountByClinic(clinicId: string): Promise<number> {\n    const [result] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(users)\n      .where(and(\n        eq(users.clinicId, clinicId),\n        eq(users.isActive, true),\n        sql`${users.role} IN ('staff', 'doctor', 'admin')`\n      ));\n    return result.count;\n  }\n\n  // Temporary Signup Data Storage (in-memory for development)\n  private tempSignupData: Map<string, any> = new Map();\n\n  async storeTempSignupData(email: string, data: any): Promise<void> {\n    // Store with expiration (10 minutes)\n    const expirationTime = Date.now() + 10 * 60 * 1000;\n    this.tempSignupData.set(email, { ...data, expiresAt: expirationTime });\n  }\n\n  async getTempSignupData(email: string): Promise<any> {\n    const data = this.tempSignupData.get(email);\n    if (!data) return null;\n    \n    // Check if expired\n    if (Date.now() > data.expiresAt) {\n      this.tempSignupData.delete(email);\n      return null;\n    }\n    \n    return data;\n  }\n\n  async deleteTempSignupData(email: string): Promise<void> {\n    this.tempSignupData.delete(email);\n  }\n\n  // Emergency Requests Implementation\n  async createEmergencyRequest(request: InsertEmergencyRequest): Promise<EmergencyRequest> {\n    const [newRequest] = await db.insert(emergencyRequests).values(request).returning();\n    return newRequest;\n  }\n\n  async getEmergencyRequest(id: string): Promise<EmergencyRequest | undefined> {\n    const [request] = await db.select().from(emergencyRequests).where(eq(emergencyRequests.id, id));\n    return request || undefined;\n  }\n\n  async getEmergencyRequestsForClinic(clinicId: string): Promise<(EmergencyRequest & { patient: User })[]> {\n    return await db.select({\n      id: emergencyRequests.id,\n      patientId: emergencyRequests.patientId,\n      doctorId: emergencyRequests.doctorId,\n      clinicId: emergencyRequests.clinicId,\n      urgencyLevel: emergencyRequests.urgencyLevel,\n      symptoms: emergencyRequests.symptoms,\n      contactMethod: emergencyRequests.contactMethod,\n      location: emergencyRequests.location,\n      notes: emergencyRequests.notes,\n      status: emergencyRequests.status,\n      acknowledgedAt: emergencyRequests.acknowledgedAt,\n      resolvedAt: emergencyRequests.resolvedAt,\n      createdAt: emergencyRequests.createdAt,\n      updatedAt: emergencyRequests.updatedAt,\n      patient: users\n    })\n    .from(emergencyRequests)\n    .innerJoin(users, eq(emergencyRequests.patientId, users.id))\n    .where(eq(emergencyRequests.clinicId, clinicId))\n    .orderBy(desc(emergencyRequests.createdAt));\n  }\n\n  async getEmergencyRequestsForPatient(patientId: string): Promise<(EmergencyRequest & { doctor?: User })[]> {\n    return await db.select({\n      id: emergencyRequests.id,\n      patientId: emergencyRequests.patientId,\n      doctorId: emergencyRequests.doctorId,\n      clinicId: emergencyRequests.clinicId,\n      urgencyLevel: emergencyRequests.urgencyLevel,\n      symptoms: emergencyRequests.symptoms,\n      contactMethod: emergencyRequests.contactMethod,\n      location: emergencyRequests.location,\n      notes: emergencyRequests.notes,\n      status: emergencyRequests.status,\n      acknowledgedAt: emergencyRequests.acknowledgedAt,\n      resolvedAt: emergencyRequests.resolvedAt,\n      createdAt: emergencyRequests.createdAt,\n      updatedAt: emergencyRequests.updatedAt,\n      doctor: users\n    })\n    .from(emergencyRequests)\n    .leftJoin(users, eq(emergencyRequests.doctorId, users.id))\n    .where(eq(emergencyRequests.patientId, patientId))\n    .orderBy(desc(emergencyRequests.createdAt));\n  }\n\n  async updateEmergencyRequestStatus(id: string, status: string, doctorId?: string): Promise<EmergencyRequest | undefined> {\n    const updates: any = { \n      status, \n      updatedAt: new Date() \n    };\n    \n    if (status === 'acknowledged') {\n      updates.acknowledgedAt = new Date();\n    }\n    \n    if (status === 'resolved') {\n      updates.resolvedAt = new Date();\n    }\n    \n    if (doctorId) {\n      updates.doctorId = doctorId;\n    }\n\n    const [updatedRequest] = await db.update(emergencyRequests)\n      .set(updates)\n      .where(eq(emergencyRequests.id, id))\n      .returning();\n    return updatedRequest || undefined;\n  }\n\n  async getActiveEmergencyRequests(): Promise<(EmergencyRequest & { patient: User; doctor?: User })[]> {\n    return await db.select({\n      id: emergencyRequests.id,\n      patientId: emergencyRequests.patientId,\n      doctorId: emergencyRequests.doctorId,\n      clinicId: emergencyRequests.clinicId,\n      urgencyLevel: emergencyRequests.urgencyLevel,\n      symptoms: emergencyRequests.symptoms,\n      contactMethod: emergencyRequests.contactMethod,\n      location: emergencyRequests.location,\n      notes: emergencyRequests.notes,\n      status: emergencyRequests.status,\n      acknowledgedAt: emergencyRequests.acknowledgedAt,\n      resolvedAt: emergencyRequests.resolvedAt,\n      createdAt: emergencyRequests.createdAt,\n      updatedAt: emergencyRequests.updatedAt,\n      patient: {\n        id: sql`patient.id`,\n        firstName: sql`patient.first_name`,\n        lastName: sql`patient.last_name`,\n        phoneNumber: sql`patient.phone_number`,\n        email: sql`patient.email`,\n        role: sql`patient.role`,\n        dateOfBirth: sql`patient.date_of_birth`,\n        address: sql`patient.address`,\n        emergencyContact: sql`patient.emergency_contact`,\n        clinicId: sql`patient.clinic_id`,\n        isActive: sql`patient.is_active`,\n        isApproved: sql`patient.is_approved`,\n        createdAt: sql`patient.created_at`,\n        updatedAt: sql`patient.updated_at`\n      },\n      doctor: {\n        id: sql`doctor.id`,\n        firstName: sql`doctor.first_name`,\n        lastName: sql`doctor.last_name`,\n        phoneNumber: sql`doctor.phone_number`,\n        email: sql`doctor.email`,\n        role: sql`doctor.role`,\n        dateOfBirth: sql`doctor.date_of_birth`,\n        address: sql`doctor.address`,\n        emergencyContact: sql`doctor.emergency_contact`,\n        clinicId: sql`doctor.clinic_id`,\n        isActive: sql`doctor.is_active`,\n        isApproved: sql`doctor.is_approved`,\n        createdAt: sql`doctor.created_at`,\n        updatedAt: sql`doctor.updated_at`\n      }\n    })\n    .from(emergencyRequests)\n    .innerJoin(sql`${users} AS patient`, sql`${emergencyRequests.patientId} = patient.id`)\n    .leftJoin(sql`${users} AS doctor`, sql`${emergencyRequests.doctorId} = doctor.id`)\n    .where(sql`${emergencyRequests.status} IN ('pending', 'acknowledged', 'in_progress')`)\n    .orderBy(desc(emergencyRequests.createdAt));\n  }\n\n  // Clinic hours validation method\n  async isWithinClinicHours(clinicId: string, dateTime: Date): Promise<boolean> {\n    const clinic = await this.getClinicById(clinicId);\n    if (!clinic) return false;\n\n    const dayOfWeek = dateTime.getDay(); // 0 = Sunday, 1 = Monday, etc.\n    const timeString = dateTime.toTimeString().substring(0, 5); // \"HH:MM\"\n    \n    // Map day of week to clinic hours format\n    const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n    const dayName = dayNames[dayOfWeek];\n    \n    const hours = clinic.operatingHours as any;\n    if (!hours || !hours[dayName]) return false;\n    \n    const dayHours = hours[dayName];\n    if (!dayHours.isOpen) return false;\n    \n    return timeString >= dayHours.start && timeString <= dayHours.end;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":86667},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, real, jsonb, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum(\"user_role\", [\"super_admin\", \"admin\", \"staff\", \"doctor\", \"nurse\", \"patient\"]);\nexport const appointmentStatusEnum = pgEnum(\"appointment_status\", [\"scheduled\", \"confirmed\", \"in_progress\", \"completed\", \"cancelled\", \"no_show\", \"pending_approval\"]);\nexport const appointmentTypeEnum = pgEnum(\"appointment_type\", [\"clinic\", \"home_visit\", \"telehealth\"]);\nexport const queueStatusEnum = pgEnum(\"queue_status\", [\"waiting\", \"called\", \"in_progress\", \"completed\", \"missed\"]);\nexport const medicineFrequencyEnum = pgEnum(\"medicine_frequency\", [\"once_daily\", \"twice_daily\", \"three_times_daily\", \"four_times_daily\", \"as_needed\", \"weekly\", \"monthly\"]);\nexport const prescriptionStatusEnum = pgEnum(\"prescription_status\", [\"active\", \"completed\", \"cancelled\", \"paused\"]);\nexport const clinicStatusEnum = pgEnum(\"clinic_status\", [\"active\", \"inactive\", \"suspended\"]);\n\n// Clinics table\nexport const clinics = pgTable(\"clinics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\").notNull(),\n  phoneNumber: varchar(\"phone_number\", { length: 20 }),\n  email: varchar(\"email\", { length: 255 }),\n  status: clinicStatusEnum(\"status\").notNull().default(\"active\"),\n  latitude: real(\"latitude\"),\n  longitude: real(\"longitude\"),\n  workingHours: jsonb(\"working_hours\"), // JSON object with days and hours\n  description: text(\"description\"),\n  licenseNumber: text(\"license_number\"),\n  establishedDate: timestamp(\"established_date\"),\n  capacity: integer(\"capacity\").default(50), // maximum patients per day\n  isMainBranch: boolean(\"is_main_branch\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`NOW()`),\n});\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  phoneNumber: varchar(\"phone_number\", { length: 20 }).unique(),\n  role: userRoleEnum(\"role\").notNull().default(\"patient\"),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  email: varchar(\"email\", { length: 255 }),\n  password: text(\"password\"), // Hashed password for email authentication\n  firebaseUid: varchar(\"firebase_uid\", { length: 255 }).unique(), // Firebase authentication UID\n  authProvider: varchar(\"auth_provider\", { length: 50 }).default(\"phone\"), // 'phone', 'email', 'google'\n  dateOfBirth: timestamp(\"date_of_birth\"),\n  address: text(\"address\"),\n  emergencyContact: text(\"emergency_contact\"),\n  clinicId: varchar(\"clinic_id\").references(() => clinics.id), // Users can be associated with a clinic\n  isActive: boolean(\"is_active\").notNull().default(true),\n  isApproved: boolean(\"is_approved\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`NOW()`),\n});\n\n// OTP sessions table\nexport const otpSessions = pgTable(\"otp_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  phoneNumber: varchar(\"phone_number\", { length: 20 }).notNull(),\n  otpHash: text(\"otp_hash\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  attempts: integer(\"attempts\").notNull().default(0),\n  isUsed: boolean(\"is_used\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n});\n\n// Email OTP sessions table\nexport const emailOtpSessions = pgTable(\"email_otp_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\", { length: 255 }).notNull(),\n  otpHash: text(\"otp_hash\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  attempts: integer(\"attempts\").notNull().default(0),\n  isUsed: boolean(\"is_used\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n});\n\n// Auth sessions table\nexport const authSessions = pgTable(\"auth_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  token: text(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  lastActivity: timestamp(\"last_activity\").notNull().default(sql`NOW()`),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n});\n\n// Staff GPS verification table\nexport const staffVerifications = pgTable(\"staff_verifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  staffId: varchar(\"staff_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  clinicId: varchar(\"clinic_id\").notNull().references(() => clinics.id, { onDelete: \"cascade\" }),\n  latitude: real(\"latitude\").notNull(),\n  longitude: real(\"longitude\").notNull(),\n  checkedInAt: timestamp(\"checked_in_at\").notNull().default(sql`NOW()`),\n  checkedOutAt: timestamp(\"checked_out_at\"),\n  workLocation: text(\"work_location\").notNull(),\n  isValid: boolean(\"is_valid\").notNull().default(true),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n});\n\n// Staff daily presence tracking table\nexport const staffPresence = pgTable(\"staff_presence\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  staffId: varchar(\"staff_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  clinicId: varchar(\"clinic_id\").notNull().references(() => clinics.id, { onDelete: \"cascade\" }),\n  date: timestamp(\"date\").notNull(),\n  isPresent: boolean(\"is_present\").notNull().default(false),\n  checkInTime: timestamp(\"check_in_time\"),\n  checkOutTime: timestamp(\"check_out_time\"),\n  markedByAdmin: boolean(\"marked_by_admin\").notNull().default(false),\n  adminId: varchar(\"admin_id\").references(() => users.id),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`NOW()`),\n});\n\n// Appointments table\nexport const appointments = pgTable(\"appointments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  doctorId: varchar(\"doctor_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  clinicId: varchar(\"clinic_id\").notNull().references(() => clinics.id, { onDelete: \"cascade\" }),\n  appointmentDate: timestamp(\"appointment_date\").notNull(),\n  duration: integer(\"duration\").notNull().default(30), // minutes\n  type: appointmentTypeEnum(\"type\").notNull().default(\"clinic\"),\n  status: appointmentStatusEnum(\"status\").notNull().default(\"scheduled\"),\n  location: text(\"location\"),\n  notes: text(\"notes\"),\n  symptoms: text(\"symptoms\"),\n  diagnosis: text(\"diagnosis\"),\n  treatmentPlan: text(\"treatment_plan\"),\n  isDelayed: boolean(\"is_delayed\").notNull().default(false),\n  delayMinutes: integer(\"delay_minutes\").default(0),\n  delayReason: text(\"delay_reason\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`NOW()`),\n});\n\n// Queue management table\nexport const queueTokens = pgTable(\"queue_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tokenNumber: integer(\"token_number\").notNull(),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  doctorId: varchar(\"doctor_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  clinicId: varchar(\"clinic_id\").notNull().references(() => clinics.id, { onDelete: \"cascade\" }),\n  appointmentId: varchar(\"appointment_id\").references(() => appointments.id, { onDelete: \"cascade\" }),\n  status: queueStatusEnum(\"status\").notNull().default(\"waiting\"),\n  estimatedWaitTime: integer(\"estimated_wait_time\").default(0), // minutes\n  calledAt: timestamp(\"called_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  priority: integer(\"priority\").notNull().default(1), // 1=normal, 2=urgent, 3=emergency\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n});\n\n// Medicines table\nexport const medicines = pgTable(\"medicines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  dosageForm: text(\"dosage_form\").notNull(), // tablet, capsule, syrup, etc.\n  strength: text(\"strength\"), // 500mg, 10ml, etc.\n  manufacturer: text(\"manufacturer\"),\n  clinicId: varchar(\"clinic_id\").notNull().references(() => clinics.id, { onDelete: \"cascade\" }),\n  stock: integer(\"stock\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n});\n\n// Prescriptions table\nexport const prescriptions = pgTable(\"prescriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  doctorId: varchar(\"doctor_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  medicineId: varchar(\"medicine_id\").notNull().references(() => medicines.id, { onDelete: \"cascade\" }),\n  appointmentId: varchar(\"appointment_id\").references(() => appointments.id, { onDelete: \"cascade\" }),\n  dosage: text(\"dosage\").notNull(),\n  frequency: medicineFrequencyEnum(\"frequency\").notNull(),\n  timings: text(\"timings\").array(), // Custom timing schedules like [\"08:00\", \"14:00\", \"20:00\"]\n  instructions: text(\"instructions\"),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\"),\n  totalDoses: integer(\"total_doses\"),\n  completedDoses: integer(\"completed_doses\").notNull().default(0),\n  status: prescriptionStatusEnum(\"status\").notNull().default(\"active\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`NOW()`),\n});\n\n// Medicine reminders table\nexport const medicineReminders = pgTable(\"medicine_reminders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  prescriptionId: varchar(\"prescription_id\").notNull().references(() => prescriptions.id, { onDelete: \"cascade\" }),\n  scheduledAt: timestamp(\"scheduled_at\").notNull(),\n  takenAt: timestamp(\"taken_at\"),\n  skippedAt: timestamp(\"skipped_at\"),\n  isTaken: boolean(\"is_taken\").notNull().default(false),\n  isSkipped: boolean(\"is_skipped\").notNull().default(false),\n  smsReminderSent: boolean(\"sms_reminder_sent\").notNull().default(false),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n});\n\n// Doctor delay notifications table\nexport const delayNotifications = pgTable(\"delay_notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  doctorId: varchar(\"doctor_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  delayMinutes: integer(\"delay_minutes\").notNull(),\n  reason: text(\"reason\"),\n  affectedPatientsCount: integer(\"affected_patients_count\").notNull().default(0),\n  notificationsSent: integer(\"notifications_sent\").notNull().default(0),\n  isResolved: boolean(\"is_resolved\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n  resolvedAt: timestamp(\"resolved_at\"),\n});\n\n// Patient feedback table\nexport const patientFeedback = pgTable(\"patient_feedback\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  appointmentId: varchar(\"appointment_id\").references(() => appointments.id, { onDelete: \"set null\" }),\n  rating: integer(\"rating\").notNull(), // 1-5 star rating\n  categories: text(\"categories\").array().notNull(), // [\"service\", \"wait_time\", \"staff\", \"cleanliness\", \"overall\"]\n  comment: text(\"comment\"), // Changed from comments to comment to match API\n  isAnonymous: boolean(\"is_anonymous\").notNull().default(false),\n  isRead: boolean(\"is_read\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n});\n\n// Emergency requests table\nexport const emergencyRequests = pgTable(\"emergency_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  doctorId: varchar(\"doctor_id\").references(() => users.id, { onDelete: \"set null\" }),\n  clinicId: varchar(\"clinic_id\").notNull().references(() => clinics.id, { onDelete: \"cascade\" }),\n  urgencyLevel: varchar(\"urgency_level\").notNull(), // low, medium, high, critical\n  symptoms: text(\"symptoms\").notNull(),\n  contactMethod: varchar(\"contact_method\").notNull(), // call_doctor, ambulance, home_visit, video_call\n  location: text(\"location\"),\n  notes: text(\"notes\"),\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, acknowledged, in_progress, resolved, cancelled\n  acknowledgedAt: timestamp(\"acknowledged_at\"),\n  resolvedAt: timestamp(\"resolved_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`NOW()`),\n});\n\n// Home visits table\nexport const homeVisits = pgTable(\"home_visits\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  appointmentId: varchar(\"appointment_id\").notNull().references(() => appointments.id, { onDelete: \"cascade\" }),\n  doctorId: varchar(\"doctor_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  address: text(\"address\").notNull(),\n  latitude: real(\"latitude\"),\n  longitude: real(\"longitude\"),\n  travelStartTime: timestamp(\"travel_start_time\"),\n  arrivalTime: timestamp(\"arrival_time\"),\n  departureTime: timestamp(\"departure_time\"),\n  travelEndTime: timestamp(\"travel_end_time\"),\n  distance: real(\"distance\"), // in kilometers\n  travelDuration: integer(\"travel_duration\"), // in minutes\n  visitNotes: text(\"visit_notes\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n});\n\n// Medical history table\nexport const medicalHistory = pgTable(\"medical_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  appointmentId: varchar(\"appointment_id\").references(() => appointments.id, { onDelete: \"cascade\" }),\n  doctorId: varchar(\"doctor_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  condition: text(\"condition\").notNull(),\n  symptoms: text(\"symptoms\"),\n  diagnosis: text(\"diagnosis\"),\n  treatment: text(\"treatment\"),\n  medications: jsonb(\"medications\"),\n  allergies: text(\"allergies\"),\n  vitalSigns: jsonb(\"vital_signs\"), // blood pressure, heart rate, etc.\n  labResults: jsonb(\"lab_results\"),\n  notes: text(\"notes\"),\n  recordDate: timestamp(\"record_date\").notNull().default(sql`NOW()`),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`NOW()`),\n});\n\n// Relations\nexport const clinicsRelations = relations(clinics, ({ many }) => ({\n  users: many(users),\n  appointments: many(appointments),\n  queueTokens: many(queueTokens),\n  staffVerifications: many(staffVerifications),\n  staffPresence: many(staffPresence),\n  medicines: many(medicines),\n}));\n\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  clinic: one(clinics, { fields: [users.clinicId], references: [clinics.id] }),\n  authSessions: many(authSessions),\n  staffVerifications: many(staffVerifications),\n  staffPresence: many(staffPresence),\n  patientAppointments: many(appointments, { relationName: \"patient_appointments\" }),\n  doctorAppointments: many(appointments, { relationName: \"doctor_appointments\" }),\n  patientQueueTokens: many(queueTokens, { relationName: \"patient_queue_tokens\" }),\n  doctorQueueTokens: many(queueTokens, { relationName: \"doctor_queue_tokens\" }),\n  patientPrescriptions: many(prescriptions, { relationName: \"patient_prescriptions\" }),\n  doctorPrescriptions: many(prescriptions, { relationName: \"doctor_prescriptions\" }),\n  delayNotifications: many(delayNotifications),\n  patientHomeVisits: many(homeVisits, { relationName: \"patient_home_visits\" }),\n  doctorHomeVisits: many(homeVisits, { relationName: \"doctor_home_visits\" }),\n  medicalHistory: many(medicalHistory),\n}));\n\nexport const authSessionsRelations = relations(authSessions, ({ one }) => ({\n  user: one(users, { fields: [authSessions.userId], references: [users.id] }),\n}));\n\nexport const staffVerificationsRelations = relations(staffVerifications, ({ one }) => ({\n  staff: one(users, { fields: [staffVerifications.staffId], references: [users.id] }),\n  clinic: one(clinics, { fields: [staffVerifications.clinicId], references: [clinics.id] }),\n}));\n\nexport const staffPresenceRelations = relations(staffPresence, ({ one }) => ({\n  staff: one(users, { fields: [staffPresence.staffId], references: [users.id] }),\n  admin: one(users, { fields: [staffPresence.adminId], references: [users.id] }),\n  clinic: one(clinics, { fields: [staffPresence.clinicId], references: [clinics.id] }),\n}));\n\nexport const appointmentsRelations = relations(appointments, ({ one, many }) => ({\n  patient: one(users, { fields: [appointments.patientId], references: [users.id], relationName: \"patient_appointments\" }),\n  doctor: one(users, { fields: [appointments.doctorId], references: [users.id], relationName: \"doctor_appointments\" }),\n  clinic: one(clinics, { fields: [appointments.clinicId], references: [clinics.id] }),\n  queueTokens: many(queueTokens),\n  prescriptions: many(prescriptions),\n  homeVisits: many(homeVisits),\n  medicalHistory: many(medicalHistory),\n}));\n\nexport const queueTokensRelations = relations(queueTokens, ({ one }) => ({\n  patient: one(users, { fields: [queueTokens.patientId], references: [users.id], relationName: \"patient_queue_tokens\" }),\n  doctor: one(users, { fields: [queueTokens.doctorId], references: [users.id], relationName: \"doctor_queue_tokens\" }),\n  clinic: one(clinics, { fields: [queueTokens.clinicId], references: [clinics.id] }),\n  appointment: one(appointments, { fields: [queueTokens.appointmentId], references: [appointments.id] }),\n}));\n\nexport const medicinesRelations = relations(medicines, ({ one, many }) => ({\n  clinic: one(clinics, { fields: [medicines.clinicId], references: [clinics.id] }),\n  prescriptions: many(prescriptions),\n}));\n\nexport const prescriptionsRelations = relations(prescriptions, ({ one, many }) => ({\n  patient: one(users, { fields: [prescriptions.patientId], references: [users.id], relationName: \"patient_prescriptions\" }),\n  doctor: one(users, { fields: [prescriptions.doctorId], references: [users.id], relationName: \"doctor_prescriptions\" }),\n  medicine: one(medicines, { fields: [prescriptions.medicineId], references: [medicines.id] }),\n  appointment: one(appointments, { fields: [prescriptions.appointmentId], references: [appointments.id] }),\n  reminders: many(medicineReminders),\n}));\n\nexport const medicineRemindersRelations = relations(medicineReminders, ({ one }) => ({\n  prescription: one(prescriptions, { fields: [medicineReminders.prescriptionId], references: [prescriptions.id] }),\n}));\n\nexport const delayNotificationsRelations = relations(delayNotifications, ({ one }) => ({\n  doctor: one(users, { fields: [delayNotifications.doctorId], references: [users.id] }),\n}));\n\nexport const homeVisitsRelations = relations(homeVisits, ({ one }) => ({\n  appointment: one(appointments, { fields: [homeVisits.appointmentId], references: [appointments.id] }),\n  doctor: one(users, { fields: [homeVisits.doctorId], references: [users.id], relationName: \"doctor_home_visits\" }),\n  patient: one(users, { fields: [homeVisits.patientId], references: [users.id], relationName: \"patient_home_visits\" }),\n}));\n\nexport const medicalHistoryRelations = relations(medicalHistory, ({ one }) => ({\n  patient: one(users, { fields: [medicalHistory.patientId], references: [users.id] }),\n  doctor: one(users, { fields: [medicalHistory.doctorId], references: [users.id] }),\n  appointment: one(appointments, { fields: [medicalHistory.appointmentId], references: [appointments.id] }),\n}));\n\nexport const emergencyRequestsRelations = relations(emergencyRequests, ({ one }) => ({\n  patient: one(users, { fields: [emergencyRequests.patientId], references: [users.id] }),\n  doctor: one(users, { fields: [emergencyRequests.doctorId], references: [users.id] }),\n  clinic: one(clinics, { fields: [emergencyRequests.clinicId], references: [clinics.id] }),\n}));\n\n// Insert schemas\nexport const insertClinicSchema = createInsertSchema(clinics).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  // Allow dateOfBirth to accept string input and convert to Date, handle empty strings\n  dateOfBirth: z.union([\n    z.date(),\n    z.string().transform((str) => {\n      if (!str || str.trim() === '') return null;\n      const date = new Date(str);\n      return isNaN(date.getTime()) ? null : date;\n    }),\n    z.null(),\n    z.undefined()\n  ]).optional()\n});\n\nexport const insertOtpSessionSchema = createInsertSchema(otpSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEmailOtpSessionSchema = createInsertSchema(emailOtpSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAuthSessionSchema = createInsertSchema(authSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStaffVerificationSchema = createInsertSchema(staffVerifications).omit({\n  id: true,\n  checkedInAt: true,\n});\n\nexport const insertStaffPresenceSchema = createInsertSchema(staffPresence).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertQueueTokenSchema = createInsertSchema(queueTokens).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMedicineSchema = createInsertSchema(medicines).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPrescriptionSchema = createInsertSchema(prescriptions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMedicineReminderSchema = createInsertSchema(medicineReminders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDelayNotificationSchema = createInsertSchema(delayNotifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertHomeVisitSchema = createInsertSchema(homeVisits).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMedicalHistorySchema = createInsertSchema(medicalHistory).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPatientFeedbackSchema = createInsertSchema(patientFeedback).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  patientId: z.string().nullable().optional(),\n});\n\nexport const insertEmergencyRequestSchema = createInsertSchema(emergencyRequests).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type Clinic = typeof clinics.$inferSelect;\nexport type InsertClinic = z.infer<typeof insertClinicSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type OtpSession = typeof otpSessions.$inferSelect;\nexport type InsertOtpSession = z.infer<typeof insertOtpSessionSchema>;\nexport type EmailOtpSession = typeof emailOtpSessions.$inferSelect;\nexport type InsertEmailOtpSession = z.infer<typeof insertEmailOtpSessionSchema>;\nexport type AuthSession = typeof authSessions.$inferSelect;\nexport type InsertAuthSession = z.infer<typeof insertAuthSessionSchema>;\nexport type StaffVerification = typeof staffVerifications.$inferSelect;\nexport type InsertStaffVerification = z.infer<typeof insertStaffVerificationSchema>;\nexport type StaffPresence = typeof staffPresence.$inferSelect;\nexport type InsertStaffPresence = z.infer<typeof insertStaffPresenceSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type QueueToken = typeof queueTokens.$inferSelect;\nexport type InsertQueueToken = z.infer<typeof insertQueueTokenSchema>;\nexport type Medicine = typeof medicines.$inferSelect;\nexport type InsertMedicine = z.infer<typeof insertMedicineSchema>;\nexport type Prescription = typeof prescriptions.$inferSelect;\nexport type InsertPrescription = z.infer<typeof insertPrescriptionSchema>;\nexport type MedicineReminder = typeof medicineReminders.$inferSelect;\nexport type InsertMedicineReminder = z.infer<typeof insertMedicineReminderSchema>;\nexport type DelayNotification = typeof delayNotifications.$inferSelect;\nexport type InsertDelayNotification = z.infer<typeof insertDelayNotificationSchema>;\nexport type HomeVisit = typeof homeVisits.$inferSelect;\nexport type InsertHomeVisit = z.infer<typeof insertHomeVisitSchema>;\nexport type MedicalHistory = typeof medicalHistory.$inferSelect;\nexport type InsertMedicalHistory = z.infer<typeof insertMedicalHistorySchema>;\nexport type PatientFeedback = typeof patientFeedback.$inferSelect;\nexport type InsertPatientFeedback = z.infer<typeof insertPatientFeedbackSchema>;\nexport type EmergencyRequest = typeof emergencyRequests.$inferSelect;\nexport type InsertEmergencyRequest = z.infer<typeof insertEmergencyRequestSchema>;\n","size_bytes":25646},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport LoginPage from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport StaffCheckinPage from \"@/pages/staff-checkin\";\nimport ProfilePage from \"@/pages/profile\";\nimport SettingsPage from \"@/pages/settings\";\nimport MedicinesPage from \"@/pages/medicines\";\nimport PatientBooking from \"@/pages/patient-booking-new\";\nimport PatientLogin from \"@/pages/patient-login\";\nimport PatientSignup from \"@/pages/patient-signup\";\nimport LiveQueueTracker from \"@/pages/live-queue\";\nimport ClinicManagement from \"@/pages/clinic-management\";\nimport ClinicAdminDashboard from \"@/pages/clinic-admin-dashboard\";\nimport Homepage from \"@/pages/homepage\";\nimport NotFound from \"@/pages/not-found\";\n\n// User interface for type safety\ninterface User {\n  id: string;\n  role: string;\n  firstName?: string;\n  lastName?: string;\n  email?: string;\n  phoneNumber: string;\n  isActive: boolean;\n}\n\n// Super Admin Protection Component - Only for soham.banerjee@iiitb.ac.in\nfunction SuperAdminRoute({ children }: { children: React.ReactNode }) {\n  const token = localStorage.getItem('auth_token');\n  const [loading, setLoading] = useState(true);\n\n  // Get current user info\n  const { data: authResponse, isLoading, error } = useQuery<{ user: User }>({\n    queryKey: ['/api/auth/me'],\n    enabled: !!token,\n    retry: false,\n  });\n  \n  const currentUser = authResponse?.user;\n\n  useEffect(() => {\n    // Handle authentication errors - be smart about redirects based on user context\n    if (error || (!isLoading && !currentUser && token)) {\n      localStorage.removeItem('auth_token');\n      localStorage.removeItem('user');\n      \n      // Check if this might be a patient trying to access their dashboard\n      const storedUser = localStorage.getItem('user');\n      let userRole = null;\n      \n      try {\n        if (storedUser) {\n          userRole = JSON.parse(storedUser).role;\n        }\n      } catch (e) {\n        // Invalid user data, clear it\n        localStorage.removeItem('user');\n      }\n      \n      // Redirect based on last known role or route\n      if (window.location.pathname.includes('book-appointment') || \n          window.location.pathname.includes('patient') ||\n          (window.location.pathname === '/dashboard' && userRole === 'patient')) {\n        window.location.href = '/patient-login';\n      } else if (window.location.pathname.includes('admin') || userRole === 'admin') {\n        window.location.href = '/login';\n      } else if (userRole === 'staff' || userRole === 'doctor') {\n        window.location.href = '/login';\n      } else {\n        // Default redirect - try to be smart about it\n        window.location.href = \"/login\";\n      }\n      return;\n    }\n\n    // Update loading state\n    setLoading(isLoading);\n\n    // Handle no token\n    if (!token) {\n      window.location.href = '/login';\n      return;\n    }\n\n    // Check super admin access\n    if (currentUser) {\n      const AUTHORIZED_ADMIN_EMAIL = '44441100sf@gmail.com';\n      \n      if (currentUser.role !== 'admin' || currentUser.email !== AUTHORIZED_ADMIN_EMAIL) {\n        console.log('🔥 UNAUTHORIZED ADMIN ACCESS ATTEMPT:', {\n          email: currentUser.email,\n          role: currentUser.role,\n          authorized: AUTHORIZED_ADMIN_EMAIL\n        });\n        \n        // Redirect unauthorized users to appropriate dashboard\n        if (currentUser.role === 'staff' || currentUser.role === 'doctor') {\n          window.location.href = '/dashboard';\n        } else if (currentUser.role === 'patient') {\n          window.location.href = '/dashboard';\n        } else {\n          window.location.href = '/login';\n        }\n        return;\n      }\n      \n      localStorage.setItem('user', JSON.stringify(currentUser));\n    }\n  }, [token, currentUser, isLoading, error]);\n\n  // Show loading during authentication check\n  if (!token || loading || (!currentUser && !error)) {\n    return <div className=\"flex items-center justify-center min-h-screen\">Loading...</div>;\n  }\n\n  // Handle authentication errors\n  if (error || !currentUser) {\n    return null;\n  }\n\n  // Check if user is authorized super admin\n  const AUTHORIZED_ADMIN_EMAIL = '44441100sf@gmail.com';\n  if (currentUser.role !== 'admin' || currentUser.email !== AUTHORIZED_ADMIN_EMAIL) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">Access Denied</h1>\n          <p className=\"text-gray-600 mb-4\">You don't have permission to access this page.</p>\n          <button \n            onClick={() => window.location.href = '/dashboard'}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n          >\n            Go to Dashboard\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}\n\n// Route protection component\nfunction ProtectedRoute({ \n  children, \n  allowedRoles, \n  redirectTo = \"/login\" \n}: { \n  children: React.ReactNode;\n  allowedRoles?: string[];\n  redirectTo?: string;\n}) {\n  const token = localStorage.getItem('auth_token');\n  const [loading, setLoading] = useState(true);\n\n  // Get current user info\n  const { data: authResponse, isLoading, error } = useQuery<{ user: User }>({\n    queryKey: ['/api/auth/me'],\n    enabled: !!token,\n    retry: false,\n  });\n  \n  const currentUser = authResponse?.user;\n\n  useEffect(() => {\n    // Handle authentication errors\n    if (error || (!isLoading && !currentUser && token)) {\n      localStorage.removeItem('auth_token');\n      localStorage.removeItem('user');\n      \n      // Check if user data exists in localStorage to determine redirect\n      const storedUser = localStorage.getItem('user');\n      let userRole = null;\n      \n      try {\n        if (storedUser) {\n          userRole = JSON.parse(storedUser).role;\n        }\n      } catch (e) {\n        // Invalid user data, clear it\n        localStorage.removeItem('user');\n      }\n      \n      // Redirect based on last known role or route\n      if (window.location.pathname.includes('book-appointment') || \n          window.location.pathname.includes('patient') ||\n          (window.location.pathname === '/dashboard' && userRole === 'patient')) {\n        window.location.href = '/patient-login';\n      } else if (window.location.pathname.includes('admin') || userRole === 'admin') {\n        window.location.href = '/login';\n      } else if (userRole === 'staff' || userRole === 'doctor') {\n        window.location.href = '/login';\n      } else {\n        // Default redirect - try to be smart about it\n        window.location.href = \"/login\";\n      }\n      return;\n    }\n\n    // Update loading state\n    setLoading(isLoading);\n\n    // Handle no token - be smart about redirects\n    if (!token) {\n      // Check if this is a patient-specific route\n      if (window.location.pathname.includes('book-appointment') || \n          window.location.pathname.includes('patient')) {\n        window.location.href = '/patient-login';\n      } else if (window.location.pathname.includes('admin')) {\n        window.location.href = '/login';\n      } else if (window.location.pathname === '/dashboard') {\n        // For generic dashboard access, redirect to login selection\n        window.location.href = '/';\n      } else {\n        window.location.href = \"/login\";\n      }\n      return;\n    }\n\n    // Store user data when available\n    if (currentUser) {\n      localStorage.setItem('user', JSON.stringify(currentUser));\n    }\n  }, [token, currentUser, isLoading, error, redirectTo]);\n\n  useEffect(() => {\n    if (!loading && currentUser && allowedRoles && !allowedRoles.includes(currentUser.role)) {\n      // Redirect based on user role\n      if (currentUser.role === 'admin') {\n        window.location.href = '/admin-dashboard';\n      } else if (currentUser.role === 'staff' || currentUser.role === 'doctor') {\n        window.location.href = '/dashboard';\n      } else if (currentUser.role === 'patient') {\n        window.location.href = '/dashboard';\n      } else {\n        window.location.href = '/login';\n      }\n    }\n  }, [loading, currentUser, allowedRoles]);\n\n  // Show loading during authentication check\n  if (!token || loading || (!currentUser && !error)) {\n    return <div className=\"flex items-center justify-center min-h-screen\">Loading...</div>;\n  }\n\n  // Handle authentication errors\n  if (error || !currentUser) {\n    return null;\n  }\n\n  // Handle unauthorized role access\n  if (allowedRoles && !allowedRoles.includes(currentUser.role)) {\n    return null;\n  }\n\n  return <>{children}</>;\n}\n\n// Public route component (no auth required)\nfunction PublicRoute({ children }: { children: React.ReactNode }) {\n  return <>{children}</>;\n}\n\nconst AppRouter = () => {\n  return (\n    <Switch>\n      {/* Public routes - no auth required */}\n      <Route path=\"/login\">{() => <PublicRoute><LoginPage /></PublicRoute>}</Route>\n      <Route path=\"/patient-login\">{() => <PublicRoute><PatientLogin /></PublicRoute>}</Route>\n      <Route path=\"/patient-signup\">{() => <PublicRoute><PatientSignup /></PublicRoute>}</Route>\n      <Route path=\"/\">{() => <PublicRoute><Homepage /></PublicRoute>}</Route>\n      \n      {/* Super Admin-only routes (soham.banerjee@iiitb.ac.in only) */}\n      <Route path=\"/admin\">{() => <SuperAdminRoute><AdminDashboard /></SuperAdminRoute>}</Route>\n      <Route path=\"/admin-dashboard\">{() => <SuperAdminRoute><AdminDashboard /></SuperAdminRoute>}</Route>\n      <Route path=\"/clinic-management\">{() => <SuperAdminRoute><ClinicManagement /></SuperAdminRoute>}</Route>\n      <Route path=\"/clinic-admin/:clinicId\">{() => <SuperAdminRoute><ClinicAdminDashboard /></SuperAdminRoute>}</Route>\n      \n      {/* Staff/Doctor-only routes */}\n      <Route path=\"/staff-checkin\">{() => <ProtectedRoute allowedRoles={['staff', 'doctor']}><StaffCheckinPage /></ProtectedRoute>}</Route>\n      \n      {/* Multi-role routes (patient, staff, doctor, admin) */}\n      <Route path=\"/dashboard\">{() => <ProtectedRoute><Dashboard /></ProtectedRoute>}</Route>\n      <Route path=\"/profile\">{() => <ProtectedRoute><ProfilePage /></ProtectedRoute>}</Route>\n      <Route path=\"/settings\">{() => <ProtectedRoute><SettingsPage /></ProtectedRoute>}</Route>\n      <Route path=\"/medicines\">{() => <ProtectedRoute allowedRoles={['patient']}><MedicinesPage /></ProtectedRoute>}</Route>\n      <Route path=\"/book-appointment\">{() => <ProtectedRoute allowedRoles={['patient']}><PatientBooking /></ProtectedRoute>}</Route>\n      <Route path=\"/live-queue\">{() => <ProtectedRoute><LiveQueueTracker /></ProtectedRoute>}</Route>\n      \n      {/* 404 page */}\n      <Route>{() => <PublicRoute><NotFound /></PublicRoute>}</Route>\n    </Switch>\n  );\n};\n\nfunction App() {\n  console.log('🔥 App component rendering...');\n  \n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <AppRouter />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":11458},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n\n  /* Healthcare theme colors */\n  --healthcare-blue: hsl(207, 90%, 54%);\n  --healthcare-green: hsl(142, 71%, 45%);\n  --healthcare-orange: hsl(25, 95%, 53%);\n  --healthcare-red: hsl(0, 84%, 60%);\n  --healthcare-purple: hsl(262, 83%, 58%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n/* Fix dark mode visibility issues */\n.dark .bg-gray-50,\n.dark .bg-blue-50 {\n  background-color: hsl(var(--muted));\n}\n\n.dark .text-gray-600,\n.dark .text-gray-700,\n.dark .text-gray-800,\n.dark .text-gray-900 {\n  color: hsl(var(--muted-foreground));\n}\n\n/* Dark background with light text for medicine cards */\n.medicine-card {\n  background-color: white;\n}\n\n.dark .medicine-card {\n  background-color: #111827 !important;\n  border-color: #374151 !important;\n}\n\n.dark .medicine-card,\n.dark .medicine-card h3,\n.dark .medicine-card p,\n.dark .medicine-card span,\n.dark .medicine-card div {\n  color: #d1d5db !important;\n}\n\n.dark .medicine-card .font-bold,\n.dark .medicine-card .font-semibold {\n  color: #f9fafb !important;\n}\n\n.dark .text-blue-100 {\n  color: hsl(var(--accent-foreground));\n}\n\n.dark .border-gray-200,\n.dark .border-gray-300 {\n  border-color: hsl(var(--border));\n}\n\n.dark .bg-white {\n  background-color: hsl(var(--card));\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Healthcare specific animations */\n@keyframes flash {\n  0%, 50%, 100% {\n    opacity: 1;\n  }\n  25%, 75% {\n    opacity: 0.7;\n  }\n}\n\n.animate-flash {\n  animation: flash 2s infinite;\n}\n\n/* Custom scrollbar for better UX */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--border));\n  border-radius: 3px;\n}\n\n/* Enhanced navigation styling */\n.nav-tabs {\n  @apply border-b border-gray-200 dark:border-gray-800;\n  background: linear-gradient(135deg, hsl(var(--background)) 0%, hsl(var(--muted)) 100%);\n}\n\n.nav-tab {\n  @apply relative px-6 py-3 text-sm font-medium text-gray-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-all duration-200 border-b-2 border-transparent hover:border-blue-300 dark:hover:border-blue-600;\n}\n\n.nav-tab.active {\n  @apply text-blue-600 dark:text-blue-400 border-blue-500 dark:border-blue-400 bg-blue-50 dark:bg-blue-950/30;\n}\n\n.nav-tab::before {\n  content: '';\n  @apply absolute inset-0 bg-gradient-to-r from-blue-500/0 to-blue-500/0 hover:from-blue-500/5 hover:to-blue-500/10 dark:hover:from-blue-500/10 dark:hover:to-blue-500/20 transition-all duration-300 rounded-t-lg;\n}\n\n.nav-tab.active::before {\n  @apply from-blue-500/10 to-blue-500/20 dark:from-blue-500/20 dark:dark:to-blue-500/30;\n}\n\n/* Dashboard card enhancements */\n.dashboard-card {\n  @apply bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 shadow-sm hover:shadow-md transition-all duration-300 rounded-xl p-6 relative overflow-hidden;\n}\n\n.dashboard-card::before {\n  content: '';\n  @apply absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-blue-500 to-purple-500;\n}\n\n.dashboard-card.stats-card::before {\n  @apply from-green-500 to-blue-500;\n}\n\n.dashboard-card.alert-card::before {\n  @apply from-red-500 to-orange-500;\n}\n\n.dashboard-card.info-card::before {\n  @apply from-purple-500 to-pink-500;\n}\n\n/* Stat number styling */\n.stat-number {\n  @apply text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent;\n}\n\n.stat-change-positive {\n  @apply text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-950/30 px-2 py-1 rounded-full text-xs font-medium;\n}\n\n.stat-change-negative {\n  @apply text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-950/30 px-2 py-1 rounded-full text-xs font-medium;\n}\n\n/* Button enhancements */\n.btn-primary {\n  @apply bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-medium px-4 py-2 rounded-lg shadow-sm hover:shadow-md transition-all duration-200 transform hover:scale-105;\n}\n\n.btn-secondary {\n  @apply bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 font-medium px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 transition-all duration-200;\n}\n\n/* Alert styling */\n.alert-emergency {\n  @apply bg-red-50 dark:bg-red-950/30 border-l-4 border-red-500 p-4 rounded-r-lg animate-pulse shadow-sm;\n}\n\n.alert-warning {\n  @apply bg-yellow-50 dark:bg-yellow-950/30 border-l-4 border-yellow-500 p-4 rounded-r-lg shadow-sm;\n}\n\n.alert-info {\n  @apply bg-blue-50 dark:bg-blue-950/30 border-l-4 border-blue-500 p-4 rounded-r-lg shadow-sm;\n}\n\n/* Queue status badges */\n.queue-waiting {\n  @apply bg-yellow-100 text-yellow-800 dark:bg-yellow-950/30 dark:text-yellow-400 px-2 py-1 rounded-full text-xs font-medium;\n}\n\n.queue-called {\n  @apply bg-blue-100 text-blue-800 dark:bg-blue-950/30 dark:text-blue-400 px-2 py-1 rounded-full text-xs font-medium;\n}\n\n.queue-completed {\n  @apply bg-green-100 text-green-800 dark:bg-green-950/30 dark:text-green-400 px-2 py-1 rounded-full text-xs font-medium;\n}\n\n/* Appointment status badges */\n.appointment-scheduled {\n  @apply bg-blue-100 text-blue-800 dark:bg-blue-950/30 dark:text-blue-400 px-2 py-1 rounded-full text-xs font-medium;\n}\n\n.appointment-confirmed {\n  @apply bg-green-100 text-green-800 dark:bg-green-950/30 dark:text-green-400 px-2 py-1 rounded-full text-xs font-medium;\n}\n\n.appointment-completed {\n  @apply bg-gray-100 text-gray-800 dark:bg-gray-950/30 dark:text-gray-400 px-2 py-1 rounded-full text-xs font-medium;\n}\n\n.appointment-cancelled {\n  @apply bg-red-100 text-red-800 dark:bg-red-950/30 dark:text-red-400 px-2 py-1 rounded-full text-xs font-medium;\n}\n\n/* Table enhancements */\n.data-table {\n  @apply w-full border-collapse bg-white dark:bg-gray-900 shadow-sm rounded-lg overflow-hidden;\n}\n\n.data-table th {\n  @apply bg-gray-50 dark:bg-gray-800 px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider border-b border-gray-200 dark:border-gray-700;\n}\n\n.data-table td {\n  @apply px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100 border-b border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors duration-150;\n}\n\n/* Loading and skeleton states */\n.skeleton {\n  @apply animate-pulse bg-gray-200 dark:bg-gray-700 rounded;\n}\n\n.loading-spinner {\n  @apply animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500;\n}\n\n/* ENHANCED MOBILE OPTIMIZATIONS */\n\n/* Mobile-first approach: Base styles for mobile */\n@media screen and (max-width: 640px) {\n  /* Core mobile layout */\n  * {\n    box-sizing: border-box;\n  }\n\n  html {\n    font-size: 16px; /* Prevent zoom on form focus */\n    -webkit-text-size-adjust: 100%;\n    -webkit-tap-highlight-color: transparent;\n  }\n\n  body {\n    @apply text-base leading-relaxed;\n    overflow-x: hidden;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  /* Mobile viewport and safe areas */\n  .mobile-viewport {\n    min-height: 100vh;\n    min-height: 100dvh; /* Dynamic viewport height */\n    width: 100vw;\n    overflow-x: hidden;\n    padding-bottom: env(safe-area-inset-bottom);\n    padding-top: env(safe-area-inset-top);\n    padding-left: env(safe-area-inset-left);\n    padding-right: env(safe-area-inset-right);\n  }\n\n  .mobile-container {\n    @apply px-4 py-3 mx-auto;\n    max-width: 100vw;\n    overflow-x: hidden;\n  }\n\n  /* Mobile navigation improvements */\n  .nav-tabs {\n    @apply overflow-x-auto px-0;\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n    scroll-behavior: smooth;\n    scroll-snap-type: x mandatory;\n  }\n\n  .nav-tabs::-webkit-scrollbar {\n    display: none;\n  }\n\n  .nav-tab {\n    @apply px-4 py-3 text-sm font-medium whitespace-nowrap;\n    min-width: max-content;\n    scroll-snap-align: center;\n    touch-action: manipulation;\n  }\n\n  .nav-tab.active {\n    @apply bg-blue-50 dark:bg-blue-950/50;\n  }\n\n  /* Enhanced mobile cards */\n  .dashboard-card,\n  .mobile-card {\n    @apply p-4 mb-3 rounded-xl shadow-sm border border-gray-200 dark:border-gray-800;\n    background: white;\n    will-change: transform;\n  }\n\n  .dark .dashboard-card,\n  .dark .mobile-card {\n    background: hsl(var(--card));\n    border-color: hsl(var(--border));\n  }\n\n  /* Mobile-optimized typography */\n  .mobile-heading {\n    @apply text-xl font-bold leading-tight mb-2;\n    font-size: clamp(1.25rem, 4vw, 1.5rem);\n  }\n\n  .mobile-subheading {\n    @apply text-lg font-semibold leading-tight mb-2;\n    font-size: clamp(1.125rem, 3.5vw, 1.25rem);\n  }\n\n  .mobile-body,\n  .mobile-body-text {\n    @apply text-base leading-relaxed;\n    font-size: 16px; /* Prevent zoom on iOS */\n  }\n\n  .mobile-caption {\n    @apply text-sm text-gray-600 dark:text-gray-400 leading-normal;\n  }\n\n  .mobile-label {\n    @apply text-sm font-medium text-gray-700 dark:text-gray-300 mb-1;\n  }\n\n  .mobile-card-title {\n    @apply text-lg font-semibold leading-tight;\n    font-size: clamp(1rem, 3vw, 1.125rem);\n  }\n\n  /* Mobile stat numbers */\n  .stat-number {\n    @apply text-2xl font-bold;\n    font-size: clamp(1.5rem, 6vw, 2rem);\n  }\n\n  /* Enhanced mobile buttons */\n  .btn-primary,\n  .mobile-btn,\n  .mobile-btn-primary {\n    @apply min-h-12 px-6 py-3 text-base font-medium rounded-lg;\n    font-size: 16px !important; /* Prevent zoom on iOS */\n    touch-action: manipulation;\n    -webkit-touch-callout: none;\n    user-select: none;\n  }\n\n  .btn-secondary,\n  .mobile-btn-secondary {\n    @apply min-h-12 px-6 py-3 text-base font-medium rounded-lg;\n    font-size: 16px !important; /* Prevent zoom on iOS */\n    touch-action: manipulation;\n    -webkit-touch-callout: none;\n    user-select: none;\n  }\n\n  .mobile-btn-small {\n    @apply min-h-10 px-4 py-2 text-sm font-medium rounded-md;\n    font-size: 16px !important;\n    touch-action: manipulation;\n  }\n\n  .mobile-btn-large {\n    @apply min-h-14 px-8 py-4 text-lg font-medium rounded-xl;\n    font-size: 18px !important;\n    touch-action: manipulation;\n  }\n\n  /* Mobile form elements */\n  input,\n  select,\n  textarea,\n  .mobile-input {\n    @apply min-h-12 px-4 py-3 text-base rounded-lg border border-gray-300 dark:border-gray-600;\n    font-size: 16px !important; /* Prevent zoom on iOS */\n    -webkit-appearance: none;\n    appearance: none;\n  }\n\n  input:focus,\n  select:focus,\n  textarea:focus,\n  .mobile-input:focus {\n    @apply ring-2 ring-blue-500 border-blue-500 outline-none;\n  }\n\n  /* Mobile layout grids */\n  .mobile-grid-1 {\n    @apply grid grid-cols-1 gap-3;\n  }\n\n  .mobile-grid-2 {\n    @apply grid grid-cols-2 gap-2;\n  }\n\n  .mobile-metrics-grid {\n    @apply grid grid-cols-1 gap-3;\n  }\n\n  .mobile-metrics-card {\n    @apply p-4 rounded-lg bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 shadow-sm;\n  }\n\n  /* Mobile flex layouts */\n  .mobile-flex-col {\n    @apply flex flex-col space-y-3;\n  }\n\n  .mobile-flex-row {\n    @apply flex flex-row items-center space-x-3;\n  }\n\n  .mobile-flex-between {\n    @apply flex justify-between items-center;\n  }\n\n  .mobile-flex-center {\n    @apply flex justify-center items-center;\n  }\n\n  /* Mobile spacing utilities */\n  .mobile-px-4 {\n    @apply px-4;\n  }\n\n  .mobile-py-3 {\n    @apply py-3;\n  }\n\n  .mobile-py-4 {\n    @apply py-4;\n  }\n\n  .mobile-gap-3 {\n    @apply gap-3;\n  }\n\n  .mobile-gap-4 {\n    @apply gap-4;\n  }\n\n  .mobile-mb-4 {\n    @apply mb-4;\n  }\n\n  .mobile-mb-6 {\n    @apply mb-6;\n  }\n\n  .mobile-mt-4 {\n    @apply mt-4;\n  }\n\n  /* Mobile content areas */\n  .mobile-content {\n    @apply px-4 py-3;\n  }\n\n  .mobile-safe-area {\n    padding-bottom: calc(16px + env(safe-area-inset-bottom));\n  }\n\n  /* Mobile tables */\n  .mobile-table-container {\n    @apply overflow-x-auto -mx-4 px-4;\n    scrollbar-width: thin;\n  }\n\n  .mobile-table {\n    @apply min-w-full;\n  }\n\n  .mobile-table th,\n  .mobile-table td {\n    @apply px-3 py-2 text-sm whitespace-nowrap;\n  }\n\n  /* Mobile action buttons for quick actions */\n  .action-btn-primary {\n    @apply bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white shadow-sm hover:shadow-md transform hover:scale-105 transition-all duration-200;\n    font-size: 16px !important;\n    min-height: 48px;\n    touch-action: manipulation;\n  }\n\n  .action-btn-secondary {\n    @apply bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 shadow-sm border border-gray-300 dark:border-gray-600;\n    font-size: 16px !important;\n    min-height: 48px;\n    touch-action: manipulation;\n  }\n\n  /* Mobile icons */\n  .mobile-icon {\n    @apply w-5 h-5;\n  }\n\n  .mobile-icon-large {\n    @apply w-6 h-6;\n  }\n\n  /* Mobile dialogs and modals */\n  .mobile-dialog {\n    @apply max-w-sm mx-4;\n  }\n\n  .mobile-dialog-content {\n    @apply p-6 space-y-4;\n  }\n\n  /* Mobile emergency alerts */\n  .mobile-alert {\n    @apply p-4 rounded-lg mb-3 border-l-4;\n  }\n\n  .mobile-alert.emergency {\n    @apply bg-red-50 border-red-500 dark:bg-red-950/30;\n  }\n\n  .mobile-alert.warning {\n    @apply bg-yellow-50 border-yellow-500 dark:bg-yellow-950/30;\n  }\n\n  .mobile-alert.info {\n    @apply bg-blue-50 border-blue-500 dark:bg-blue-950/30;\n  }\n\n  /* Mobile queue and appointment cards */\n  .mobile-appointment-card,\n  .mobile-queue-card {\n    @apply p-4 rounded-xl bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 shadow-sm mb-3;\n  }\n\n  /* Mobile dashboard stats */\n  .mobile-stat-card {\n    @apply p-4 rounded-xl bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 shadow-sm;\n  }\n\n  .mobile-stat-number {\n    @apply text-2xl font-bold mb-1;\n    font-size: clamp(1.5rem, 5vw, 2rem);\n  }\n\n  .mobile-stat-label {\n    @apply text-sm font-medium text-gray-600 dark:text-gray-400 mb-2;\n  }\n\n  .mobile-stat-description {\n    @apply text-sm text-gray-500 dark:text-gray-500;\n    font-size: 16px;\n  }\n\n  /* Mobile feedback and loading states */\n  .mobile-loading {\n    @apply flex items-center justify-center p-8;\n  }\n\n  .mobile-empty-state {\n    @apply text-center p-8 text-gray-500 dark:text-gray-400;\n  }\n\n  /* Mobile accessibility improvements */\n  .mobile-focus:focus {\n    @apply ring-2 ring-blue-500 ring-offset-2 outline-none;\n  }\n\n  .mobile-touch-target {\n    min-height: 48px;\n    min-width: 48px;\n    touch-action: manipulation;\n  }\n}\n\n/* Tablet optimizations */\n@media screen and (min-width: 641px) and (max-width: 1024px) {\n  .tablet-grid {\n    @apply grid grid-cols-2 gap-4;\n  }\n\n  .tablet-card {\n    @apply p-5;\n  }\n}\n\n/* Desktop and larger screens preserve original layout */\n@media screen and (min-width: 1025px) {\n  .desktop-grid {\n    @apply grid grid-cols-4 gap-6;\n  }\n\n  .desktop-card {\n    @apply p-6;\n  }\n}\n\n/* Custom mobile CSS classes */\n.mobile-input-field {\n  @apply min-h-12 px-4 py-3 text-base rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100;\n  font-size: 16px !important; /* Prevent iOS zoom */\n}\n\n.mobile-select-field {\n  @apply min-h-12 px-4 py-3 text-base rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100;\n  font-size: 16px !important; /* Prevent iOS zoom */\n}\n\n.mobile-textarea-field {\n  @apply min-h-20 px-4 py-3 text-base rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100;\n  font-size: 16px !important; /* Prevent iOS zoom */\n}\n\n/* Emergency state for mobile */\n@media screen and (max-width: 640px) {\n  .mobile-emergency-card {\n    @apply p-4 rounded-xl shadow-lg border-l-4 border-red-500 bg-red-50 dark:bg-red-950/30 mb-4;\n    animation: flash 2s infinite;\n  }\n\n  .mobile-warning-card {\n    @apply p-4 rounded-xl shadow-lg border-l-4 border-yellow-500 bg-yellow-50 dark:bg-yellow-950/30 mb-4;\n  }\n\n  .mobile-info-card {\n    @apply p-4 rounded-xl shadow-lg border-l-4 border-blue-500 bg-blue-50 dark:bg-blue-950/30 mb-4;\n  }\n\n  .mobile-success-card {\n    @apply p-4 rounded-xl shadow-lg border-l-4 border-green-500 bg-green-50 dark:bg-green-950/30 mb-4;\n  }\n}\n\n/* MOBILE DASHBOARD SPECIFIC FIXES */\n/* Based on the healthcare admin dashboard screenshots */\n\n@media screen and (max-width: 640px) {\n  \n  /* Fix header and navigation issues */\n  .mobile-header {\n    @apply sticky top-0 z-50 bg-white dark:bg-gray-900;\n    padding-top: env(safe-area-inset-top);\n    border-bottom: 1px solid hsl(var(--border));\n  }\n\n  .mobile-header-content {\n    @apply flex items-center justify-between px-4 py-3;\n  }\n\n  .mobile-logo-section {\n    @apply flex items-center space-x-3;\n  }\n\n  .mobile-logo-text {\n    @apply text-lg font-bold text-gray-900 dark:text-white;\n    font-size: clamp(1rem, 4vw, 1.25rem);\n  }\n\n  .mobile-header-actions {\n    @apply flex items-center space-x-2;\n  }\n\n  .mobile-notification-badge {\n    @apply relative;\n  }\n\n  .mobile-notification-dot {\n    @apply absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full text-white text-xs flex items-center justify-center;\n    font-size: 10px;\n    line-height: 1;\n  }\n\n  /* Enhanced mobile navigation tabs */\n  .mobile-main-nav {\n    @apply bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 sticky top-16 z-40;\n  }\n\n  .mobile-nav-container {\n    @apply flex overflow-x-auto;\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n  }\n\n  .mobile-nav-container::-webkit-scrollbar {\n    display: none;\n  }\n\n  .mobile-nav-tab {\n    @apply relative px-6 py-4 text-sm font-medium whitespace-nowrap border-b-2 border-transparent transition-all duration-200;\n    min-width: max-content;\n  }\n\n  .mobile-nav-tab.active {\n    @apply text-blue-600 dark:text-blue-400 border-blue-500 bg-blue-50 dark:bg-blue-950/30;\n  }\n\n  .mobile-nav-tab:not(.active) {\n    @apply text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-200;\n  }\n\n  /* Dashboard content area fixes */\n  .mobile-dashboard-content {\n    @apply px-4 py-4 space-y-6;\n    padding-bottom: calc(2rem + env(safe-area-inset-bottom));\n  }\n\n  /* Patient metrics section */\n  .mobile-patients-today {\n    @apply mb-6;\n  }\n\n  .mobile-section-header {\n    @apply flex items-center justify-between mb-4;\n  }\n\n  .mobile-section-title {\n    @apply text-lg font-semibold text-gray-900 dark:text-white;\n  }\n\n  .mobile-percentage-badge {\n    @apply inline-flex items-center px-3 py-1 rounded-full text-sm font-medium;\n  }\n\n  .mobile-percentage-badge.positive {\n    @apply bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400;\n  }\n\n  .mobile-percentage-badge.negative {\n    @apply bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400;\n  }\n\n  .mobile-percentage-badge.neutral {\n    @apply bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-400;\n  }\n\n  .mobile-section-subtitle {\n    @apply text-sm text-gray-600 dark:text-gray-400 mt-1;\n  }\n\n  /* Progress bars for metrics */\n  .mobile-progress-container {\n    @apply mb-4;\n  }\n\n  .mobile-progress-bar {\n    @apply w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 mb-2;\n  }\n\n  .mobile-progress-fill {\n    @apply h-2 rounded-full transition-all duration-500 ease-out;\n  }\n\n  .mobile-progress-patients {\n    background: linear-gradient(90deg, #3b82f6, #1d4ed8);\n  }\n\n  .mobile-progress-queue {\n    background: linear-gradient(90deg, #f59e0b, #d97706);\n  }\n\n  .mobile-progress-medicine {\n    background: linear-gradient(90deg, #10b981, #059669);\n  }\n\n  /* Queue management section */\n  .mobile-queue-section {\n    @apply bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-4 shadow-sm;\n  }\n\n  .mobile-queue-header {\n    @apply flex items-center justify-between mb-4;\n  }\n\n  .mobile-queue-title {\n    @apply text-lg font-semibold text-gray-900 dark:text-white;\n  }\n\n  .mobile-queue-counter {\n    @apply text-2xl font-bold;\n    background: linear-gradient(135deg, #3b82f6, #8b5cf6);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .mobile-queue-subtitle {\n    @apply text-sm text-gray-600 dark:text-gray-400;\n  }\n\n  /* Medicine inventory section */\n  .mobile-medicine-section {\n    @apply bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 p-4 shadow-sm;\n  }\n\n  .mobile-medicine-header {\n    @apply flex items-center justify-between mb-4;\n  }\n\n  .mobile-medicine-title {\n    @apply text-lg font-semibold text-gray-900 dark:text-white;\n  }\n\n  .mobile-inventory-bar {\n    @apply w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3;\n  }\n\n  .mobile-inventory-fill {\n    @apply h-3 rounded-full transition-all duration-500;\n  }\n\n  .mobile-inventory-low {\n    @apply bg-red-500;\n  }\n\n  .mobile-inventory-medium {\n    @apply bg-yellow-500;\n  }\n\n  .mobile-inventory-good {\n    @apply bg-green-500;\n  }\n\n  /* Action buttons optimization */\n  .mobile-primary-action {\n    @apply w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg text-center transition-colors duration-200;\n    min-height: 48px;\n    touch-action: manipulation;\n  }\n\n  .mobile-secondary-action {\n    @apply w-full bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300 font-medium py-3 px-4 rounded-lg text-center border border-gray-300 dark:border-gray-600 transition-colors duration-200;\n    min-height: 48px;\n    touch-action: manipulation;\n  }\n\n  /* Patient/appointment cards improvements */\n  .mobile-appointment-card {\n    @apply bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-4 mb-3 shadow-sm;\n  }\n\n  .mobile-appointment-header {\n    @apply flex items-start justify-between mb-3;\n  }\n\n  .mobile-appointment-patient {\n    @apply flex-1;\n  }\n\n  .mobile-patient-name {\n    @apply text-base font-semibold text-gray-900 dark:text-white mb-1;\n  }\n\n  .mobile-patient-id {\n    @apply text-sm text-gray-600 dark:text-gray-400;\n  }\n\n  .mobile-appointment-status {\n    @apply px-2 py-1 rounded-full text-xs font-medium;\n  }\n\n  .mobile-status-scheduled {\n    @apply bg-blue-100 text-blue-700 dark:bg-blue-900/30 dark:text-blue-400;\n  }\n\n  .mobile-status-cancelled {\n    @apply bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-400;\n  }\n\n  .mobile-status-pending {\n    @apply bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-400;\n  }\n\n  .mobile-status-active {\n    @apply bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400;\n  }\n\n  .mobile-appointment-actions {\n    @apply flex flex-wrap gap-2 mt-3;\n  }\n\n  .mobile-action-button {\n    @apply flex-1 min-w-24 py-2 px-3 text-xs font-medium rounded-md transition-colors duration-200;\n    min-height: 36px;\n  }\n\n  .mobile-action-reschedule {\n    @apply bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700;\n  }\n\n  .mobile-action-view {\n    @apply bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400 hover:bg-blue-200 dark:hover:bg-blue-900/50;\n  }\n\n  .mobile-action-complete {\n    @apply bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400 hover:bg-green-200 dark:hover:bg-green-900/50;\n  }\n\n  .mobile-action-deactivate {\n    @apply bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-400 hover:bg-red-200 dark:hover:bg-red-900/50;\n  }\n\n  .mobile-action-approve {\n    @apply bg-green-100 dark:bg-green-900/30 text-green-700 dark:text-green-400 hover:bg-green-200 dark:hover:bg-green-900/50;\n  }\n\n  /* Search and filter improvements */\n  .mobile-search-container {\n    @apply relative mb-4;\n  }\n\n  .mobile-search-input {\n    @apply w-full pl-10 pr-4 py-3 text-base bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500;\n    font-size: 16px !important; /* Prevent zoom on iOS */\n  }\n\n  .mobile-search-icon {\n    @apply absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400;\n  }\n\n  /* Quick stats cards */\n  .mobile-quick-stats {\n    @apply grid grid-cols-2 gap-3 mb-6;\n  }\n\n  .mobile-stat-card {\n    @apply bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-4 text-center shadow-sm;\n  }\n\n  .mobile-stat-value {\n    @apply text-2xl font-bold text-gray-900 dark:text-white mb-1;\n  }\n\n  .mobile-stat-label {\n    @apply text-sm text-gray-600 dark:text-gray-400;\n  }\n\n  .mobile-stat-trend {\n    @apply text-xs font-medium mt-1;\n  }\n\n  .mobile-trend-up {\n    @apply text-green-600 dark:text-green-400;\n  }\n\n  .mobile-trend-down {\n    @apply text-red-600 dark:text-red-400;\n  }\n\n  /* Empty state handling */\n  .mobile-empty-state {\n    @apply text-center py-8 px-4;\n  }\n\n  .mobile-empty-icon {\n    @apply w-16 h-16 mx-auto mb-4 text-gray-400;\n  }\n\n  .mobile-empty-title {\n    @apply text-lg font-medium text-gray-900 dark:text-white mb-2;\n  }\n\n  .mobile-empty-description {\n    @apply text-sm text-gray-600 dark:text-gray-400 mb-4;\n  }\n\n  /* Loading states */\n  .mobile-skeleton-card {\n    @apply bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800 p-4 mb-3;\n  }\n\n  .mobile-skeleton-line {\n    @apply animate-pulse bg-gray-200 dark:bg-gray-700 rounded h-4 mb-2;\n  }\n\n  .mobile-skeleton-line.short {\n    @apply w-3/4;\n  }\n\n  .mobile-skeleton-line.long {\n    @apply w-full;\n  }\n\n  .mobile-skeleton-button {\n    @apply animate-pulse bg-gray-200 dark:bg-gray-700 rounded h-9 w-24;\n  }\n\n  /* Responsive text sizing */\n  .mobile-responsive-text-xl {\n    font-size: clamp(1.25rem, 5vw, 1.5rem);\n  }\n\n  .mobile-responsive-text-lg {\n    font-size: clamp(1.125rem, 4vw, 1.25rem);\n  }\n\n  .mobile-responsive-text-base {\n    font-size: clamp(0.875rem, 3.5vw, 1rem);\n  }\n\n  /* Tab content spacing */\n  .mobile-tab-content {\n    @apply space-y-4;\n    animation: fadeIn 0.3s ease-in-out;\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  /* Notification improvements */\n  .mobile-notification-container {\n    @apply fixed top-20 left-4 right-4 z-50;\n  }\n\n  .mobile-notification {\n    @apply bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-800 rounded-lg p-4 mb-2 shadow-lg;\n    animation: slideInTop 0.3s ease-out;\n  }\n\n  @keyframes slideInTop {\n    from {\n      transform: translateY(-100%);\n      opacity: 0;\n    }\n    to {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  }\n\n  .mobile-notification.success {\n    @apply border-l-4 border-l-green-500 bg-green-50 dark:bg-green-900/10;\n  }\n\n  .mobile-notification.error {\n    @apply border-l-4 border-l-red-500 bg-red-50 dark:bg-red-900/10;\n  }\n\n  .mobile-notification.warning {\n    @apply border-l-4 border-l-yellow-500 bg-yellow-50 dark:bg-yellow-900/10;\n  }\n\n  .mobile-notification.info {\n    @apply border-l-4 border-l-blue-500 bg-blue-50 dark:bg-blue-900/10;\n  }\n\n  /* Bottom sheet for mobile actions */\n  .mobile-bottom-sheet {\n    @apply fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-900 border-t border-gray-200 dark:border-gray-800 rounded-t-xl p-4 z-50;\n    padding-bottom: calc(1rem + env(safe-area-inset-bottom));\n    animation: slideInBottom 0.3s ease-out;\n  }\n\n  @keyframes slideInBottom {\n    from {\n      transform: translateY(100%);\n    }\n    to {\n      transform: translateY(0);\n    }\n  }\n\n  .mobile-bottom-sheet-header {\n    @apply flex items-center justify-between mb-4;\n  }\n\n  .mobile-bottom-sheet-title {\n    @apply text-lg font-semibold text-gray-900 dark:text-white;\n  }\n\n  .mobile-bottom-sheet-close {\n    @apply w-8 h-8 flex items-center justify-center rounded-full bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400;\n  }\n\n  /* Swipe indicators */\n  .mobile-swipe-indicator {\n    @apply w-12 h-1 bg-gray-300 dark:bg-gray-600 rounded-full mx-auto mb-4;\n  }\n\n  /* Performance optimizations for mobile */\n  .mobile-optimized {\n    will-change: transform;\n    transform: translate3d(0, 0, 0);\n    backface-visibility: hidden;\n  }\n\n  /* Hide desktop-only elements */\n  .desktop-only {\n    @apply hidden;\n  }\n\n  /* Show mobile-only elements */\n  .mobile-only {\n    @apply block;\n  }\n\n  /* Fix text overflow in cards */\n  .mobile-text-container {\n    @apply overflow-hidden;\n  }\n\n  .mobile-text-ellipsis {\n    @apply truncate;\n  }\n\n  /* Better spacing for action button groups */\n  .mobile-button-group {\n    @apply flex flex-wrap gap-2;\n  }\n\n  .mobile-button-group .mobile-action-button {\n    @apply flex-1 min-w-20;\n  }\n\n  /* Improved contrast for better readability */\n  .mobile-high-contrast .mobile-text-muted {\n    @apply text-gray-700 dark:text-gray-300;\n  }\n\n  /* Better focus indicators for accessibility */\n  .mobile-focus-ring:focus-visible {\n    @apply ring-2 ring-blue-500 ring-offset-2 outline-none;\n  }\n\n  /* CRITICAL: Fix button overflow in appointments and records sections */\n  \n  /* Appointment cards button container fix */\n  .appointment-card {\n    @apply overflow-hidden;\n  }\n\n  .appointment-card .flex.gap-2:last-child {\n    @apply flex-wrap justify-end min-w-0;\n    max-width: 100%;\n  }\n\n  .appointment-card .flex.gap-2 > button {\n    @apply text-xs px-2 py-1;\n    min-width: 70px;\n    white-space: nowrap;\n  }\n\n  /* Patient records button container fix */\n  .patient-record-card {\n    @apply overflow-hidden;\n  }\n\n  .patient-record-card .flex.gap-2:last-child {\n    @apply flex-wrap justify-end min-w-0;\n    max-width: 100%;\n  }\n\n  .patient-record-card .flex.gap-2 > button {\n    @apply text-xs px-2 py-1;\n    min-width: 65px;\n    white-space: nowrap;\n  }\n\n  /* Universal card button container fix */\n  .mobile-card-buttons {\n    @apply flex flex-wrap gap-1 justify-end min-w-0;\n    max-width: 200px;\n  }\n\n  .mobile-card-buttons button {\n    @apply text-xs px-2 py-1;\n    min-width: 60px;\n    max-width: 90px;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  /* Specific button sizing for different actions */\n  .mobile-card-buttons button[data-testid*=\"reschedule\"] {\n    min-width: 80px;\n  }\n\n  .mobile-card-buttons button[data-testid*=\"view-history\"] {\n    min-width: 85px;\n  }\n\n  .mobile-card-buttons button[data-testid*=\"edit-profile\"] {\n    min-width: 80px;\n  }\n\n  .mobile-card-buttons button[data-testid*=\"approve\"] {\n    min-width: 70px;\n  }\n\n  .mobile-card-buttons button[data-testid*=\"deactivate\"] {\n    min-width: 85px;\n  }\n\n  .mobile-card-buttons button[data-testid*=\"activate\"] {\n    min-width: 70px;\n  }\n\n  /* Responsive button layout for very small screens */\n  @media (max-width: 480px) {\n    .mobile-card-buttons {\n      max-width: 150px;\n    }\n    \n    .mobile-card-buttons button {\n      @apply text-xs px-1 py-1;\n      min-width: 50px;\n      max-width: 70px;\n      font-size: 10px;\n    }\n  }\n\n  /* Container overflow protection */\n  .card-with-buttons {\n    @apply overflow-hidden;\n  }\n\n  .card-with-buttons .flex.justify-between {\n    @apply min-w-0;\n  }\n\n  .card-with-buttons .flex.justify-between > div:last-child {\n    @apply min-w-0 flex-shrink-0;\n    max-width: 50%;\n  }\n}","size_bytes":32316},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport { authService } from '../services/auth';\n\n// Extend Request type to include user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: any;\n    }\n  }\n}\n\nexport async function authMiddleware(req: Request, res: Response, next: NextFunction): Promise<void> {\n  try {\n    const authHeader = req.get('Authorization');\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      console.log('🔥 AUTH MIDDLEWARE - No auth header or invalid format')\n      res.status(401).json({ message: 'Authentication required' });\n      return;\n    }\n\n    const token = authHeader.replace('Bearer ', '');\n    const user = await authService.verifyToken(token);\n    \n    console.log('🔥 AUTH MIDDLEWARE - User verified:', {\n      id: user.id,\n      role: user.role,\n      phoneNumber: user.phoneNumber,\n      clinicId: user.clinicId,\n      isActive: user.isActive\n    })\n    \n    req.user = user;\n    next();\n  } catch (error: any) {\n    console.log('🔥 AUTH MIDDLEWARE - Error:', error.message)\n    res.status(401).json({ message: error.message });\n  }\n}\n\nexport function requireRole(roles: string[]) {\n  return (req: Request, res: Response, next: NextFunction): void => {\n    if (!req.user) {\n      res.status(401).json({ message: 'Authentication required' });\n      return;\n    }\n\n    if (!roles.includes(req.user.role)) {\n      res.status(403).json({ message: 'Access denied. Insufficient permissions' });\n      return;\n    }\n\n    next();\n  };\n}\n\n// Strict admin access control - only allows 44441100sf@gmail.com\nexport function requireSuperAdmin(req: Request, res: Response, next: NextFunction): void {\n  if (!req.user) {\n    res.status(401).json({ message: 'Authentication required' });\n    return;\n  }\n\n  const AUTHORIZED_ADMIN_EMAIL = '44441100sf@gmail.com';\n  \n  // Check if user has admin role AND authorized email\n  if (req.user.role !== 'admin' || req.user.email !== AUTHORIZED_ADMIN_EMAIL) {\n    console.log('🔥 SUPER ADMIN ACCESS DENIED:', {\n      email: req.user.email,\n      role: req.user.role,\n      authorized: AUTHORIZED_ADMIN_EMAIL\n    });\n    res.status(403).json({ \n      message: 'Access denied. Super admin privileges required.',\n      details: 'Only authorized administrators can access this resource.'\n    });\n    return;\n  }\n\n  console.log('🔥 SUPER ADMIN ACCESS GRANTED:', req.user.email);\n  next();\n}\n","size_bytes":2412},"server/middleware/gps.ts":{"content":"import { Request, Response, NextFunction } from 'express';\n\n// Define allowed clinic locations (latitude, longitude, radius in meters)\nconst CLINIC_LOCATIONS = [\n  { name: 'Bangalore Central Clinic', lat: 12.9716, lng: 77.5946, radius: 200 }, // Bangalore Main Clinic\n  { name: 'Whitefield Branch', lat: 12.9698, lng: 77.7500, radius: 150 }, // Bangalore Whitefield Branch\n  { name: 'Koramangala Clinic', lat: 12.9279, lng: 77.6271, radius: 150 }, // Bangalore Koramangala Branch\n  { name: 'Electronic City Clinic', lat: 12.8456, lng: 77.6603, radius: 150 }, // Electronic City IT hub location\n  // Local Test Clinic uses dynamic location - handled specially in middleware\n  // Add more clinic locations as needed\n];\n\nfunction calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {\n  const R = 6371e3; // Earth's radius in meters\n  const φ1 = lat1 * Math.PI / 180;\n  const φ2 = lat2 * Math.PI / 180;\n  const Δφ = (lat2 - lat1) * Math.PI / 180;\n  const Δλ = (lng2 - lng1) * Math.PI / 180;\n\n  const a = Math.sin(Δφ/2) * Math.sin(Δφ/2) +\n            Math.cos(φ1) * Math.cos(φ2) *\n            Math.sin(Δλ/2) * Math.sin(Δλ/2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n\n  return R * c; // Distance in meters\n}\n\nexport function gpsVerificationMiddleware(req: Request, res: Response, next: NextFunction): void {\n  const { latitude, longitude, workLocation } = req.body;\n\n  if (!latitude || !longitude) {\n    res.status(400).json({ message: 'GPS coordinates are required for check-in' });\n    return;\n  }\n\n  // Special handling for Local Test Clinic - use user's current location\n  if (workLocation === 'Local Test Clinic') {\n    // For the test clinic, we'll create a virtual clinic at user's location with a small radius\n    console.log(`🧪 TEST CLINIC: Creating virtual clinic at user location: ${latitude}, ${longitude}`);\n    req.body.isValid = true;\n    next();\n    return;\n  }\n\n  // Find the specified work location\n  const targetLocation = CLINIC_LOCATIONS.find(loc => loc.name === workLocation);\n  if (!targetLocation) {\n    res.status(400).json({ message: 'Invalid work location specified' });\n    return;\n  }\n\n  // Calculate distance from clinic\n  const distance = calculateDistance(\n    latitude,\n    longitude,\n    targetLocation.lat,\n    targetLocation.lng\n  );\n\n  console.log(`🔍 GPS CHECK: ${workLocation} - User: ${latitude},${longitude} vs Clinic: ${targetLocation.lat},${targetLocation.lng} = ${Math.round(distance)}m`);\n\n  // Check if within allowed radius\n  if (distance > targetLocation.radius) {\n    res.status(403).json({ \n      message: `You must be within ${targetLocation.radius}m of ${targetLocation.name} to check in. Current distance: ${Math.round(distance)}m`,\n      distance: Math.round(distance),\n      allowedRadius: targetLocation.radius\n    });\n    return;\n  }\n\n  // Add location validation flag to request body\n  req.body.isValid = true;\n  next();\n}\n","size_bytes":2944},"server/services/auth.ts":{"content":"import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcrypt';\nimport { randomInt } from 'crypto';\nimport { storage } from '../storage';\nimport { smsService } from './sms';\nimport { emailService } from './email';\n\nconst JWT_SECRET = process.env.JWT_SECRET || process.env.SESSION_SECRET || 'your-super-secret-jwt-key-change-this-in-production';\nconst OTP_EXPIRY_MINUTES = 5;\nconst MAX_OTP_ATTEMPTS = 3;\n\nexport class AuthService {\n  generateToken(userId: string, role: string, clinicId?: string): string {\n    const payload: any = { \n      userId, \n      role \n    };\n    \n    if (clinicId) {\n      payload.clinicId = clinicId;\n    }\n    \n    return jwt.sign(payload, JWT_SECRET, { expiresIn: '7d' });\n  }\n\n  async sendOtp(phoneNumber: string): Promise<{ success: boolean; otp?: string; error?: string }> {\n    // Generate 6-digit OTP\n    const otp = randomInt(100000, 999999).toString();\n    const otpHash = await bcrypt.hash(otp, 10);\n    \n    // Set expiry time\n    const expiresAt = new Date();\n    expiresAt.setMinutes(expiresAt.getMinutes() + OTP_EXPIRY_MINUTES);\n    \n    // Invalidate any existing OTP sessions for this phone\n    await storage.invalidateOtpSession(phoneNumber);\n    \n    // Create new OTP session\n    await storage.createOtpSession({\n      phoneNumber,\n      otpHash,\n      expiresAt\n    });\n    \n    // Send SMS\n    const smsResult = await smsService.sendOtp(phoneNumber, otp);\n    return smsResult;\n  }\n\n  async sendEmailOtp(email: string): Promise<{ success: boolean; otp?: string; error?: string }> {\n    // Generate 6-digit OTP\n    const otp = randomInt(100000, 999999).toString();\n    const otpHash = await bcrypt.hash(otp, 10);\n    \n    // Set expiry time\n    const expiresAt = new Date();\n    expiresAt.setMinutes(expiresAt.getMinutes() + OTP_EXPIRY_MINUTES);\n    \n    // Invalidate any existing OTP sessions for this email\n    await storage.invalidateEmailOtpSession(email);\n    \n    // Create new OTP session\n    await storage.createEmailOtpSession({\n      email,\n      otpHash,\n      expiresAt\n    });\n    \n    // Send Email\n    const emailResult = await emailService.sendOtp(email, otp);\n    return emailResult;\n  }\n\n  async verifyEmailOtp(email: string, otp: string, ipAddress?: string, userAgent?: string): Promise<{ token: string; user: any; isNewUser: boolean }> {\n    // Get OTP session\n    const otpSession = await storage.getEmailOtpSession(email);\n    if (!otpSession) {\n      throw new Error('Invalid or expired OTP');\n    }\n\n    // Check attempts limit\n    if (otpSession.attempts >= MAX_OTP_ATTEMPTS) {\n      await storage.invalidateEmailOtpSession(email);\n      throw new Error('Too many failed attempts. Please request a new OTP');\n    }\n\n    // Verify OTP\n    const isValidOtp = await bcrypt.compare(otp, otpSession.otpHash);\n    if (!isValidOtp) {\n      await storage.incrementEmailOtpAttempts(email);\n      throw new Error('Invalid OTP');\n    }\n\n    // Invalidate OTP session\n    await storage.invalidateEmailOtpSession(email);\n\n    // Find or create user\n    let user = await storage.getUserByEmail(email);\n    let isNewUser = false;\n\n    if (!user) {\n      // Create new user with patient role by default\n      user = await storage.createUser({\n        phoneNumber: null, // Email-based users don't need phone numbers initially\n        email,\n        role: 'patient',\n        firstName: '',\n        lastName: '',\n        isApproved: true // Auto-approve patients\n      });\n      isNewUser = true;\n    }\n\n    if (!user.isActive) {\n      throw new Error('Account is deactivated. Please contact support');\n    }\n\n    // Generate JWT token first\n    const token = jwt.sign(\n      { \n        userId: user.id,\n        role: user.role \n      },\n      JWT_SECRET,\n      { expiresIn: '7d' }\n    );\n\n    // Create session with the actual token\n    const expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + 7); // 7 days from now\n\n    const session = await storage.createAuthSession({\n      userId: user.id,\n      token,\n      expiresAt,\n      ipAddress: ipAddress || '',\n      userAgent: userAgent || '',\n      lastActivity: new Date()\n    });\n\n    return { token, user, isNewUser };\n  }\n\n  async verifyOtp(phoneNumber: string, otp: string, ipAddress?: string, userAgent?: string): Promise<{ token: string; user: any; isNewUser: boolean }> {\n    // Get OTP session\n    const otpSession = await storage.getOtpSession(phoneNumber);\n    if (!otpSession) {\n      throw new Error('Invalid or expired OTP');\n    }\n\n    // Check attempts limit\n    if (otpSession.attempts >= MAX_OTP_ATTEMPTS) {\n      await storage.invalidateOtpSession(phoneNumber);\n      throw new Error('Too many failed attempts. Please request a new OTP');\n    }\n\n    // Verify OTP\n    const isValidOtp = await bcrypt.compare(otp, otpSession.otpHash);\n    if (!isValidOtp) {\n      await storage.incrementOtpAttempts(phoneNumber);\n      throw new Error('Invalid OTP');\n    }\n\n    // Invalidate OTP session\n    await storage.invalidateOtpSession(phoneNumber);\n\n    // Find or create user\n    let user = await storage.getUserByPhone(phoneNumber);\n    let isNewUser = false;\n\n    if (!user) {\n      // Create new user with patient role by default\n      user = await storage.createUser({\n        phoneNumber,\n        role: 'patient',\n        firstName: '',\n        lastName: '',\n        isApproved: true // Auto-approve patients\n      });\n      isNewUser = true;\n    }\n\n    if (!user.isActive) {\n      throw new Error('Account is deactivated. Please contact administrator');\n    }\n\n    if (!user.isApproved && user.role !== 'patient') {\n      throw new Error('Account pending approval. Please contact administrator');\n    }\n\n    // Generate JWT token\n    const token = jwt.sign(\n      { \n        userId: user.id, \n        phoneNumber: user.phoneNumber, \n        role: user.role \n      },\n      JWT_SECRET,\n      { expiresIn: '7d' }\n    );\n\n    // Create auth session\n    const expiresAt = new Date();\n    expiresAt.setDate(expiresAt.getDate() + 7); // 7 days\n\n    await storage.createAuthSession({\n      userId: user.id,\n      token,\n      expiresAt,\n      ipAddress,\n      userAgent\n    });\n\n    return { token, user, isNewUser };\n  }\n\n  async verifyToken(token: string): Promise<any> {\n    try {\n      const decoded = jwt.verify(token, JWT_SECRET) as any;\n      const session = await storage.getAuthSessionWithUser(token);\n      \n      if (!session) {\n        throw new Error('Invalid session');\n      }\n\n      // Update last activity\n      await storage.updateLastActivity(token);\n\n      return session.user;\n    } catch (error) {\n      throw new Error('Invalid or expired token');\n    }\n  }\n\n  async revokeToken(token: string): Promise<void> {\n    await storage.invalidateAuthSession(token);\n  }\n\n  async revokeAllUserTokens(userId: string): Promise<void> {\n    await storage.invalidateUserSessions(userId);\n  }\n}\n\nexport const authService = new AuthService();\n","size_bytes":6881},"server/services/queue.ts":{"content":"import { Response } from 'express';\nimport { storage } from '../storage';\nimport { WebSocket } from 'ws';\n\ninterface QueueClient {\n  response: Response;\n  doctorId: string;\n}\n\nexport class QueueService {\n  private clients: Map<string, QueueClient[]> = new Map();\n  private wsClients: Set<WebSocket> = new Set();\n\n  addClient(doctorId: string, response: Response): void {\n    if (!this.clients.has(doctorId)) {\n      this.clients.set(doctorId, []);\n    }\n    \n    this.clients.get(doctorId)!.push({ response, doctorId });\n    \n    // Send initial queue state\n    this.sendQueueUpdate(doctorId, response);\n  }\n\n  removeClient(doctorId: string, response: Response): void {\n    const clients = this.clients.get(doctorId);\n    if (clients) {\n      const index = clients.findIndex(client => client.response === response);\n      if (index !== -1) {\n        clients.splice(index, 1);\n      }\n      \n      if (clients.length === 0) {\n        this.clients.delete(doctorId);\n      }\n    }\n  }\n\n  async broadcastQueueUpdate(doctorId: string): Promise<void> {\n    const clients = this.clients.get(doctorId);\n    if (!clients) return;\n\n    for (const client of clients) {\n      await this.sendQueueUpdate(doctorId, client.response);\n    }\n  }\n\n  addWebSocketClient(ws: WebSocket): void {\n    this.wsClients.add(ws);\n  }\n\n  removeWebSocketClient(ws: WebSocket): void {\n    this.wsClients.delete(ws);\n  }\n\n  async broadcastWebSocketUpdate(doctorId?: string): Promise<void> {\n    try {\n      // Get all queue tokens for admin view\n      const allQueueTokens = await storage.getAllQueueTokens();\n      \n      // Update wait times for all active queue tokens before broadcasting\n      for (const token of allQueueTokens) {\n        if (token.status === 'waiting') {\n          // Find the token's position in the doctor's queue\n          const doctorQueue = await storage.getDoctorQueue(token.doctorId);\n          const queuePosition = doctorQueue.findIndex(t => t.id === token.id) + 1;\n          \n          if (queuePosition > 0) {\n            const dynamicWaitTime = await this.calculateDynamicWaitTime(token, queuePosition);\n            await storage.updateQueueTokenWaitTime(token.id, dynamicWaitTime);\n          }\n        }\n      }\n      \n      // Get updated tokens with new wait times\n      const updatedQueueTokens = await storage.getAllQueueTokens();\n      \n      // Broadcast to all connected WebSocket clients\n      this.wsClients.forEach(ws => {\n        if (ws.readyState === WebSocket.OPEN) {\n          try {\n            // Send admin queue update\n            if ((ws as any).isAdmin) {\n              ws.send(JSON.stringify({ \n                type: 'admin_queue_update', \n                data: updatedQueueTokens \n              }));\n            }\n            \n            // Send patient-specific updates with updated wait times\n            if ((ws as any).patientId) {\n              storage.getPatientQueuePosition((ws as any).patientId).then(position => {\n                if (ws.readyState === WebSocket.OPEN) {\n                  ws.send(JSON.stringify({ \n                    type: 'queue_position', \n                    data: position || { tokenNumber: null, position: null, estimatedWaitTime: 0 } \n                  }));\n                }\n              }).catch(console.error);\n            }\n          } catch (error) {\n            console.error('WebSocket send error:', error);\n            this.wsClients.delete(ws);\n          }\n        } else {\n          this.wsClients.delete(ws);\n        }\n      });\n    } catch (error) {\n      console.error('Failed to broadcast WebSocket update:', error);\n    }\n  }\n\n  private async sendQueueUpdate(doctorId: string, response: Response): Promise<void> {\n    try {\n      const queue = await storage.getDoctorQueue(doctorId);\n      const currentServing = await storage.getCurrentServingToken(doctorId);\n      \n      const queueData = {\n        queue: queue.map(token => ({\n          id: token.id,\n          tokenNumber: token.tokenNumber,\n          patientName: `${token.patient.firstName} ${token.patient.lastName}`,\n          status: token.status,\n          estimatedWaitTime: token.estimatedWaitTime,\n          priority: token.priority,\n          createdAt: token.createdAt\n        })),\n        currentServing: currentServing ? {\n          id: currentServing.id,\n          tokenNumber: currentServing.tokenNumber,\n          patientName: `${currentServing.patient.firstName} ${currentServing.patient.lastName}`,\n          calledAt: currentServing.calledAt\n        } : null,\n        timestamp: new Date().toISOString()\n      };\n\n      response.write(`data: ${JSON.stringify(queueData)}\\n\\n`);\n    } catch (error) {\n      console.error('Failed to send queue update:', error);\n      // Remove client on error\n      this.removeClient(doctorId, response);\n    }\n  }\n\n  // Calculate dynamic wait time based on actual appointment times\n  async calculateDynamicWaitTime(queueToken: any, queuePosition: number): Promise<number> {\n    const now = new Date();\n    \n    // If this token has an appointment, calculate based on appointment time\n    if (queueToken.appointmentId) {\n      try {\n        const appointment = await storage.getAppointmentById(queueToken.appointmentId);\n        if (appointment) {\n          const appointmentTime = new Date(appointment.appointmentDate);\n          const waitTimeMinutes = Math.max(0, Math.floor((appointmentTime.getTime() - now.getTime()) / (1000 * 60)));\n          \n          console.log(`🔥 Appointment-based wait calculation: appointment at ${appointmentTime.toISOString()}, wait=${waitTimeMinutes}min`);\n          return waitTimeMinutes;\n        }\n      } catch (error) {\n        console.error('Error fetching appointment for wait time calculation:', error);\n      }\n    }\n    \n    // Fallback for walk-ins or if appointment lookup fails\n    const createdAt = new Date(queueToken.createdAt);\n    const elapsedMinutes = Math.floor((now.getTime() - createdAt.getTime()) / (1000 * 60));\n    const averageConsultationTime = 15; // minutes - only used for walk-ins\n    const baseWaitTime = (queuePosition - 1) * averageConsultationTime;\n    const remainingWaitTime = Math.max(0, baseWaitTime - elapsedMinutes);\n    \n    console.log(`🔥 Fallback wait calculation: position=${queuePosition}, elapsed=${elapsedMinutes}min, base=${baseWaitTime}min, remaining=${remainingWaitTime}min`);\n    \n    return remainingWaitTime;\n  }\n\n  async updateEstimatedWaitTimes(doctorId: string): Promise<void> {\n    try {\n      const queue = await storage.getDoctorQueue(doctorId);\n      \n      // Update wait times dynamically for each waiting patient\n      for (let i = 0; i < queue.length; i++) {\n        const token = queue[i];\n        if (token.status === 'waiting') {\n          const queuePosition = i + 1; // 1-based position\n          const dynamicWaitTime = await this.calculateDynamicWaitTime(token, queuePosition);\n          \n          // Update the token with new wait time\n          await storage.updateQueueTokenWaitTime(token.id, dynamicWaitTime);\n        }\n      }\n      \n      // Broadcast update\n      await this.broadcastQueueUpdate(doctorId);\n    } catch (error) {\n      console.error('Failed to update wait times:', error);\n    }\n  }\n}\n\nexport const queueService = new QueueService();\n","size_bytes":7251},"server/services/scheduler.ts":{"content":"import cron from 'node-cron';\nimport { storage } from '../storage';\nimport { emailService } from './email';\n\nexport class SchedulerService {\n  private reminderCronJob: cron.ScheduledTask | null = null;\n  private appointmentReminderJob: cron.ScheduledTask | null = null;\n\n  start(): void {\n    this.startMedicineReminderScheduler();\n    this.startAppointmentReminderScheduler();\n  }\n\n  stop(): void {\n    if (this.reminderCronJob) {\n      this.reminderCronJob.stop();\n    }\n    if (this.appointmentReminderJob) {\n      this.appointmentReminderJob.stop();\n    }\n  }\n\n  private startMedicineReminderScheduler(): void {\n    // Check for due reminders every minute\n    this.reminderCronJob = cron.schedule('* * * * *', async () => {\n      try {\n        await this.processDueReminders();\n      } catch (error) {\n        console.error('Error processing due reminders:', error);\n      }\n    });\n  }\n\n  private startAppointmentReminderScheduler(): void {\n    // Check for appointment reminders every 30 minutes\n    this.appointmentReminderJob = cron.schedule('*/30 * * * *', async () => {\n      try {\n        await this.processAppointmentReminders();\n      } catch (error) {\n        console.error('Error processing appointment reminders:', error);\n      }\n    });\n  }\n\n  private async processDueReminders(): Promise<void> {\n    const dueReminders = await storage.getDueReminders();\n    \n    for (const reminder of dueReminders) {\n      try {\n        // Format time in Indian Standard Time for email\n        const istTime = reminder.scheduledAt.toLocaleTimeString('en-IN', { \n          hour: '2-digit', \n          minute: '2-digit',\n          timeZone: 'Asia/Kolkata'\n        });\n        \n        // Send email reminder with properly formatted IST time\n        await emailService.sendMedicineReminder(\n          reminder.prescription.patient.email,\n          reminder.prescription.medicine.name,\n          reminder.prescription.dosage,\n          istTime\n        );\n        \n        // Mark email as sent (would need to add this field update to storage)\n        // await storage.markReminderEmailSent(reminder.id);\n        \n      } catch (error) {\n        console.error(`Failed to send reminder for ${reminder.id}:`, error);\n      }\n    }\n  }\n\n  private async processAppointmentReminders(): Promise<void> {\n    // Send reminders 2 hours before appointment\n    const reminderTime = new Date();\n    reminderTime.setHours(reminderTime.getHours() + 2);\n    \n    const startTime = new Date(reminderTime);\n    startTime.setMinutes(startTime.getMinutes() - 30); // 30 minute window\n    \n    const endTime = new Date(reminderTime);\n    endTime.setMinutes(endTime.getMinutes() + 30);\n    \n    try {\n      const appointments = await storage.getAppointmentsByDate(new Date());\n      \n      for (const appointment of appointments) {\n        const appointmentTime = new Date(appointment.appointmentDate);\n        \n        if (appointmentTime >= startTime && appointmentTime <= endTime && \n            (appointment.status === 'scheduled' || appointment.status === 'confirmed')) {\n          \n          await emailService.sendAppointmentReminder(\n            appointment.patient.email,\n            `Dr. ${appointment.doctor.firstName} ${appointment.doctor.lastName}`,\n            appointmentTime.toLocaleString(),\n            appointment.location || 'Clinic'\n          );\n        }\n      }\n    } catch (error) {\n      console.error('Failed to process appointment reminders:', error);\n    }\n  }\n\n  async createMedicineReminders(prescriptionId: string): Promise<void> {\n    try {\n      const prescription = await storage.getPrescriptionWithDetails(prescriptionId);\n      if (!prescription) {\n        throw new Error('Prescription not found');\n      }\n\n      const startDate = new Date(prescription.startDate);\n      const endDate = prescription.endDate ? new Date(prescription.endDate) : null;\n      \n      // Use custom timings if available, otherwise fall back to frequency-based defaults\n      const reminderTimes = prescription.timings && prescription.timings.length > 0\n        ? this.parseCustomTimings(prescription.timings)\n        : this.calculateReminderTimes(prescription.frequency);\n      \n      const currentDate = new Date(startDate);\n      const maxDate = endDate || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days max\n      \n      while (currentDate <= maxDate) {\n        for (const time of reminderTimes) {\n          // Create reminder in Indian Standard Time (IST = UTC+5:30)\n          // User enters time in IST, but we need to store as UTC for consistency\n          \n          // First create the datetime in IST timezone\n          const istDateTime = new Date(\n            currentDate.getFullYear(),\n            currentDate.getMonth(),\n            currentDate.getDate(),\n            time.hour,\n            time.minute,\n            0,\n            0\n          );\n          \n          // Convert IST to UTC by subtracting 5 hours and 30 minutes\n          const reminderDateTime = new Date(istDateTime.getTime() - (5 * 60 + 30) * 60 * 1000);\n          \n          // Create reminders for today and future dates\n          // For custom medicines, create today's reminder even if the time has passed\n          const now = new Date();\n          const isToday = reminderDateTime.toDateString() === now.toDateString();\n          \n          if (reminderDateTime >= now || isToday) {\n            await storage.createMedicineReminder({\n              prescriptionId: prescription.id,\n              scheduledAt: reminderDateTime\n            });\n          }\n        }\n        \n        // Move to next day\n        currentDate.setDate(currentDate.getDate() + 1);\n      }\n    } catch (error) {\n      console.error('Failed to create medicine reminders:', error);\n      throw error;\n    }\n  }\n\n  private parseCustomTimings(timings: string[]): { hour: number; minute: number }[] {\n    return timings.map(time => {\n      const [hourStr, minuteStr] = time.split(':');\n      return {\n        hour: parseInt(hourStr, 10),\n        minute: parseInt(minuteStr, 10)\n      };\n    });\n  }\n\n  private calculateReminderTimes(frequency: string): { hour: number; minute: number }[] {\n    switch (frequency) {\n      case 'once_daily':\n        return [{ hour: 8, minute: 0 }]; // 8 AM - matches generateTimingsFromFrequency\n      case 'twice_daily':\n        return [\n          { hour: 8, minute: 0 },   // 8 AM\n          { hour: 20, minute: 0 }   // 8 PM\n        ];\n      case 'three_times_daily':\n        return [\n          { hour: 8, minute: 0 },   // 8 AM\n          { hour: 14, minute: 0 },  // 2 PM\n          { hour: 20, minute: 0 }   // 8 PM\n        ];\n      case 'four_times_daily':\n        return [\n          { hour: 8, minute: 0 },   // 8 AM\n          { hour: 12, minute: 0 },  // 12 PM\n          { hour: 16, minute: 0 },  // 4 PM\n          { hour: 20, minute: 0 }   // 8 PM\n        ];\n      case 'weekly':\n        return [{ hour: 8, minute: 0 }]; // Once per week at 8 AM\n      case 'monthly':\n        return [{ hour: 8, minute: 0 }]; // Once per month at 8 AM\n      default:\n        return [{ hour: 8, minute: 0 }]; // Default to once daily\n    }\n  }\n}\n\nexport const schedulerService = new SchedulerService();\n","size_bytes":7185},"server/services/sms.ts":{"content":"import { storage } from '../storage';\nimport twilio from 'twilio';\n\nconst TWILIO_ACCOUNT_SID = process.env.TWILIO_ACCOUNT_SID;\nconst TWILIO_AUTH_TOKEN = process.env.TWILIO_AUTH_TOKEN;\nconst TWILIO_PHONE_NUMBER = process.env.TWILIO_PHONE_NUMBER;\n\n// Initialize Twilio client if credentials are available\nlet twilioClient: twilio.Twilio | null = null;\nif (TWILIO_ACCOUNT_SID && TWILIO_AUTH_TOKEN) {\n  twilioClient = twilio(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN);\n}\n\nexport class SmsService {\n  async sendOtp(phoneNumber: string, otp: string): Promise<{ success: boolean; otp?: string; error?: string }> {\n    const message = `Your SmartClinic verification code is: ${otp}. This code will expire in 5 minutes.`;\n    \n    // Always log the OTP for debugging\n    console.log(`SMS to ${phoneNumber}: ${message}`);\n    \n    // Send actual SMS if Twilio is configured\n    if (twilioClient && TWILIO_PHONE_NUMBER) {\n      try {\n        await twilioClient.messages.create({\n          body: message,\n          from: TWILIO_PHONE_NUMBER,\n          to: phoneNumber\n        });\n        console.log(`SMS successfully sent to ${phoneNumber}`);\n        return { success: true };\n      } catch (error: any) {\n        console.error('Failed to send SMS via Twilio:', error);\n        \n        // For development/testing, return the OTP when SMS fails\n        if (process.env.NODE_ENV === 'development') {\n          console.log(`Development mode: Returning OTP in response for testing`);\n          return { success: false, otp, error: error.message };\n        }\n        \n        return { success: false, error: error.message };\n      }\n    } else {\n      console.log('Twilio not configured - OTP only available in console for development');\n      // For development, return the OTP\n      if (process.env.NODE_ENV === 'development') {\n        return { success: false, otp, error: 'Twilio not configured' };\n      }\n      return { success: false, error: 'SMS service not configured' };\n    }\n  }\n\n  async sendMedicineReminder(phoneNumber: string, medicineName: string, dosage: string, time: string): Promise<void> {\n    const message = `SmartClinic Reminder: Time to take your ${medicineName} (${dosage}) at ${time}. Don't forget to mark it as taken in the app!`;\n    \n    console.log(`Medicine reminder SMS to ${phoneNumber}: ${message}`);\n    \n    if (twilioClient && TWILIO_PHONE_NUMBER) {\n      try {\n        await twilioClient.messages.create({\n          body: message,\n          from: TWILIO_PHONE_NUMBER,\n          to: phoneNumber\n        });\n        console.log(`Medicine reminder SMS successfully sent to ${phoneNumber}`);\n      } catch (error) {\n        console.error('Failed to send medicine reminder SMS via Twilio:', error);\n      }\n    }\n  }\n\n  async sendDelayNotifications(doctorId: string, delayMinutes: number, reason?: string): Promise<void> {\n    try {\n      // Get today's appointments for this doctor\n      const today = new Date();\n      const appointments = await storage.getAppointmentsByDate(today, doctorId);\n      \n      let notificationsSent = 0;\n      \n      for (const appointment of appointments) {\n        if (appointment.status === 'scheduled' || appointment.status === 'confirmed') {\n          const message = `SmartClinic Update: Dr. ${appointment.doctor.firstName} ${appointment.doctor.lastName} is running ${delayMinutes} minutes late${reason ? ` due to ${reason}` : ''}. Your appointment time may be delayed. We apologize for the inconvenience.`;\n          \n          console.log(`Delay notification SMS to ${appointment.patient.phoneNumber}: ${message}`);\n          \n          if (twilioClient && TWILIO_PHONE_NUMBER) {\n            try {\n              await twilioClient.messages.create({\n                body: message,\n                from: TWILIO_PHONE_NUMBER,\n                to: appointment.patient.phoneNumber || ''\n              });\n              console.log(`Delay notification SMS successfully sent to ${appointment.patient.phoneNumber}`);\n            } catch (error) {\n              console.error('Failed to send delay notification SMS via Twilio:', error);\n            }\n          }\n          \n          notificationsSent++;\n        }\n      }\n\n      // Update delay notification record\n      const notifications = await storage.getActiveDelayNotifications(doctorId);\n      if (notifications.length > 0) {\n        // Update the most recent notification\n        // Note: This would need to be implemented in storage if needed\n      }\n      \n    } catch (error) {\n      console.error('Failed to send delay notifications:', error);\n    }\n  }\n\n  async sendAppointmentReminder(phoneNumber: string, doctorName: string, appointmentTime: string, location: string): Promise<void> {\n    const message = `SmartClinic Reminder: You have an appointment with ${doctorName} at ${appointmentTime} at ${location}. Please arrive 15 minutes early.`;\n    \n    console.log(`Appointment reminder SMS to ${phoneNumber}: ${message}`);\n    \n    if (twilioClient && TWILIO_PHONE_NUMBER) {\n      try {\n        await twilioClient.messages.create({\n          body: message,\n          from: TWILIO_PHONE_NUMBER,\n          to: phoneNumber\n        });\n        console.log(`Appointment reminder SMS successfully sent to ${phoneNumber}`);\n      } catch (error) {\n        console.error('Failed to send appointment reminder SMS via Twilio:', error);\n      }\n    }\n  }\n\n  async send(phoneNumber: string, message: string): Promise<void> {\n    console.log(`SMS to ${phoneNumber}: ${message}`);\n    \n    if (twilioClient && TWILIO_PHONE_NUMBER) {\n      try {\n        await twilioClient.messages.create({\n          body: message,\n          from: TWILIO_PHONE_NUMBER,\n          to: phoneNumber\n        });\n        console.log(`SMS successfully sent to ${phoneNumber}`);\n      } catch (error) {\n        console.error('Failed to send SMS via Twilio:', error);\n      }\n    }\n  }\n\n  async sendAppointmentRequest(phoneNumber: string, details: { doctorName: string; preferredDate: string; appointmentId: string }): Promise<void> {\n    const message = `SmartClinic: Your appointment request with ${details.doctorName} for ${details.preferredDate} has been submitted (ID: ${details.appointmentId}). You will receive a confirmation once reviewed.`;\n    \n    console.log(`Appointment request SMS to ${phoneNumber}: ${message}`);\n    \n    if (twilioClient && TWILIO_PHONE_NUMBER) {\n      try {\n        await twilioClient.messages.create({\n          body: message,\n          from: TWILIO_PHONE_NUMBER,\n          to: phoneNumber\n        });\n        console.log(`Appointment request SMS successfully sent to ${phoneNumber}`);\n      } catch (error) {\n        console.error('Failed to send appointment request SMS via Twilio:', error);\n      }\n    }\n  }\n\n  async sendAppointmentApproved(phoneNumber: string, details: { doctorName: string; appointmentDate: string; appointmentTime: string; appointmentId: string }): Promise<void> {\n    const message = `SmartClinic: Your appointment with ${details.doctorName} has been APPROVED for ${details.appointmentDate} at ${details.appointmentTime}. ID: ${details.appointmentId}`;\n    \n    console.log(`Appointment approved SMS to ${phoneNumber}: ${message}`);\n    \n    if (twilioClient && TWILIO_PHONE_NUMBER) {\n      try {\n        await twilioClient.messages.create({\n          body: message,\n          from: TWILIO_PHONE_NUMBER,\n          to: phoneNumber\n        });\n        console.log(`Appointment approved SMS successfully sent to ${phoneNumber}`);\n      } catch (error) {\n        console.error('Failed to send appointment approved SMS via Twilio:', error);\n      }\n    }\n  }\n\n  async sendAppointmentRejected(phoneNumber: string, details: { doctorName: string; reason: string; appointmentId: string }): Promise<void> {\n    const message = `SmartClinic: Your appointment request with ${details.doctorName} has been declined. Reason: ${details.reason}. Please contact us for alternative options. ID: ${details.appointmentId}`;\n    \n    console.log(`Appointment rejected SMS to ${phoneNumber}: ${message}`);\n    \n    if (twilioClient && TWILIO_PHONE_NUMBER) {\n      try {\n        await twilioClient.messages.create({\n          body: message,\n          from: TWILIO_PHONE_NUMBER,\n          to: phoneNumber\n        });\n        console.log(`Appointment rejected SMS successfully sent to ${phoneNumber}`);\n      } catch (error) {\n        console.error('Failed to send appointment rejected SMS via Twilio:', error);\n      }\n    }\n  }\n}\n\nexport const smsService = new SmsService();\n","size_bytes":8484},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem(\"auth_token\");\n  const headers: Record<string, string> = {};\n  \n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"auth_token\");\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers.Authorization = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1707},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import {\n  Bell,\n  Calendar,\n  Clock,\n  Home,\n  MapPin,\n  Phone,\n  Settings,\n  AlertTriangle,\n  Pill,\n  Stethoscope,\n  Activity,\n  UserCheck,\n  Zap,\n  User,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  MessageCircle,\n  Star,\n  Send,\n} from \"lucide-react\";\nimport BookingModal from \"@/components/BookingModal\";\nimport { EmergencyModal } from \"@/components/EmergencyModal\";\nimport CancelModal from \"@/components/CancelModal\";\nimport AppointmentDetailsModal from \"@/components/AppointmentDetailsModal\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { useQueueSocket } from \"@/hooks/useQueueSocket\";\n\n// Feedback form schema\nconst feedbackSchema = z.object({\n  rating: z.string().refine((val) => parseInt(val) >= 1 && parseInt(val) <= 5, {\n    message: \"Please provide a rating between 1 and 5\",\n  }),\n  comment: z.string().optional(),\n  categories: z.array(z.string()).min(1, {\n    message: \"Please select at least one feedback category\",\n  }),\n  appointmentId: z.string().optional(),\n  isAnonymous: z.boolean().default(false),\n});\n\ntype FeedbackFormData = z.infer<typeof feedbackSchema>;\n\nexport default function SmartClinicDashboard() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { theme, toggleTheme } = useTheme();\n  const queryClient = useQueryClient();\n  const [user, setUser] = useState<any>(null);\n\n  // Helper function to check if patient has appointment today\n  const hasAppointmentToday = (appointments: any[], doctorId?: string) => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    const hasToday = appointments?.some((appointment: any) => {\n      const appointmentDate = new Date(appointment.appointmentDate);\n      appointmentDate.setHours(0, 0, 0, 0);\n      const isToday = appointmentDate >= today && appointmentDate < tomorrow;\n      return isToday && (!doctorId || appointment.doctorId === doctorId);\n    });\n\n    console.log(\"🔥 hasAppointmentToday check:\", { \n      appointmentsCount: appointments?.length, \n      today: today.toDateString(),\n      hasToday,\n      appointments: appointments?.map(apt => ({\n        date: apt.appointmentDate,\n        dateOnly: new Date(apt.appointmentDate).toDateString()\n      }))\n    });\n\n    return hasToday;\n  };\n  const [showBookingModal, setShowBookingModal] = useState(false);\n  const [showEmergencyModal, setShowEmergencyModal] = useState(false);\n  const [showCancelModal, setShowCancelModal] = useState(false);\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [showFeedbackModal, setShowFeedbackModal] = useState(false);\n  const [showDoctorsModal, setShowDoctorsModal] = useState(false);\n  const [selectedAppointment, setSelectedAppointment] = useState<any>(null);\n  const [selectedDoctor, setSelectedDoctor] = useState<any>(null);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showLiveQueueModal, setShowLiveQueueModal] = useState(false);\n\n  // Format time in Indian Standard Time for consistent display\n  const formatTime = (time: string) => {\n    if (!time) return 'N/A';\n    \n    // Handle time string (HH:MM format)\n    if (time.includes(':') && !time.includes('T') && !time.includes('Z')) {\n      // Ensure proper time format\n      const timeFormatted = time.length === 5 ? `${time}:00` : time;\n      const date = new Date(`2000-01-01T${timeFormatted}`);\n      if (isNaN(date.getTime())) return time; // Return original if invalid\n      return date.toLocaleTimeString('en-IN', { \n        hour: '2-digit', \n        minute: '2-digit',\n        timeZone: 'Asia/Kolkata'\n      });\n    }\n    \n    // Handle full datetime string - convert from UTC to IST\n    const date = new Date(time);\n    if (isNaN(date.getTime())) return time; // Return original if invalid\n    \n    // Format in Indian Standard Time\n    return date.toLocaleTimeString('en-IN', { \n      hour: '2-digit', \n      minute: '2-digit',\n      timeZone: 'Asia/Kolkata'\n    });\n  };\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"auth_token\");\n    const userData = localStorage.getItem(\"user\");\n    \n    if (!token || !userData) {\n      setLocation(\"/login\");\n      return;\n    }\n    \n    setUser(JSON.parse(userData));\n  }, [setLocation]);\n\n  const { data: appointments = [] } = useQuery({\n    queryKey: [\"/api/appointments\"],\n    enabled: !!user,\n    refetchInterval: 3000, // Poll every 3 seconds for real-time updates\n    refetchOnWindowFocus: true,\n    staleTime: 0, // Always consider data stale for real-time sync\n  });\n\n  // Use WebSocket for real-time queue updates - for patients and admins with appointments\n  const appointmentsArray = Array.isArray(appointments) ? appointments : [];\n  const shouldUseQueueSocket = user?.role === \"patient\" || (user?.role === \"admin\" && appointmentsArray.length > 0);\n  const { queuePosition: liveQueuePosition, isConnected: queueConnected, refreshQueue } = useQueueSocket(\n    shouldUseQueueSocket ? user.id : undefined,\n    false // explicitly set isAdmin to false for regular dashboard\n  );\n  \n  // Fallback to API query if WebSocket not connected\n  const { data: queuePosition } = useQuery({\n    queryKey: [\"/api/queue/position\"],\n    enabled: !!user && (user.role === \"patient\" || user.role === \"admin\") && !queueConnected,\n  });\n  \n  // Use live queue position if available, otherwise fallback to API data\n  const currentQueuePosition = liveQueuePosition || queuePosition || {};\n\n  const { data: reminders = [] } = useQuery({\n    queryKey: [\"/api/reminders\"],\n    enabled: !!user, // Enable for all users, not just patients\n  });\n\n  // Calculate overdue medicines from reminders (same logic as medicines page)\n  const overdueReminders = Array.isArray(reminders) ? reminders.filter((r: any) => {\n    if (r.isTaken || r.isSkipped) return false;\n    const reminderTime = new Date(r.scheduledAt);\n    const now = new Date();\n    return reminderTime < now;\n  }) : [];\n  \n  const totalOverdue = overdueReminders.length;\n  const hasOverdue = totalOverdue > 0;\n\n  const { data: doctors = [] } = useQuery({\n    queryKey: [\"/api/users\", \"doctor\"],\n    queryFn: async () => {\n      const response = await apiRequest(\"GET\", \"/api/users?role=doctor\");\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  // Query for active delay notifications\n  const { data: delayNotifications = [] } = useQuery({\n    queryKey: [\"/api/delays\"],\n    refetchInterval: 30000, // Check every 30 seconds for real-time updates\n  });\n\n  // WebSocket connection for real-time queue updates  \n  const { queueTokens: liveQueue } = useQueueSocket(\n    user?.id, \n    user?.role === 'admin' || user?.role === 'staff'\n  );\n\n  // Get queue data for full queue view - use public endpoint for patients, admin for admins\n  const { data: apiAdminQueue = [] } = useQuery({\n    queryKey: [user?.role === 'admin' ? \"/api/queue/admin\" : \"/api/queue/public\"], \n    refetchInterval: 2000, // Faster refresh to pick up changes\n    retry: false, // Don't retry if unauthorized\n    staleTime: 0, // Always fetch fresh data\n    gcTime: 0, // Don't cache data\n  });\n\n  // Prioritize live WebSocket data and filter out completed patients\n  const rawAdminQueue = liveQueue && liveQueue.length > 0 ? liveQueue : apiAdminQueue || [];\n  \n  // Filter out completed patients and sort by token number for proper queue display\n  const adminQueue = Array.isArray(rawAdminQueue) ? \n    [...rawAdminQueue]\n      .filter((item: any) => item.status && !['completed', 'cancelled'].includes(item.status)) // Filter out completed patients\n      .sort((a: any, b: any) => (a.tokenNumber || 0) - (b.tokenNumber || 0)) // Sort by token number\n    : [];\n\n  // Process delay notifications\n  const delayNotificationsArray = Array.isArray(delayNotifications) ? delayNotifications : [];\n  const relevantDelays = delayNotificationsArray.filter((d: any) => \n    appointmentsArray.some((a: any) => a.doctorId === d.doctorId)\n  );\n\n  // Medicine reminder handlers\n  const markTakenMutation = useMutation({\n    mutationFn: async (reminderId: string) => {\n      const response = await apiRequest(\"PUT\", `/api/reminders/${reminderId}`, {\n        status: \"taken\"\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reminders\"] });\n      toast({\n        title: \"Medicine Marked as Taken\",\n        description: \"Your medicine reminder has been updated.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update reminder\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const snoozeReminderMutation = useMutation({\n    mutationFn: async (reminderId: string) => {\n      const response = await apiRequest(\"PUT\", `/api/reminders/${reminderId}`, {\n        status: \"snoozed\"\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reminders\"] });\n      toast({\n        title: \"Reminder Snoozed\",\n        description: \"Medicine reminder snoozed for 15 minutes.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to snooze reminder\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleMarkTaken = (reminderId: string) => {\n    markTakenMutation.mutate(reminderId);\n  };\n\n  const handleSnoozeReminder = (reminderId: string) => {\n    snoozeReminderMutation.mutate(reminderId);\n  };\n\n  // Add new reminder action handlers\n  const handleSkipReminder = (reminderId: string) => {\n    skipReminderMutation.mutate(reminderId);\n  };\n\n  const handleResetReminder = (reminderId: string) => {\n    resetReminderMutation.mutate(reminderId);\n  };\n\n  // Skip reminder mutation\n  const skipReminderMutation = useMutation({\n    mutationFn: async (reminderId: string) => {\n      const response = await apiRequest(\"PUT\", `/api/reminders/${reminderId}`, { status: 'skipped' });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reminders\"] });\n      toast({\n        title: \"Medicine Skipped\",\n        description: \"Medicine reminder has been marked as skipped.\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to skip reminder\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Reset reminder mutation for corrections\n  const resetReminderMutation = useMutation({\n    mutationFn: async (reminderId: string) => {\n      const response = await apiRequest(\"PUT\", `/api/reminders/${reminderId}`, { status: 'not_taken' });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reminders\"] });\n      toast({\n        title: \"Reminder Reset\",\n        description: \"Medicine reminder has been reset. You can now mark it as taken or skipped again.\"\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to reset reminder\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Mutations for interactive functionality\n  const joinQueueMutation = useMutation({\n    mutationFn: async (doctorId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/queue/join\", { doctorId });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Queue Joined\",\n        description: \"You have been added to the queue successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/queue/position\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to join queue\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const checkInMutation = useMutation({\n    mutationFn: async (data: { latitude: number; longitude: number; workLocation: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/staff/checkin\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Checked In\",\n        description: \"Successfully checked in at work location.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Check-in Failed\",\n        description: error.message || \"Failed to check in\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"auth_token\");\n    localStorage.removeItem(\"user\");\n    setLocation(\"/login\");\n    toast({\n      title: \"Logged out\",\n      description: \"You have been successfully logged out.\",\n    });\n  };\n\n  const handleJoinQueue = () => {\n    // Check if user is already in queue\n    if (queuePosition && (queuePosition as any).status === 'waiting') {\n      toast({\n        title: \"Already in Queue\",\n        description: `You are already in the queue at position #${(queuePosition as any).tokenNumber}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (doctors.length > 0) {\n      // Use the first available doctor for demo\n      const doctorId = doctors[0].id;\n      joinQueueMutation.mutate(doctorId);\n    } else {\n      toast({\n        title: \"No Doctors Available\",\n        description: \"Please try again later when doctors are available.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCheckIn = () => {\n    // Check-in is only for staff/doctors, show appropriate message for patients\n    if (user.role === 'patient') {\n      toast({\n        title: \"Patient Check-in\",\n        description: \"Patients check in at the reception desk. This feature is for staff members.\",\n      });\n      return;\n    }\n\n    // Redirect to dedicated staff check-in page for better GPS verification\n    setLocation(\"/staff-checkin\");\n  };\n\n  const [isBookingModalOpen, setIsBookingModalOpen] = useState(false);\n\n  const handleBookAppointment = () => {\n    setIsBookingModalOpen(true);\n  };\n\n  const [bookingData, setBookingData] = useState({\n    doctorId: \"\",\n    appointmentDate: \"\",\n    appointmentTime: \"\",\n    type: \"clinic\",\n    notes: \"\"\n  });\n\n  const bookNowMutation = useMutation({\n    mutationFn: async () => {\n      if (doctors.length === 0) throw new Error(\"No doctors available\");\n      \n      const doctor = doctors[0];\n      const now = new Date();\n      const tomorrow = new Date(now);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      \n      const appointmentData = {\n        doctorId: doctor.id,\n        appointmentDate: tomorrow.toISOString().split('T')[0],\n        appointmentTime: \"09:00\",\n        type: \"clinic\",\n        notes: \"Quick booking for next available slot\"\n      };\n      \n      const response = await apiRequest(\"POST\", \"/api/appointments\", appointmentData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      toast({\n        title: \"Appointment Booked\",\n        description: \"Your appointment has been scheduled for tomorrow at 9:00 AM.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to book appointment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBookNow = () => {\n    bookNowMutation.mutate();\n  };\n\n  // Reschedule and cancel handlers\n  const rescheduleAppointmentMutation = useMutation({\n    mutationFn: async ({ appointmentId, appointmentData }: { appointmentId: string, appointmentData: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/appointments/${appointmentId}`, appointmentData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      setShowBookingModal(false);\n      toast({\n        title: \"Appointment Rescheduled\",\n        description: \"Your appointment has been successfully rescheduled.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Reschedule Failed\",\n        description: error.message || \"Failed to reschedule appointment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const cancelAppointmentMutation = useMutation({\n    mutationFn: async (appointmentId: string) => {\n      const response = await apiRequest(\"PUT\", `/api/appointments/${appointmentId}/cancel`, {\n        reason: \"Cancelled by patient\"\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      toast({\n        title: \"Appointment Cancelled\",\n        description: \"Your appointment has been cancelled successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Cancellation Failed\",\n        description: error.message || \"Failed to cancel appointment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRescheduleAppointment = (appointment: any) => {\n    setSelectedAppointment(appointment);\n    setBookingData({\n      doctorId: appointment.doctorId,\n      appointmentDate: appointment.appointmentDate.split('T')[0],\n      appointmentTime: new Date(appointment.appointmentDate).toLocaleTimeString('en-IN', {hour12: false, hour: '2-digit', minute: '2-digit', timeZone: 'Asia/Kolkata'}),\n      type: appointment.type,\n      notes: appointment.notes || \"\"\n    });\n    setShowBookingModal(true);\n  };\n\n  const handleCancelAppointment = (appointment: any) => {\n    setSelectedAppointment(appointment);\n    setShowCancelModal(true);\n  };\n\n  // Feedback form setup\n  const feedbackForm = useForm<FeedbackFormData>({\n    resolver: zodResolver(feedbackSchema),\n    defaultValues: {\n      rating: \"\",\n      comment: \"\",\n      categories: [],\n      appointmentId: \"none\",\n      isAnonymous: false,\n    },\n  });\n\n  // Feedback submission mutation\n  const submitFeedbackMutation = useMutation({\n    mutationFn: async (feedbackData: FeedbackFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/feedback\", {\n        ...feedbackData,\n        rating: parseInt(feedbackData.rating),\n        appointmentId: feedbackData.appointmentId === \"none\" ? null : feedbackData.appointmentId || null,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Feedback Submitted\",\n        description: \"Thank you for your feedback! It helps us improve our service.\",\n      });\n      setShowFeedbackModal(false);\n      feedbackForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Submission Failed\",\n        description: error.message || \"Failed to submit feedback\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmitFeedback = (data: FeedbackFormData) => {\n    submitFeedbackMutation.mutate(data);\n  };\n\n  if (!user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 sm:px-6 py-4\">\n        <div className=\"flex items-center justify-between max-w-7xl mx-auto\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-blue-500 rounded-lg flex items-center justify-center\">\n              <Stethoscope className=\"w-4 h-4 sm:w-6 sm:h-6 text-white\" />\n            </div>\n            <div className=\"hidden sm:block\">\n              <h1 className=\"text-lg sm:text-xl font-semibold text-black dark:text-white\">SmartClinic</h1>\n              <p className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-300\">Healthcare Manager</p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2 sm:gap-4\">\n            <button \n              onClick={() => {\n                toast({\n                  title: \"Notifications\",\n                  description: \"You have 3 new notifications\",\n                });\n              }}\n              className=\"relative hover:bg-gray-100 dark:hover:bg-gray-700 p-2 rounded-full transition-colors\"\n            >\n              <Bell className=\"w-5 h-5 text-gray-600 dark:text-gray-300\" />\n              <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-medium\">\n                3\n              </div>\n            </button>\n\n            <div className=\"flex flex-col items-end gap-1\">\n              <span className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\n                {user.firstName && user.lastName \n                  ? `${user.firstName} ${user.lastName}`\n                  : user.firstName || user.email?.split('@')[0] || user.phoneNumber\n                }\n              </span>\n              <div className=\"flex items-center gap-2\">\n                <Badge className=\"bg-green-500 text-white text-xs px-2 py-1 rounded-full capitalize\">\n                  {user.role}\n                </Badge>\n                {user.email && (\n                  <span className=\"text-xs text-gray-500 dark:text-gray-400 hidden sm:block\">\n                    {user.email}\n                  </span>\n                )}\n              </div>\n            </div>\n\n            {/* Staff Check-in Link */}\n            {(user.role === 'doctor' || user.role === 'staff' || user.role === 'nurse') && (\n              <button \n                onClick={() => setLocation(\"/staff-checkin\")}\n                className=\"flex items-center gap-2 px-3 py-2 bg-blue-100 hover:bg-blue-200 text-blue-700 rounded-lg transition-colors text-sm font-medium\"\n                title=\"GPS Check-in\"\n              >\n                <MapPin className=\"w-4 h-4\" />\n                <span className=\"hidden sm:inline\">Check-in</span>\n              </button>\n            )}\n\n            <button \n              onClick={() => setLocation(\"/profile\")}\n              className=\"w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center hover:bg-gray-200 transition-colors\"\n            >\n              <User className=\"w-4 h-4 text-gray-600\" />\n            </button>\n\n            <button \n              onClick={() => setLocation(\"/settings\")} \n              className=\"w-5 h-5 text-gray-600 hover:text-gray-800 transition-colors\"\n            >\n              <Settings className=\"w-5 h-5\" />\n            </button>\n\n            <button onClick={handleLogout} className=\"w-5 h-5 text-gray-600\">\n              <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\">\n                <path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\" />\n                <polyline points=\"16,17 21,12 16,7\" />\n                <line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-blue-500 to-blue-600 px-4 sm:px-6 py-8 sm:py-12 relative overflow-hidden\">\n        <div className=\"max-w-7xl mx-auto relative z-10\">\n          <div className=\"text-white mb-6 sm:mb-8\">\n            <h2 className=\"text-2xl sm:text-3xl lg:text-4xl font-bold mb-2\">\n              {(() => {\n                // Check if user just signed up (new account detection)\n                const userCreatedDate = user.createdAt ? new Date(user.createdAt) : null;\n                const isNewUser = userCreatedDate && (Date.now() - userCreatedDate.getTime()) < 24 * 60 * 60 * 1000; // Last 24 hours\n                \n                if (isNewUser) {\n                  return `Welcome to SmartClinic, ${user.firstName || \"User\"}!`;\n                } else {\n                  return `Welcome back, ${user.firstName || \"User\"}!`;\n                }\n              })()}\n            </h2>\n            <div className=\"space-y-1\">\n              <p className=\"text-blue-100 text-base sm:text-lg\">\n                {user.role === 'patient' \n                  ? 'Manage your healthcare with smart tools'\n                  : `${user.role.charAt(0).toUpperCase() + user.role.slice(1)} Dashboard - Healthcare Management`\n                }\n              </p>\n              {user.firstName && user.lastName && user.email && (\n                <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-4 text-blue-200 text-sm\">\n                  <span>📧 {user.email}</span>\n                  {user.phoneNumber && (\n                    <span>📞 {user.phoneNumber}</span>\n                  )}\n                  {user.dateOfBirth && (\n                    <span>🎂 {new Date(user.dateOfBirth).toLocaleDateString()}</span>\n                  )}\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row gap-4 items-stretch sm:items-center\">\n            <Button \n              className=\"bg-green-500 hover:bg-green-600 text-white px-4 sm:px-6 py-3 w-full sm:w-auto\"\n              onClick={() => setShowBookingModal(true)}\n            >\n              <Calendar className=\"w-4 h-4 mr-2\" />\n              Book Appointment\n            </Button>\n            <div className=\"bg-white rounded-lg px-4 py-3 flex-1 max-w-full sm:max-w-md cursor-pointer\" onClick={() => setShowDoctorsModal(true)}>\n              <Input\n                placeholder=\"Search doctors, specialties...\"\n                className=\"border-0 p-0 focus-visible:ring-0 text-sm sm:text-base cursor-pointer\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                readOnly\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Main Dashboard */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 py-6 sm:py-8\">\n        {/* Status Cards */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n          {/* Next Appointment */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-600 flex items-center gap-2\">\n                <Calendar className=\"w-4 h-4 text-blue-500\" />\n                Next Appointment\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold mb-1\">\n                {appointmentsArray.length > 0 \n                  ? new Date(appointmentsArray[0].appointmentDate).toLocaleTimeString('en-IN', {hour: 'numeric', minute: '2-digit', hour12: true, timeZone: 'Asia/Kolkata'})\n                  : \"None\"\n                }\n              </div>\n              <div className=\"text-sm text-gray-600 mb-2\">\n                {appointmentsArray.length > 0 \n                  ? `Dr. ${appointmentsArray[0].doctor?.firstName} ${appointmentsArray[0].doctor?.lastName} - ${appointmentsArray[0].type}`\n                  : \"No upcoming appointments\"\n                }\n              </div>\n              {appointmentsArray.length > 0 && (\n                <div className=\"mb-2\">\n                  <Badge className={`text-xs ${\n                    appointmentsArray[0].status === 'pending_approval' \n                      ? 'bg-yellow-100 text-yellow-800' \n                      : appointmentsArray[0].status === 'scheduled' \n                      ? 'bg-green-100 text-green-800'\n                      : appointmentsArray[0].status === 'cancelled'\n                      ? 'bg-red-100 text-red-800'\n                      : appointmentsArray[0].status === 'completed'\n                      ? 'bg-blue-100 text-blue-800'\n                      : 'bg-gray-100 text-gray-800'\n                  }`}>\n                    {appointmentsArray[0].status === 'pending_approval' ? 'Pending Approval' : appointmentsArray[0].status}\n                  </Badge>\n                </div>\n              )}\n              {appointmentsArray.length > 0 && (\n                <div className=\"text-xs text-gray-500 mb-4\">\n                  {new Date(appointmentsArray[0].appointmentDate).toLocaleDateString('en-IN', { \n                    weekday: 'short', month: 'short', day: 'numeric', year: 'numeric', timeZone: 'Asia/Kolkata' \n                  })}\n                </div>\n              )}\n              <div className=\"flex gap-2\">\n                <Button \n                  className=\"flex-1 bg-blue-500 hover:bg-blue-600\" \n                  size=\"sm\"\n                  onClick={() => {\n                    if (appointmentsArray.length > 0) {\n                      setSelectedAppointment(appointmentsArray[0]);\n                      setShowDetailsModal(true);\n                    }\n                  }}\n                >\n                  View Details\n                </Button>\n                {appointmentsArray.length > 0 && (\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => {\n                      setSelectedAppointment(appointmentsArray[0]);\n                      setShowCancelModal(true);\n                    }}\n                    className=\"text-red-600 hover:text-red-700 border-red-200 hover:border-red-300\"\n                  >\n                    Cancel\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Queue Position */}\n          <Card>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-600 flex items-center gap-2\">\n                <Activity className=\"w-4 h-4 text-green-500\" />\n                Queue Position\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold mb-1\">\n                {currentQueuePosition ? `#${(currentQueuePosition as any).tokenNumber}` : \"Not in queue\"}\n              </div>\n              <div className=\"text-sm text-gray-600 mb-4\">\n                {currentQueuePosition ? \n                  `Estimated wait: ${(currentQueuePosition as any).estimatedWaitTime || 0} minutes` : \n                  \"Join queue when you arrive\"\n                }\n              </div>\n              <Button \n                className=\"w-full bg-green-500 hover:bg-green-600\"\n                onClick={() => setLocation(\"/live-queue\")}\n                data-testid=\"button-track-live-queue\"\n              >\n                Track Live\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Pending Medicines */}\n          <Card className={`border-orange-200 ${hasOverdue ? 'flash-border-urgent' : ''}`}>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-600 flex items-center gap-2\">\n                <Pill className=\"w-4 h-4 text-orange-500\" />\n                Pending Medicines\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-2 mb-1\">\n                <span className={`text-2xl font-bold ${hasOverdue ? 'text-white' : ''}`}>\n                  {Array.isArray(reminders) ? reminders.filter((r: any) => !r.isTaken).length : 0}\n                </span>\n                {hasOverdue && (\n                  <Badge className=\"bg-red-600 text-white text-sm font-bold flash-urgent ml-2\">URGENT</Badge>\n                )}\n              </div>\n              <div className={`text-sm mb-4 font-medium ${\n                hasOverdue ? 'flash-urgent text-white' : 'text-gray-600'\n              }`}>\n                {hasOverdue ? `🚨 ${totalOverdue} DOSE(S) OVERDUE` : `${totalOverdue} dose(s) overdue`}\n              </div>\n              <Button \n                className={`w-full ${hasOverdue ? 'flash-urgent' : 'bg-orange-500 hover:bg-orange-600'}`}\n                onClick={() => setLocation(\"/medicines\")}\n                data-testid=\"button-manage-medicines\"\n              >\n                {hasOverdue ? '🚨 Manage Medicines' : 'Manage Medicines'}\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Doctor Status */}\n          <Card className={`border-red-200 ${delayNotificationsArray.length > 0 ? 'glow-delay' : ''}`}>\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm font-medium text-gray-600 flex items-center gap-2\">\n                <Clock className=\"w-4 h-4 text-red-500\" />\n                Doctor Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!hasAppointmentToday(appointmentsArray) ? (\n                // No appointment today - show message only\n                <div>\n                  <div className=\"flex items-center gap-2 mb-1\">\n                    <span className=\"text-lg text-gray-500\">No appointments today</span>\n                  </div>\n                  <div className=\"text-sm text-gray-500 mb-4\">Doctor status will be shown on your appointment day</div>\n                </div>\n              ) : (\n                // Has appointment today - show status and button\n                <div>\n                  {(() => {\n                    // Group delay notifications by doctor and keep only the latest one for each doctor\n                    // Filter to only show delays for doctors with whom patient has appointment today\n                    const latestDelaysByDoctor = delayNotificationsArray.reduce((acc: any, delay: any) => {\n                      if (hasAppointmentToday(appointmentsArray, delay.doctorId)) {\n                        if (!acc[delay.doctorId] || new Date(delay.createdAt) > new Date(acc[delay.doctorId].createdAt)) {\n                          acc[delay.doctorId] = delay;\n                        }\n                      }\n                      return acc;\n                    }, {});\n                    \n                    const relevantDelays = Object.values(latestDelaysByDoctor);\n                    \n                    if (relevantDelays.length > 0) {\n                      return relevantDelays.map((delay: any) => {\n                        const doctorsArray = Array.isArray(doctors) ? doctors : [];\n                        const doctor = doctorsArray.find((d: any) => d.id === delay.doctorId);\n                        return (\n                          <div key={delay.id} className=\"mb-4 glow-delay p-3 rounded-lg\">\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <span className=\"text-2xl font-bold flash-delay text-white\">Delayed</span>\n                              <Badge className=\"bg-orange-600 text-white text-sm font-bold flash-delay\">URGENT</Badge>\n                            </div>\n                            <div className=\"text-sm mb-4 flash-delay text-white font-medium\">\n                              🕒 Dr. {doctor?.firstName || 'Unknown'} {doctor?.lastName || 'Doctor'} is running {delay.delayMinutes} minutes late\n                              {delay.reason && (\n                                <div className=\"text-xs mt-1 text-orange-100\">Reason: {delay.reason}</div>\n                              )}\n                            </div>\n                          </div>\n                        );\n                      });\n                    } else {\n                      return (\n                        <div>\n                          <div className=\"flex items-center gap-2 mb-1\">\n                            <span className=\"text-2xl font-bold text-green-600\">On Time</span>\n                          </div>\n                          <div className=\"text-sm text-gray-600 mb-4\">Your doctor is on schedule today</div>\n                        </div>\n                      );\n                    }\n                  })()}\n                  <Button \n                    className={`w-full ${relevantDelays.length > 0 ? 'bg-orange-500 hover:bg-orange-600 pulse-delay' : 'bg-blue-500 hover:bg-blue-600'}`}\n                    onClick={() => {\n                      queryClient.invalidateQueries({ queryKey: [\"/api/delays\"] });\n                      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n                      queryClient.invalidateQueries({ queryKey: [\"/api/queue/position\"] });\n                      toast({\n                        title: \"Updates Retrieved\",\n                        description: \"Doctor schedule and appointment status updated successfully.\",\n                      });\n                    }}\n                  >\n                    Get Updates\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Grid */}\n        <div className={`grid gap-6 sm:gap-8 ${\n          hasAppointmentToday(appointmentsArray) \n            ? 'grid-cols-1 xl:grid-cols-3' \n            : 'grid-cols-1 md:grid-cols-2'\n        }`}>\n          {/* Live Queue Tracker - Only show if patient has appointment today */}\n          {hasAppointmentToday(appointmentsArray) ? (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Activity className=\"w-5 h-5 text-blue-500\" />\n                  Live Queue Tracker\n                </CardTitle>\n              </CardHeader>\n            <CardContent>\n              <div className=\"bg-blue-500 text-white rounded-lg p-6 text-center mb-6\">\n                <div className=\"text-sm mb-2\">\n                  Queue Position\n                  {queueConnected && <span className=\"ml-2 text-green-400\">● Live</span>}\n                </div>\n                <div className=\"text-4xl font-bold mb-2\">\n                  #{(currentQueuePosition as any)?.tokenNumber || 'N/A'}\n                </div>\n                <div className=\"text-sm mb-4\">\n                  Estimated wait: {(currentQueuePosition as any)?.estimatedWaitTime ? `${(currentQueuePosition as any).estimatedWaitTime} minutes` : 'Check with reception'}\n                </div>\n                <Button \n                  className=\"w-full bg-green-600 hover:bg-green-700 text-white font-medium\"\n                  onClick={() => setLocation(\"/live-queue\")}\n                  data-testid=\"button-track-live\"\n                >\n                  Track Live\n                </Button>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"text-xs text-orange-600 mb-2 font-medium\">\n                  ⚠️ Delays Expected - {adminQueue.filter((t: any) => t.status === 'waiting').length} patients waiting\n                </div>\n                \n                {/* Display real queue data from admin API */}\n                {adminQueue && adminQueue.length > 0 ? (\n                  adminQueue.slice(0, 3).map((token: any, index: number) => {\n                    const isInProgress = token.status === 'called' || token.status === 'in_progress';\n                    const isNext = index === 0 && token.status === 'waiting';\n                    const bgColor = isInProgress ? 'bg-green-50' : isNext ? 'bg-blue-50' : 'bg-orange-50';\n                    const badgeColor = isInProgress ? 'bg-green-500' : isNext ? 'bg-blue-500' : 'bg-orange-500';\n                    const borderColor = isInProgress ? 'border-green-500' : '';\n                    const statusText = isInProgress ? 'In Progress' : isNext ? 'Next' : '';\n                    \n                    return (\n                      <div key={token.id} className={`flex items-center justify-between p-3 ${bgColor} rounded-lg ${borderColor ? 'border-l-4 ' + borderColor : ''}`}>\n                        <div className=\"flex items-center gap-3\">\n                          <Badge className={`${badgeColor} text-white`}>#{token.tokenNumber}</Badge>\n                          <div>\n                            <div className=\"text-sm font-medium\">\n                              {token.patient?.firstName} {token.patient?.lastName} {statusText && `- ${statusText}`}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              {isInProgress ? `Started at ${new Date(token.calledAt || Date.now()).toLocaleTimeString('en-IN', {hour: '2-digit', minute: '2-digit', timeZone: 'Asia/Kolkata'})}` : \n                               `Est. wait: ${token.estimatedWaitTime || 15} min`}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className={`text-sm font-medium ${isInProgress ? 'text-green-600' : ''}`}>\n                            {isInProgress ? 'Active' : `~${token.estimatedWaitTime || 15}min`}\n                          </div>\n                          <div className=\"text-xs text-gray-500\">\n                            {isInProgress ? 'in session' : 'est. wait'}\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })\n                ) : (\n                  <div className=\"text-center py-4 text-gray-500\">\n                    <div className=\"text-sm\">No patients in queue currently</div>\n                    <div className=\"text-xs\">Queue data will appear here</div>\n                  </div>\n                )}\n\n                {/* Show additional waiting patients if any */}\n                {adminQueue.filter((t: any) => t.status === 'waiting').length > 3 && (\n                  <div className=\"space-y-2 mt-3\">\n                    {adminQueue.filter((t: any) => t.status === 'waiting').slice(3, 6).map((token: any, index: number) => (\n                      <div key={token.id} className=\"flex items-center justify-between text-xs text-gray-500\">\n                        <span>#{token.tokenNumber} - {token.patient?.firstName} {token.patient?.lastName}</span>\n                        <span>~{token.estimatedWaitTime || (15 * (index + 4))}min wait</span>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              <div className=\"flex gap-2 mt-4\">\n                <Button \n                  variant=\"outline\" \n                  className=\"flex-1 bg-transparent\"\n                  onClick={() => {\n                    queryClient.invalidateQueries({ queryKey: [\"/api/queue/position\"] });\n                    toast({\n                      title: \"Queue Refreshed\",\n                      description: \"Queue information has been updated.\",\n                    });\n                  }}\n                >\n                  Refresh Queue\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n          ) : null}\n\n          {/* Medicine Reminders */}\n          <Card className={hasOverdue ? 'glow-urgent' : ''}>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Pill className=\"w-5 h-5 text-orange-500\" />\n                Medicine Reminders\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex justify-center gap-4 mb-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {Array.isArray(reminders) ? reminders.filter((r: any) => !r.isTaken && !r.isSkipped).length : 0}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">Due Today</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">\n                    {Array.isArray(reminders) ? reminders.filter((r: any) => r.isTaken).length : 0}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">Completed</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-red-600\">\n                    {Array.isArray(reminders) ? reminders.filter((r: any) => r.isSkipped).length : 0}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">Missed</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {Array.isArray(reminders) ? reminders.filter((r: any) => {\n                      const scheduledTime = new Date(r.scheduledAt);\n                      const now = new Date();\n                      return !r.isTaken && !r.isSkipped && scheduledTime < now;\n                    }).length : 0}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">Overdue</div>\n                </div>\n              </div>\n\n              {Array.isArray(reminders) && reminders.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {reminders.slice(0, 2).map((reminder: any) => (\n                    <div key={reminder.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium\">{reminder.medicineName || reminder.prescription?.medicine?.name || 'Medicine'}</span>\n                          <Pill className=\"w-4 h-4 text-blue-500\" />\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-sm font-medium\">\n                            {formatTime(reminder.scheduledAt)}\n                          </div>\n                          {!reminder.isTaken && new Date(reminder.scheduledAt) < new Date() && (\n                            <Badge className=\"bg-red-100 text-red-800 text-xs\">Overdue</Badge>\n                          )}\n                        </div>\n                      </div>\n                      <div className=\"text-sm text-gray-600 mb-2\">{reminder.dosage || reminder.prescription?.dosage || 'As prescribed'}</div>\n                      <div className=\"flex gap-2\">\n                        {!reminder.isTaken && !reminder.isSkipped ? (\n                          <>\n                            <Button \n                              size=\"sm\" \n                              className=\"flex-1 bg-green-500 hover:bg-green-600\"\n                              onClick={() => handleMarkTaken(reminder.id)}\n                            >\n                              <CheckCircle className=\"w-3 h-3 mr-1\" />\n                              Taken\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              className=\"flex-1 bg-transparent\"\n                              onClick={() => handleSkipReminder(reminder.id)}\n                            >\n                              <XCircle className=\"w-3 h-3 mr-1\" />\n                              Skip\n                            </Button>\n                          </>\n                        ) : (\n                          <>\n                            <Badge className={reminder.isTaken ? \"bg-green-500\" : \"bg-gray-500\"}>\n                              {reminder.isTaken ? (\n                                <>\n                                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                  Taken\n                                </>\n                              ) : (\n                                <>\n                                  <XCircle className=\"w-3 h-3 mr-1\" />\n                                  Skipped\n                                </>\n                              )}\n                            </Badge>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              className=\"flex-1 bg-orange-500 hover:bg-orange-600 text-white\"\n                              onClick={() => handleResetReminder(reminder.id)}\n                            >\n                              <AlertCircle className=\"w-3 h-3 mr-1\" />\n                              Correct\n                            </Button>\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-gray-500\">\n                  No medicine reminders for today\n                </div>\n              )}\n\n              <Button \n                className=\"w-full mt-4 bg-blue-500 hover:bg-blue-600\"\n                onClick={() => setLocation(\"/medicines\")}\n              >\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                View Full Schedule\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Appointments */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Calendar className=\"w-5 h-5 text-blue-500\" />\n                Appointments\n\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex justify-center gap-8 mb-6\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    {appointmentsArray.length || 0}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">Upcoming</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">0</div>\n                  <div className=\"text-xs text-gray-500\">Home Visits</div>\n                </div>\n              </div>\n\n              {appointmentsArray.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {appointmentsArray.slice(0, 2).map((appointment: any) => (\n                    <div key={appointment.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium\">\n                            Dr. {appointment.doctor.firstName} {appointment.doctor.lastName}\n                          </span>\n                          <Badge className={`text-xs ${\n                            appointment.status === 'pending_approval' \n                              ? 'bg-yellow-100 text-yellow-800' \n                              : appointment.status === 'scheduled' \n                              ? 'bg-green-100 text-green-800'\n                              : appointment.status === 'cancelled'\n                              ? 'bg-red-100 text-red-800'\n                              : appointment.status === 'completed'\n                              ? 'bg-blue-100 text-blue-800'\n                              : 'bg-gray-100 text-gray-800'\n                          }`}>\n                            {appointment.status === 'pending_approval' ? 'Pending Approval' : appointment.status}\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center gap-1 text-sm text-gray-600\">\n                          <Stethoscope className=\"w-3 h-3\" />\n                          {appointment.type}\n                        </div>\n                      </div>\n                      <div className=\"text-sm text-gray-500 mb-3\">{appointment.location}</div>\n                      <div className=\"flex items-center gap-2 mb-3\">\n                        <Calendar className=\"w-4 h-4 text-gray-400\" />\n                        <span className=\"text-sm\">\n                          {new Date(appointment.appointmentDate).toLocaleDateString('en-IN', {timeZone: 'Asia/Kolkata'})}\n                        </span>\n                        <Clock className=\"w-4 h-4 text-gray-400 ml-2\" />\n                        <span className=\"text-sm\">\n                          {new Date(appointment.appointmentDate).toLocaleTimeString('en-IN', {hour: 'numeric', minute: '2-digit', hour12: true, timeZone: 'Asia/Kolkata'})}\n                        </span>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\" \n                          className=\"flex-1 text-red-600 border-red-200 bg-transparent\"\n                          onClick={() => handleCancelAppointment(appointment)}\n                        >\n                          Cancel\n                        </Button>\n                        <Button \n                          size=\"sm\" \n                          className=\"flex-1 bg-blue-500 hover:bg-blue-600\"\n                          onClick={() => {\n                            setSelectedAppointment(appointment);\n                            setShowDetailsModal(true);\n                          }}\n                        >\n                          View Details\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-gray-500\">\n                  No upcoming appointments\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Quick Actions */}\n        <div className=\"mt-8\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Zap className=\"w-5 h-5 text-blue-500\" />\n                Quick Actions\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-3 sm:gap-4\">\n                <Button\n                  variant=\"outline\"\n                  className=\"h-16 sm:h-20 flex-col gap-1 sm:gap-2 bg-transparent text-xs sm:text-sm\"\n                  onClick={handleCheckIn}\n                  disabled={checkInMutation.isPending}\n                >\n                  <UserCheck className=\"w-5 h-5 sm:w-6 sm:h-6 text-green-500\" />\n                  <span>{checkInMutation.isPending ? \"Checking...\" : \"Check In\"}</span>\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"h-16 sm:h-20 flex-col gap-1 sm:gap-2 bg-transparent text-xs sm:text-sm\"\n                  onClick={() => setLocation(\"/medicines\")}\n                >\n                  <Pill className=\"w-5 h-5 sm:w-6 sm:h-6 text-purple-500\" />\n                  <span>Medicines</span>\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  className=\"h-16 sm:h-20 flex-col gap-1 sm:gap-2 bg-transparent text-xs sm:text-sm\"\n                  onClick={() => setShowEmergencyModal(true)}\n                >\n                  <AlertTriangle className=\"w-5 h-5 sm:w-6 sm:h-6 text-red-500\" />\n                  <span>Emergency</span>\n                </Button>\n\n                <Button\n                  variant=\"outline\"\n                  className=\"h-16 sm:h-20 flex-col gap-1 sm:gap-2 bg-transparent text-xs sm:text-sm\"\n                  onClick={() => setShowFeedbackModal(true)}\n                >\n                  <MessageCircle className=\"w-5 h-5 sm:w-6 sm:h-6 text-orange-500\" />\n                  <span>Feedback</span>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      {/* Modals */}\n      <BookingModal \n        isOpen={showBookingModal} \n        onClose={() => {\n          setShowBookingModal(false);\n          setSelectedAppointment(null);\n          setSelectedDoctor(null);\n        }}\n        selectedAppointment={selectedAppointment}\n        selectedDoctor={selectedDoctor}\n        rescheduleData={selectedAppointment ? {\n          appointmentId: selectedAppointment.id,\n          doctorId: selectedAppointment.doctorId,\n          appointmentDate: selectedAppointment.appointmentDate.split('T')[0],\n          appointmentTime: new Date(selectedAppointment.appointmentDate).toLocaleTimeString('en-IN', {hour12: false, hour: '2-digit', minute: '2-digit', timeZone: 'Asia/Kolkata'}),\n          type: selectedAppointment.type,\n          notes: selectedAppointment.notes || \"\"\n        } : null}\n      />\n      {showEmergencyModal && user?.id && (\n        <EmergencyModal \n          patientId={user.id}\n          onClose={() => setShowEmergencyModal(false)}\n        />\n      )}\n      <CancelModal \n        isOpen={showCancelModal} \n        onClose={() => setShowCancelModal(false)}\n        appointment={selectedAppointment}\n      />\n      <AppointmentDetailsModal \n        isOpen={showDetailsModal} \n        onClose={() => setShowDetailsModal(false)}\n        appointment={selectedAppointment}\n      />\n\n      {/* Feedback Modal */}\n      <Dialog open={showFeedbackModal} onOpenChange={setShowFeedbackModal}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <MessageCircle className=\"w-5 h-5 text-orange-500\" />\n              Share Your Feedback\n            </DialogTitle>\n            <DialogDescription>\n              Help us improve SmartClinic by sharing your experience with us.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...feedbackForm}>\n            <form onSubmit={feedbackForm.handleSubmit(handleSubmitFeedback)} className=\"space-y-4\">\n              <FormField\n                control={feedbackForm.control}\n                name=\"rating\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Overall Rating</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select rating (1-5 stars)\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"5\">⭐⭐⭐⭐⭐ Excellent</SelectItem>\n                        <SelectItem value=\"4\">⭐⭐⭐⭐ Very Good</SelectItem>\n                        <SelectItem value=\"3\">⭐⭐⭐ Good</SelectItem>\n                        <SelectItem value=\"2\">⭐⭐ Fair</SelectItem>\n                        <SelectItem value=\"1\">⭐ Poor</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={feedbackForm.control}\n                name=\"categories\"\n                render={() => (\n                  <FormItem>\n                    <div className=\"mb-4\">\n                      <FormLabel className=\"text-base\">Feedback Categories</FormLabel>\n                      <p className=\"text-sm text-muted-foreground\">\n                        Select all areas you'd like to provide feedback on\n                      </p>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      {[\n                        { id: \"service_quality\", label: \"Service Quality\" },\n                        { id: \"wait_time\", label: \"Wait Time\" },\n                        { id: \"staff_behavior\", label: \"Staff Behavior\" },\n                        { id: \"facility\", label: \"Facility & Cleanliness\" },\n                        { id: \"appointment_booking\", label: \"Appointment Booking\" },\n                        { id: \"app_usability\", label: \"App Experience\" },\n                        { id: \"other\", label: \"Other\" }\n                      ].map((item) => (\n                        <FormField\n                          key={item.id}\n                          control={feedbackForm.control}\n                          name=\"categories\"\n                          render={({ field }) => {\n                            return (\n                              <FormItem\n                                key={item.id}\n                                className=\"flex flex-row items-start space-x-3 space-y-0\"\n                              >\n                                <FormControl>\n                                  <Checkbox\n                                    data-testid={`checkbox-${item.id}`}\n                                    checked={field.value?.includes(item.id)}\n                                    onCheckedChange={(checked) => {\n                                      return checked\n                                        ? field.onChange([...field.value, item.id])\n                                        : field.onChange(\n                                            field.value?.filter(\n                                              (value: string) => value !== item.id\n                                            )\n                                          )\n                                    }}\n                                  />\n                                </FormControl>\n                                <FormLabel className=\"text-sm font-normal\">\n                                  {item.label}\n                                </FormLabel>\n                              </FormItem>\n                            )\n                          }}\n                        />\n                      ))}\n                    </div>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {appointmentsArray.length > 0 && (\n                <FormField\n                  control={feedbackForm.control}\n                  name=\"appointmentId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Related Appointment (Optional)</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select appointment\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"none\">No specific appointment</SelectItem>\n                          {appointmentsArray.map((appointment: any) => (\n                            <SelectItem key={appointment.id} value={appointment.id}>\n                              {new Date(appointment.appointmentDate).toLocaleDateString('en-IN', {timeZone: 'Asia/Kolkata'})} - Dr. {appointment.doctor?.firstName}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <FormField\n                control={feedbackForm.control}\n                name=\"comment\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Your Comments (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Optional: Share any additional thoughts, suggestions, or concerns...\"\n                        className=\"min-h-[100px]\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Optional field - leave blank if you prefer\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={feedbackForm.control}\n                name=\"isAnonymous\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">\n                        Submit Anonymously\n                      </FormLabel>\n                      <FormDescription>\n                        Your name will not be associated with this feedback\n                      </FormDescription>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <DialogFooter className=\"gap-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowFeedbackModal(false)}\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={submitFeedbackMutation.isPending}\n                  className=\"bg-orange-500 hover:bg-orange-600\"\n                >\n                  {submitFeedbackMutation.isPending ? (\n                    \"Submitting...\"\n                  ) : (\n                    <>\n                      <Send className=\"w-4 h-4 mr-2\" />\n                      Submit Feedback\n                    </>\n                  )}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Search Doctors Modal */}\n      <Dialog open={showDoctorsModal} onOpenChange={setShowDoctorsModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Stethoscope className=\"w-5 h-5 text-blue-500\" />\n              Search Doctors\n            </DialogTitle>\n            <DialogDescription>\n              Find and book appointments with available doctors\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div className=\"relative\">\n              <Input\n                placeholder=\"Search by name, specialty, or location...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-4 pr-4\"\n                data-testid=\"input-doctor-search\"\n              />\n            </div>\n\n            {doctors && doctors.length > 0 ? (\n              <div className=\"max-h-96 overflow-y-auto space-y-3\">\n                {doctors\n                  .filter((doctor: any) => \n                    searchQuery === \"\" || \n                    `${doctor.firstName} ${doctor.lastName}`.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                    doctor.address?.toLowerCase().includes(searchQuery.toLowerCase())\n                  )\n                  .map((doctor: any) => (\n                    <div\n                      key={doctor.id}\n                      className=\"p-4 border rounded-lg hover:bg-gray-50 transition-colors cursor-pointer\"\n                      onClick={() => {\n                        setSelectedDoctor(doctor);\n                        setShowDoctorsModal(false);\n                        setShowBookingModal(true);\n                      }}\n                      data-testid={`doctor-card-${doctor.id}`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                            <Stethoscope className=\"w-6 h-6 text-blue-600\" />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900\">\n                              Dr. {doctor.firstName} {doctor.lastName}\n                            </h3>\n                            <p className=\"text-sm text-gray-600\">General Practitioner</p>\n                            {doctor.address && (\n                              <div className=\"flex items-center gap-1 mt-1\">\n                                <MapPin className=\"w-3 h-3 text-gray-400\" />\n                                <p className=\"text-xs text-gray-500\">{doctor.address}</p>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"flex items-center gap-1 mb-1\">\n                            <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                            <span className=\"text-xs text-green-600\">Available</span>\n                          </div>\n                          <Button \n                            size=\"sm\"\n                            className=\"bg-blue-500 hover:bg-blue-600\"\n                            data-testid={`button-book-${doctor.id}`}\n                          >\n                            <Calendar className=\"w-3 h-3 mr-1\" />\n                            Book Now\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Stethoscope className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Doctors Found</h3>\n                <p className=\"text-gray-600\">Try adjusting your search terms</p>\n              </div>\n            )}\n\n            {searchQuery && doctors.filter((doctor: any) => \n              `${doctor.firstName} ${doctor.lastName}`.toLowerCase().includes(searchQuery.toLowerCase()) ||\n              doctor.address?.toLowerCase().includes(searchQuery.toLowerCase())\n            ).length === 0 && (\n              <div className=\"text-center py-8\">\n                <Stethoscope className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Results</h3>\n                <p className=\"text-gray-600\">No doctors match your search criteria</p>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Live Queue Tracker Modal */}\n      <Dialog open={showLiveQueueModal} onOpenChange={setShowLiveQueueModal}>\n        <DialogContent className=\"max-w-md mx-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Activity className=\"w-5 h-5 text-blue-500\" />\n              Live Queue Tracker\n              <Badge className=\"bg-orange-100 text-orange-800 text-xs\">Delayed 20min</Badge>\n            </DialogTitle>\n          </DialogHeader>\n          \n          <LiveQueueContent \n            currentPosition={currentQueuePosition}\n            queueConnected={queueConnected}\n            onRefresh={() => {\n              queryClient.invalidateQueries({ queryKey: [\"/api/queue/position\"] });\n              queryClient.invalidateQueries({ queryKey: [\"/api/queue/admin\"] });\n              toast({\n                title: \"Queue Refreshed\",\n                description: \"Queue information has been updated.\",\n              });\n            }}\n            onJoinQueue={() => {}} // Disabled as requested\n            joinQueuePending={false}\n            isInQueue={false} // No join queue functionality\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\n// Live Queue Content Component\nfunction LiveQueueContent({ \n  currentPosition, \n  queueConnected, \n  onRefresh, \n  onJoinQueue, \n  joinQueuePending, \n  isInQueue \n}: {\n  currentPosition: any;\n  queueConnected: boolean;\n  onRefresh: () => void;\n  onJoinQueue: () => void;\n  joinQueuePending: boolean;\n  isInQueue: boolean;\n}) {\n  const { user } = useUser();\n  \n  // WebSocket connection for real-time queue updates - use patient mode for patients, admin for staff/admin\n  const { queueTokens: liveAdminQueue } = useQueueSocket(\n    undefined, // No specific user ID for modal view\n    user?.role === 'admin' || user?.role === 'staff' // Admin mode only for admin/staff\n  );\n\n  // Get queue data for full queue view - use public endpoint for patients, admin for admins  \n  const { data: apiAdminQueue = [] } = useQuery({\n    queryKey: [\"/api/queue/public\"], \n    refetchInterval: 3000,\n    retry: false, // Don't retry if unauthorized\n  });\n\n  // Use live data if available, otherwise fallback to API data, and sort by appointment time\n  const rawAdminQueue = liveAdminQueue || apiAdminQueue || [];\n  \n  // Remove duplicates and sort by appointment time\n  const adminQueue = Array.isArray(rawAdminQueue) ? \n    [...rawAdminQueue]\n      // Remove duplicates by ID\n      .filter((token: any, index: number, array: any[]) => \n        array.findIndex(t => t.id === token.id) === index\n      )\n      .sort((a: any, b: any) => {\n        const aTime = a.appointment?.appointmentDate || a.createdAt;\n        const bTime = b.appointment?.appointmentDate || b.createdAt;\n        return new Date(aTime).getTime() - new Date(bTime).getTime();\n      }) : [];\n\n  const queueArray = adminQueue;\n  // Find the first patient in queue (lowest token number) as currently serving\n  const sortedQueue = queueArray.filter((token: any) => token.status === 'waiting' || token.status === 'called' || token.status === 'in_progress')\n    .sort((a: any, b: any) => a.tokenNumber - b.tokenNumber);\n  const currentlyServing = sortedQueue[0]; // First patient is being served\n  const waitingQueue = sortedQueue.slice(1, 5); // Next 4 patients in line\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Now Serving */}\n      <div className=\"bg-blue-500 text-white rounded-lg p-4 text-center\">\n        <div className=\"text-sm mb-2\">Now Serving</div>\n        <div className=\"text-3xl font-bold mb-1\">\n          #{currentlyServing?.tokenNumber || '--'}\n        </div>\n        <div className=\"text-sm\">\n          {currentlyServing ? `${currentlyServing.patient?.firstName} ${currentlyServing.patient?.lastName}` : 'No patient currently'}\n        </div>\n      </div>\n\n      {/* Doctor Running Late */}\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n        <div className=\"flex items-center gap-2 text-yellow-800\">\n          <Clock className=\"w-4 h-4\" />\n          <span className=\"font-medium\">Doctor Running Late</span>\n        </div>\n        <div className=\"text-sm text-yellow-700 mt-1\">\n          Expected delay: 20 minutes\n        </div>\n      </div>\n\n      {/* Upcoming Appointments */}\n      <div>\n        <div className=\"flex items-center gap-2 mb-3\">\n          <Clock className=\"w-4 h-4 text-gray-600\" />\n          <span className=\"font-medium text-gray-900\">Upcoming Appointments</span>\n        </div>\n        \n        <div className=\"space-y-2\">\n          {waitingQueue.map((token: any, index: number) => (\n            <div key={token.id} className=\"flex items-center justify-between py-2 px-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <Badge className=\"bg-gray-600 text-white\">\n                  #{token.tokenNumber}\n                </Badge>\n                <div>\n                  <div className=\"text-sm font-medium\">\n                    {token.patient?.firstName} {token.patient?.lastName}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    {new Date(Date.now() + index * 15 * 60000).toLocaleTimeString('en-IN', {\n                      hour: '2-digit', \n                      minute: '2-digit',\n                      timeZone: 'Asia/Kolkata'\n                    })} AM\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <div className=\"text-sm font-medium\">\n                  {index === 0 ? '0min' : `${(index + 1) * 15}min`}\n                </div>\n                <div className=\"text-xs text-gray-500\">est. wait</div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex gap-3 pt-2\">\n        <Button \n          variant=\"outline\" \n          className=\"flex-1\"\n          onClick={onRefresh}\n        >\n          Refresh Queue\n        </Button>\n\n      </div>\n    </div>\n  );\n}\n","size_bytes":77561},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from \"@/components/ui/input-otp\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Stethoscope, Mail, Shield } from \"lucide-react\";\n\ninterface AuthResponse {\n  token: string;\n  user: any;\n  isNewUser: boolean;\n}\n\nexport default function LoginPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [step, setStep] = useState<\"email\" | \"otp\">(\"email\");\n  const [email, setEmail] = useState(\"\");\n  const [otp, setOtp] = useState(\"\");\n  const [developmentOtp, setDevelopmentOtp] = useState<string | null>(null);\n\n  const sendOtpMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/send-email-otp\", { email });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setStep(\"otp\");\n      \n      // Check if development OTP is provided (when email fails)\n      if (data.developmentOtp) {\n        setDevelopmentOtp(data.developmentOtp);\n        toast({\n          title: \"Email Service Fallback - Development Mode\",\n          description: `Email delivery fallback. Your OTP is: ${data.developmentOtp}`,\n          variant: \"destructive\",\n        });\n      } else {\n        setDevelopmentOtp(null);\n        toast({\n          title: \"OTP Sent\",\n          description: \"Please check your email for the verification code.\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send OTP\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyOtpMutation = useMutation({\n    mutationFn: async ({ email, otp }: { email: string; otp: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/verify-email-otp\", { email, otp });\n      return response.json() as Promise<AuthResponse>;\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"auth_token\", data.token);\n      localStorage.setItem(\"user\", JSON.stringify(data.user));\n      \n      toast({\n        title: \"Welcome!\",\n        description: data.isNewUser \n          ? \"Account created successfully. Please complete your profile.\"\n          : \"Logged in successfully.\",\n      });\n      \n      // Redirect based on role\n      if (data.user.role === 'admin') {\n        setLocation(\"/admin-dashboard\");\n      } else if (data.user.role === 'staff' || data.user.role === 'doctor') {\n        setLocation(\"/dashboard\");\n      } else {\n        setLocation(\"/dashboard\");\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Invalid OTP\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendOtp = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter your email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    sendOtpMutation.mutate(email);\n  };\n\n  const handleVerifyOtp = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (otp.length !== 6) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter the complete 6-digit OTP\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    verifyOtpMutation.mutate({ email, otp });\n  };\n\n  const handleResendOtp = () => {\n    sendOtpMutation.mutate(email);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"w-16 h-16 bg-blue-500 rounded-2xl flex items-center justify-center\">\n              <Stethoscope className=\"w-8 h-8 text-white\" />\n            </div>\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">SmartClinic</h1>\n          <p className=\"text-gray-600 dark:text-gray-300\">Healthcare Manager</p>\n        </div>\n\n        <Card className=\"shadow-lg border-0 dark:bg-gray-800 dark:border-gray-700\">\n          <CardHeader className=\"text-center pb-4\">\n            <CardTitle className=\"text-xl text-gray-900 dark:text-white\">\n              {step === \"email\" ? \"Sign In\" : \"Verify Email\"}\n            </CardTitle>\n            <p className=\"text-sm text-gray-600 dark:text-gray-300 mt-2\">\n              {step === \"email\" \n                ? \"Enter your email address to receive a verification code\"\n                : `We've sent a 6-digit code to ${email}`\n              }\n            </p>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-6\">\n            {step === \"email\" ? (\n              <form onSubmit={handleSendOtp} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 w-4 h-4\" />\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"admin@smartclinic.com\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      className=\"pl-10\"\n                      disabled={sendOtpMutation.isPending}\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-blue-500 hover:bg-blue-600\"\n                  disabled={sendOtpMutation.isPending}\n                  data-testid=\"button-send-otp\"\n                >\n                  {sendOtpMutation.isPending ? \"Sending...\" : \"Send Verification Code\"}\n                </Button>\n              </form>\n            ) : (\n              <form onSubmit={handleVerifyOtp} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"otp\">Verification Code</Label>\n                  \n                  {/* Development Helper - Show OTP hint when email fails */}\n                  {developmentOtp && (\n                    <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-3 mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Shield className=\"w-4 h-4 text-yellow-600 dark:text-yellow-400\" />\n                        <span className=\"text-xs text-yellow-700 dark:text-yellow-300 font-medium\">Development Mode</span>\n                      </div>\n                      <p className=\"text-xs text-yellow-600 dark:text-yellow-400 mt-1\">\n                        Email delivery failed. Current OTP code: <strong>{developmentOtp}</strong>\n                      </p>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex justify-center\">\n                    <InputOTP\n                      value={otp}\n                      onChange={setOtp}\n                      maxLength={6}\n                      disabled={verifyOtpMutation.isPending}\n                    >\n                      <InputOTPGroup>\n                        <InputOTPSlot index={0} />\n                        <InputOTPSlot index={1} />\n                        <InputOTPSlot index={2} />\n                        <InputOTPSlot index={3} />\n                        <InputOTPSlot index={4} />\n                        <InputOTPSlot index={5} />\n                      </InputOTPGroup>\n                    </InputOTP>\n                  </div>\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full bg-blue-500 hover:bg-blue-600\"\n                  disabled={verifyOtpMutation.isPending}\n                  data-testid=\"button-verify-otp\"\n                >\n                  {verifyOtpMutation.isPending ? \"Verifying...\" : \"Verify & Sign In\"}\n                </Button>\n                \n                <div className=\"text-center\">\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    onClick={handleResendOtp}\n                    disabled={sendOtpMutation.isPending}\n                    className=\"text-sm\"\n                    data-testid=\"button-resend-otp\"\n                  >\n                    Didn't receive the code? Resend\n                  </Button>\n                </div>\n                \n                <div className=\"text-center\">\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    onClick={() => setStep(\"email\")}\n                    className=\"text-sm\"\n                    data-testid=\"button-change-email\"\n                  >\n                    Change email address\n                  </Button>\n                </div>\n              </form>\n            )}\n            \n            {/* Security Notice */}\n            <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-3\">\n              <div className=\"flex items-center space-x-2\">\n                <Shield className=\"w-4 h-4 text-green-600 dark:text-green-400\" />\n                <span className=\"text-xs text-green-700 dark:text-green-300 font-medium\">Secure OTP Authentication</span>\n              </div>\n              <p className=\"text-xs text-green-600 dark:text-green-400 mt-1\">\n                Your email address is verified using a secure one-time password\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <div className=\"text-center mt-6 text-xs text-gray-500 dark:text-gray-400\">\n          By signing in, you agree to our Terms of Service and Privacy Policy\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10455},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}","size_bytes":2764},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":688},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/BookingModal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Calendar as CalendarIcon, Clock, User, MapPin, \n  Stethoscope, Home, Video, Phone\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\n// Helper function to format doctor names properly (avoid double \"Dr.\")\nconst formatDoctorName = (firstName: string, lastName: string) => {\n  const cleanFirstName = firstName?.startsWith('Dr. ') ? firstName.slice(4) : firstName;\n  return `Dr. ${cleanFirstName} ${lastName}`;\n};\n\n// Clinic location options\nconst clinicLocations = [\n  \"Bangalore Central Clinic, MG Road, Bangalore\",\n  \"Whitefield Branch, ITPL Main Road, Bangalore\",\n  \"Koramangala Clinic, 5th Block, Bangalore\", \n  \"Electronic City Clinic, Phase 1, Bangalore\"\n];\n\ninterface BookingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  selectedAppointment?: any;\n  selectedDoctor?: any;\n  rescheduleData?: any;\n}\n\ninterface Doctor {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  address: string;\n}\n\ninterface BookingData {\n  doctorId: string;\n  appointmentDate: string;\n  type: 'clinic' | 'home_visit' | 'video_call';\n  duration: number;\n  location: string;\n  notes: string;\n  symptoms: string;\n}\n\nexport default function BookingModal({ isOpen, onClose, selectedAppointment, selectedDoctor, rescheduleData }: BookingModalProps) {\n  const { toast } = useToast();\n  const [selectedDate, setSelectedDate] = useState<Date>();\n  const [selectedTime, setSelectedTime] = useState(\"\");\n  const [bookingData, setBookingData] = useState<BookingData>({\n    doctorId: selectedDoctor?.id || \"\",\n    appointmentDate: \"\",\n    type: \"clinic\",\n    duration: 30,\n    location: selectedDoctor?.address || \"\",\n    notes: \"\",\n    symptoms: \"\"\n  });\n\n  // Fetch available doctors\n  const { data: doctors = [], isLoading } = useQuery({\n    queryKey: ['/api/users', 'doctor'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/users?role=doctor');\n      return response.json();\n    },\n  });\n\n  // Fetch doctor's appointments for selected date to check availability\n  const { data: existingAppointments = [] } = useQuery({\n    queryKey: ['/api/appointments', 'availability', bookingData.doctorId, selectedDate?.toISOString()],\n    queryFn: async () => {\n      if (!bookingData.doctorId || !selectedDate) return [];\n      const dateStr = selectedDate.toISOString().split('T')[0];\n      const response = await apiRequest('GET', `/api/appointments?date=${dateStr}&doctorId=${bookingData.doctorId}`);\n      return response.json();\n    },\n    enabled: !!bookingData.doctorId && !!selectedDate,\n  });\n\n  // Book or reschedule appointment mutation\n  const bookAppointmentMutation = useMutation({\n    mutationFn: async (appointment: BookingData) => {\n      if (rescheduleData) {\n        // Reschedule existing appointment\n        const response = await apiRequest('PUT', `/api/appointments/${rescheduleData.appointmentId}`, appointment);\n        return response.json();\n      } else {\n        // Book new appointment with pending_approval status\n        const requestData = {\n          doctorId: appointment.doctorId,\n          type: appointment.type,\n          symptoms: appointment.symptoms,\n          preferredDate: appointment.appointmentDate,\n          urgency: 'normal',\n          notes: appointment.notes\n        };\n        const response = await apiRequest('POST', '/api/appointments/patient-request', requestData);\n        return response.json();\n      }\n    },\n    onSuccess: () => {\n      // Invalidate both patient and admin appointment queries for real-time sync\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments/admin'] });\n      onClose();\n      resetForm();\n      toast({\n        title: \"Appointment Booked\",\n        description: \"Your appointment has been scheduled successfully. You'll receive a confirmation SMS.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('Appointment booking error:', error);\n      \n      // Check for authentication errors\n      if (error.message?.includes('401') || error.message?.includes('Invalid or expired token')) {\n        toast({\n          title: \"Authentication Required\",\n          description: \"Please log in to book an appointment.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // Check for validation errors\n      if (error.message?.includes('400')) {\n        toast({\n          title: \"Invalid Information\",\n          description: \"Please check all required fields and try again.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to book appointment. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Update booking data when selectedDoctor changes\n  useEffect(() => {\n    if (selectedDoctor) {\n      setBookingData(prev => ({\n        ...prev,\n        doctorId: selectedDoctor.id,\n        location: prev.type === 'clinic' ? selectedDoctor.address || '' : prev.location\n      }));\n    }\n  }, [selectedDoctor]);\n\n  const resetForm = () => {\n    setSelectedDate(undefined);\n    setSelectedTime(\"\");\n    setBookingData({\n      doctorId: selectedDoctor?.id || \"\",\n      appointmentDate: \"\",\n      type: \"clinic\",\n      duration: 30,\n      location: selectedDoctor?.address || \"\",\n      notes: \"\",\n      symptoms: \"\"\n    });\n  };\n\n  const handleDateSelect = (date: Date | undefined) => {\n    setSelectedDate(date);\n    if (date && selectedTime) {\n      const dateTime = new Date(date);\n      const [hours, minutes] = selectedTime.split(':');\n      dateTime.setHours(parseInt(hours), parseInt(minutes));\n      setBookingData(prev => ({\n        ...prev,\n        appointmentDate: dateTime.toISOString()\n      }));\n    }\n  };\n\n  const handleTimeSelect = (time: string) => {\n    setSelectedTime(time);\n    if (selectedDate && time) {\n      const dateTime = new Date(selectedDate);\n      const [hours, minutes] = time.split(':');\n      dateTime.setHours(parseInt(hours), parseInt(minutes));\n      setBookingData(prev => ({\n        ...prev,\n        appointmentDate: dateTime.toISOString()\n      }));\n    }\n  };\n\n  const handleDoctorSelect = (doctorId: string) => {\n    const doctor = doctors.find((d: Doctor) => d.id === doctorId);\n    setBookingData(prev => ({\n      ...prev,\n      doctorId,\n      location: bookingData.type === 'clinic' ? doctor?.address || '' : prev.location\n    }));\n  };\n\n  const handleTypeChange = (type: 'clinic' | 'home_visit' | 'video_call') => {\n    const doctor = doctors.find((d: Doctor) => d.id === bookingData.doctorId);\n    let location = \"\";\n    \n    if (type === 'clinic' && doctor) {\n      location = doctor.address;\n    } else if (type === 'home_visit') {\n      location = \"Patient Home Address\";\n    } else if (type === 'video_call') {\n      location = \"Video Conference\";\n    }\n    \n    setBookingData(prev => ({ ...prev, type, location }));\n  };\n\n  const canSubmit = bookingData.doctorId && bookingData.appointmentDate && bookingData.symptoms.trim();\n\n  const baseTimeSlots = [\n    \"09:00\", \"09:30\", \"10:00\", \"10:30\", \"11:00\", \"11:30\",\n    \"14:00\", \"14:30\", \"15:00\", \"15:30\", \"16:00\", \"16:30\",\n    \"17:00\", \"17:30\", \"18:00\", \"18:30\"\n  ];\n\n  // Filter out time slots that conflict with existing appointments\n  const availableTimeSlots = baseTimeSlots.filter(timeSlot => {\n    if (!selectedDate || !existingAppointments.length) return true;\n    \n    const [hours, minutes] = timeSlot.split(':').map(Number);\n    const slotDateTime = new Date(selectedDate);\n    slotDateTime.setHours(hours, minutes, 0, 0);\n    \n    // Check if this time slot conflicts with any existing appointment\n    return !existingAppointments.some((appointment: any) => {\n      const appointmentStart = new Date(appointment.appointmentDate);\n      const appointmentEnd = new Date(appointmentStart.getTime() + (appointment.duration || 30) * 60000);\n      \n      // Check for overlap: appointment is active status and times overlap\n      const isActiveStatus = ['scheduled', 'confirmed', 'pending_approval'].includes(appointment.status);\n      const timesOverlap = slotDateTime >= appointmentStart && slotDateTime < appointmentEnd;\n      \n      return isActiveStatus && timesOverlap;\n    });\n  });\n\n  // Clinic operating hours for display\n  const clinicHours = {\n    morning: \"9:00 AM - 12:00 PM\",\n    afternoon: \"2:00 PM - 7:00 PM\",\n    closed: \"Sundays\"\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'clinic': return <Stethoscope className=\"w-4 h-4\" />;\n      case 'home_visit': return <Home className=\"w-4 h-4\" />;\n      case 'video_call': return <Video className=\"w-4 h-4\" />;\n      default: return <Stethoscope className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'clinic': return 'bg-blue-500';\n      case 'home_visit': return 'bg-green-500';\n      case 'video_call': return 'bg-purple-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent>\n          <div className=\"flex items-center justify-center p-8\">\n            Loading doctors...\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <CalendarIcon className=\"w-5 h-5\" />\n            Book New Appointment\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Doctor Selection */}\n          <div>\n            <Label>Select Doctor</Label>\n            <Select value={bookingData.doctorId} onValueChange={handleDoctorSelect}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Choose a doctor\" />\n              </SelectTrigger>\n              <SelectContent>\n                {doctors.map((doctor: Doctor) => (\n                  <SelectItem key={doctor.id} value={doctor.id}>\n                    <div className=\"flex items-center gap-2\">\n                      <User className=\"w-4 h-4\" />\n                      <div>\n                        <p className=\"font-medium\">{formatDoctorName(doctor.firstName, doctor.lastName)}</p>\n                        <p className=\"text-xs text-gray-500\">{doctor.address}</p>\n                      </div>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Appointment Type */}\n          <div>\n            <Label>Appointment Type</Label>\n            <div className=\"grid grid-cols-3 gap-3 mt-2\">\n              {[\n                { value: 'clinic', label: 'Clinic Visit', icon: 'clinic' },\n                { value: 'home_visit', label: 'Home Visit', icon: 'home_visit' },\n                { value: 'video_call', label: 'Video Call', icon: 'video_call' }\n              ].map((type) => (\n                <button\n                  key={type.value}\n                  onClick={() => handleTypeChange(type.value as any)}\n                  className={`p-3 rounded-lg border-2 transition-colors ${\n                    bookingData.type === type.value\n                      ? 'border-blue-500 bg-blue-50'\n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                >\n                  <div className=\"flex flex-col items-center gap-2\">\n                    {getTypeIcon(type.value)}\n                    <span className=\"text-sm font-medium\">{type.label}</span>\n                  </div>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Clinic Hours Info */}\n          <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200\">\n            <h4 className=\"font-medium text-blue-900 mb-2 flex items-center gap-2\">\n              <Clock className=\"w-4 h-4\" />\n              Clinic Hours\n            </h4>\n            <div className=\"text-sm text-blue-800 space-y-1\">\n              <p><strong>Morning:</strong> {clinicHours.morning}</p>\n              <p><strong>Afternoon:</strong> {clinicHours.afternoon}</p>\n              <p><strong>Closed:</strong> {clinicHours.closed}</p>\n            </div>\n          </div>\n\n          {/* Date and Time Selection */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label>Select Date</Label>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button variant=\"outline\" className=\"w-full justify-start\">\n                    <CalendarIcon className=\"w-4 h-4 mr-2\" />\n                    {selectedDate ? format(selectedDate, \"PPP\") : \"Pick a date\"}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={selectedDate}\n                    onSelect={handleDateSelect}\n                    disabled={(date) => {\n                      const today = new Date();\n                      today.setHours(0, 0, 0, 0);\n                      const maxDate = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);\n                      const isSunday = date.getDay() === 0; // Sunday = 0\n                      return date < today || date > maxDate || isSunday;\n                    }}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n            </div>\n\n            <div>\n              <Label>Select Time</Label>\n              {!bookingData.doctorId ? (\n                <div className=\"text-sm text-gray-500 py-3 px-4 border rounded-md\">\n                  Please select a doctor first\n                </div>\n              ) : !selectedDate ? (\n                <div className=\"text-sm text-gray-500 py-3 px-4 border rounded-md\">\n                  Please select a date first\n                </div>\n              ) : availableTimeSlots.length === 0 ? (\n                <div className=\"text-sm text-red-500 py-3 px-4 border rounded-md bg-red-50\">\n                  No available time slots for this date\n                </div>\n              ) : (\n                <Select value={selectedTime} onValueChange={handleTimeSelect}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose available time\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {availableTimeSlots.map((time) => {\n                      const isBooked = baseTimeSlots.includes(time) && !availableTimeSlots.includes(time);\n                      return (\n                        <SelectItem key={time} value={time}>\n                          <div className=\"flex items-center gap-2\">\n                            <Clock className=\"w-4 h-4\" />\n                            <span>{time}</span>\n                            <Badge \n                              variant=\"outline\" \n                              className={`text-xs ml-auto ${\n                                isBooked ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'\n                              }`}\n                            >\n                              {isBooked ? 'Booked' : 'Available'}\n                            </Badge>\n                          </div>\n                        </SelectItem>\n                      );\n                    })}\n                  </SelectContent>\n                </Select>\n              )}\n              {bookingData.doctorId && selectedDate && existingAppointments.length > 0 && (\n                <p className=\"text-xs text-gray-600 mt-1\">\n                  {existingAppointments.length} existing appointment(s) on this date\n                </p>\n              )}\n            </div>\n          </div>\n\n          {/* Duration */}\n          <div>\n            <Label>Duration (minutes)</Label>\n            <Select \n              value={bookingData.duration.toString()} \n              onValueChange={(value) => setBookingData(prev => ({ ...prev, duration: parseInt(value) }))}\n            >\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"15\">15 minutes</SelectItem>\n                <SelectItem value=\"30\">30 minutes</SelectItem>\n                <SelectItem value=\"45\">45 minutes</SelectItem>\n                <SelectItem value=\"60\">1 hour</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Location */}\n          <div>\n            <Label>Location</Label>\n            {bookingData.type === 'home_visit' ? (\n              <div className=\"flex items-center gap-2\">\n                <MapPin className=\"w-4 h-4 text-gray-500\" />\n                <Input\n                  value={bookingData.location}\n                  onChange={(e) => setBookingData(prev => ({ ...prev, location: e.target.value }))}\n                  placeholder=\"Enter your home address\"\n                />\n              </div>\n            ) : bookingData.type === 'video_call' ? (\n              <div className=\"flex items-center gap-2\">\n                <Video className=\"w-4 h-4 text-gray-500\" />\n                <Input\n                  value=\"Video Call - Online\"\n                  readOnly\n                  className=\"bg-gray-50\"\n                />\n              </div>\n            ) : (\n              <Select \n                value={bookingData.location} \n                onValueChange={(value) => setBookingData(prev => ({ ...prev, location: value }))}\n              >\n                <SelectTrigger>\n                  <div className=\"flex items-center gap-2\">\n                    <MapPin className=\"w-4 h-4 text-gray-500\" />\n                    <SelectValue placeholder=\"Select clinic location\" />\n                  </div>\n                </SelectTrigger>\n                <SelectContent>\n                  {clinicLocations.map((location) => (\n                    <SelectItem key={location} value={location}>\n                      {location}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            )}\n          </div>\n\n          {/* Symptoms */}\n          <div>\n            <Label>Symptoms / Reason for Visit *</Label>\n            <Textarea\n              value={bookingData.symptoms}\n              onChange={(e) => setBookingData(prev => ({ ...prev, symptoms: e.target.value }))}\n              placeholder=\"Please describe your symptoms or reason for the appointment...\"\n              rows={3}\n            />\n          </div>\n\n          {/* Additional Notes */}\n          <div>\n            <Label>Additional Notes</Label>\n            <Textarea\n              value={bookingData.notes}\n              onChange={(e) => setBookingData(prev => ({ ...prev, notes: e.target.value }))}\n              placeholder=\"Any additional information for the doctor...\"\n              rows={2}\n            />\n          </div>\n\n          {/* Booking Summary */}\n          {bookingData.doctorId && bookingData.appointmentDate && (\n            <div className=\"bg-green-50 p-4 rounded-lg border border-green-200\">\n              <h4 className=\"font-medium mb-2 text-green-900 flex items-center gap-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                Booking Summary - Time Slot Available\n              </h4>\n              <div className=\"space-y-1 text-sm text-green-800\">\n                <p><strong>Doctor:</strong> {(() => {\n                  const doctor = doctors.find((d: Doctor) => d.id === bookingData.doctorId);\n                  return doctor ? formatDoctorName(doctor.firstName, doctor.lastName) : '';\n                })()}</p>\n                <p><strong>Date & Time:</strong> {selectedDate && format(selectedDate, \"PPP\")} at {selectedTime}</p>\n                <p><strong>Type:</strong> \n                  <Badge className={`ml-2 ${getTypeColor(bookingData.type)}`}>\n                    {getTypeIcon(bookingData.type)}\n                    <span className=\"ml-1\">{bookingData.type.replace('_', ' ')}</span>\n                  </Badge>\n                </p>\n                <p><strong>Duration:</strong> {bookingData.duration} minutes</p>\n                <p><strong>Location:</strong> {bookingData.location}</p>\n              </div>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3\">\n            <Button variant=\"outline\" onClick={onClose} className=\"flex-1\">\n              Cancel\n            </Button>\n            <Button \n              onClick={() => {\n                console.log('Booking data:', bookingData);\n                \n                // Check if user is authenticated first\n                const token = localStorage.getItem(\"auth_token\");\n                if (!token) {\n                  toast({\n                    title: \"Login Required\",\n                    description: \"Please log in to book an appointment. Use phone/OTP or Google authentication.\",\n                    variant: \"destructive\",\n                  });\n                  return;\n                }\n                \n                if (canSubmit) {\n                  bookAppointmentMutation.mutate(bookingData);\n                } else {\n                  toast({\n                    title: \"Incomplete Information\",\n                    description: \"Please fill in all required fields: doctor, date/time, and symptoms.\",\n                    variant: \"destructive\",\n                  });\n                }\n              }}\n              disabled={bookAppointmentMutation.isPending}\n              className=\"flex-1 bg-blue-500 hover:bg-blue-600\"\n            >\n              {bookAppointmentMutation.isPending ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Booking...\n                </>\n              ) : (\n                <>\n                  <CalendarIcon className=\"w-4 h-4 mr-2\" />\n                  Book Appointment\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":23134},"client/src/pages/medicines.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  ArrowLeft, Plus, Pill, Clock, Upload, Calendar, \n  Trash2, Edit, CheckCircle, XCircle, AlertCircle\n} from \"lucide-react\";\n\ninterface CustomMedicine {\n  id?: string;\n  name: string;\n  dosage: string;\n  frequency: string;\n  timings?: string[];\n  instructions: string;\n  startDate: string;\n  endDate?: string;\n  status: 'active' | 'completed' | 'paused';\n  medicine?: any;\n}\n\ninterface MedicineReminder {\n  id: string;\n  scheduledAt: string;\n  isTaken: boolean;\n  isSkipped: boolean;\n  notes: string;\n}\n\nexport default function MedicinesPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);\n  const [uploadText, setUploadText] = useState(\"\");\n  const [editingMedicine, setEditingMedicine] = useState<CustomMedicine | null>(null);\n  const [newMedicine, setNewMedicine] = useState<CustomMedicine>({\n    name: \"\",\n    dosage: \"\",\n    frequency: \"once_daily\",\n    timings: [\"08:00\"] as string[],\n    instructions: \"\",\n    startDate: new Date().toISOString().split('T')[0],\n    endDate: \"\",\n    status: \"active\"\n  });\n  const [medicineSearchQuery, setMedicineSearchQuery] = useState(\"\");\n\n  // Fetch custom medicines\n  const { data: customMedicines = [], isLoading: loadingCustom } = useQuery<CustomMedicine[]>({\n    queryKey: ['/api/custom-medicines'],\n  });\n\n  // Fetch reminders  \n  const { data: reminders = [], isLoading: loadingReminders } = useQuery<MedicineReminder[]>({\n    queryKey: ['/api/reminders'],\n  });\n\n  // Fetch missed doses\n  const { data: missedDoses = [] } = useQuery<any[]>({\n    queryKey: ['/api/reminders/missed'],\n  });\n\n  // Add custom medicine mutation\n  const addMedicineMutation = useMutation({\n    mutationFn: async (medicine: CustomMedicine) => {\n      const medicineData = {\n        ...medicine,\n        clinicId: 'default-clinic-id' // Add required clinicId\n      };\n      const response = await apiRequest('POST', '/api/custom-medicines', medicineData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/custom-medicines'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/reminders'] });\n      setIsAddDialogOpen(false);\n      resetNewMedicine();\n      toast({ title: \"Medicine Added\", description: \"Your custom medicine has been added successfully.\" });\n    }\n  });\n\n  // Edit medicine mutation\n  const editMedicineMutation = useMutation({\n    mutationFn: async (medicine: CustomMedicine) => {\n      const medicineData = {\n        ...medicine,\n        clinicId: 'default-clinic-id' // Add required clinicId\n      };\n      const response = await apiRequest('PUT', `/api/custom-medicines/${medicine.id}`, medicineData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/custom-medicines'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/reminders'] });\n      setIsEditDialogOpen(false);\n      setEditingMedicine(null);\n      toast({ title: \"Medicine Updated\", description: \"Your medicine has been updated successfully.\" });\n    }\n  });\n\n  // Delete medicine mutation\n  const deleteMedicineMutation = useMutation({\n    mutationFn: async (medicineId: string) => {\n      const response = await apiRequest('DELETE', `/api/custom-medicines/${medicineId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/custom-medicines'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/reminders'] });\n      toast({ title: \"Medicine Deleted\", description: \"The medicine has been deleted successfully.\" });\n    }\n  });\n\n  // Upload medicines mutation\n  const uploadMedicinesMutation = useMutation({\n    mutationFn: async (text: string) => {\n      const response = await apiRequest('POST', '/api/medicines/upload', { medicineList: text });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/custom-medicines'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/reminders'] });\n      setIsUploadDialogOpen(false);\n      setUploadText(\"\");\n      toast({ title: \"Medicines Uploaded\", description: \"Your medicine list has been processed successfully.\" });\n    }\n  });\n\n  // Update reminder status\n  const updateReminderMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: 'taken' | 'skipped' }) => {\n      const response = await apiRequest('PUT', `/api/reminders/${id}`, { status });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/reminders'] });\n      toast({ title: \"Reminder Updated\", description: \"Medicine reminder status updated.\" });\n    }\n  });\n\n  const addTiming = () => {\n    setNewMedicine(prev => ({\n      ...prev,\n      timings: [...(prev.timings || []), \"12:00\"]\n    }));\n  };\n\n  const removeTiming = (index: number) => {\n    setNewMedicine(prev => ({\n      ...prev,\n      timings: (prev.timings || []).filter((_, i) => i !== index)\n    }));\n  };\n\n  const updateTiming = (index: number, time: string) => {\n    setNewMedicine(prev => ({\n      ...prev,\n      timings: (prev.timings || []).map((t, i) => i === index ? time : t)\n    }));\n  };\n\n  const resetNewMedicine = () => {\n    setNewMedicine({\n      name: \"\", dosage: \"\", frequency: \"once_daily\", timings: [\"08:00\"],\n      instructions: \"\", startDate: new Date().toISOString().split('T')[0],\n      endDate: \"\", status: \"active\"\n    });\n  };\n\n  const startEditMedicine = (medicine: CustomMedicine) => {\n    setEditingMedicine({ ...medicine });\n    setIsEditDialogOpen(true);\n  };\n\n  const updateEditingMedicine = (field: keyof CustomMedicine, value: any) => {\n    setEditingMedicine(prev => prev ? { ...prev, [field]: value } : null);\n  };\n\n  const addEditTiming = () => {\n    setEditingMedicine(prev => prev ? {\n      ...prev,\n      timings: [...(prev.timings || []), \"12:00\"]\n    } : null);\n  };\n\n  const removeEditTiming = (index: number) => {\n    setEditingMedicine(prev => prev ? {\n      ...prev,\n      timings: (prev.timings || []).filter((_, i) => i !== index)\n    } : null);\n  };\n\n  const updateEditTiming = (index: number, time: string) => {\n    setEditingMedicine(prev => prev ? {\n      ...prev,\n      timings: (prev.timings || []).map((t, i) => i === index ? time : t)\n    } : null);\n  };\n\n  const handleDeleteMedicine = (medicineId: string, medicineName: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${medicineName}\"? This will also delete all associated reminders.`)) {\n      deleteMedicineMutation.mutate(medicineId);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-500';\n      case 'completed': return 'bg-blue-500';\n      case 'paused': return 'bg-yellow-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const formatTime = (time: string) => {\n    if (!time) return 'N/A';\n    \n    // Handle time string (HH:MM format)\n    if (time.includes(':') && !time.includes('T') && !time.includes('Z')) {\n      // Ensure proper time format\n      const timeFormatted = time.length === 5 ? `${time}:00` : time;\n      const date = new Date(`2000-01-01T${timeFormatted}`);\n      if (isNaN(date.getTime())) return time; // Return original if invalid\n      return date.toLocaleTimeString('en-IN', { \n        hour: '2-digit', \n        minute: '2-digit',\n        timeZone: 'Asia/Kolkata'\n      });\n    }\n    \n    // Handle full datetime string - convert from UTC to IST\n    const date = new Date(time);\n    if (isNaN(date.getTime())) return time; // Return original if invalid\n    \n    // Format in Indian Standard Time\n    return date.toLocaleTimeString('en-IN', { \n      hour: '2-digit', \n      minute: '2-digit',\n      timeZone: 'Asia/Kolkata'\n    });\n  };\n\n  if (loadingCustom || loadingReminders) {\n    return <div className=\"flex items-center justify-center min-h-screen bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-white\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-4 sm:px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Button variant=\"ghost\" onClick={() => setLocation(\"/dashboard\")}>\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <div className=\"flex items-center gap-2\">\n              <Pill className=\"w-6 h-6 text-blue-500\" />\n              <h1 className=\"text-xl font-semibold text-gray-900 dark:text-white\">Medicine Manager</h1>\n            </div>\n          </div>\n          \n          <div className=\"flex gap-2\">\n            <Dialog open={isUploadDialogOpen} onOpenChange={setIsUploadDialogOpen}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" className=\"flex items-center gap-2\">\n                  <Upload className=\"w-4 h-4\" />\n                  Upload List\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Upload Medicine List</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>Paste your medicine list</Label>\n                    <Textarea\n                      placeholder=\"Example:\nAspirin 75mg - Once daily at 8:00 AM - Take with food\nMetformin 500mg - Twice daily at 7:00 AM, 7:00 PM - Before meals\nLisinopril 10mg - Once daily at 9:00 PM - For blood pressure\"\n                      value={uploadText}\n                      onChange={(e) => setUploadText(e.target.value)}\n                      rows={8}\n                    />\n                  </div>\n                  <Button \n                    onClick={() => uploadMedicinesMutation.mutate(uploadText)}\n                    disabled={uploadMedicinesMutation.isPending || !uploadText.trim()}\n                    className=\"w-full\"\n                  >\n                    {uploadMedicinesMutation.isPending ? \"Processing...\" : \"Upload Medicines\"}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"flex items-center gap-2\">\n                  <Plus className=\"w-4 h-4\" />\n                  Add Medicine\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Add Custom Medicine</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label>Medicine Name</Label>\n                      <Input\n                        value={newMedicine.name}\n                        onChange={(e) => setNewMedicine(prev => ({ ...prev, name: e.target.value }))}\n                        placeholder=\"e.g., Aspirin\"\n                      />\n                    </div>\n                    <div>\n                      <Label>Dosage</Label>\n                      <Input\n                        value={newMedicine.dosage}\n                        onChange={(e) => setNewMedicine(prev => ({ ...prev, dosage: e.target.value }))}\n                        placeholder=\"e.g., 75mg, 1 tablet\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label>Frequency</Label>\n                    <Select value={newMedicine.frequency} onValueChange={(value) => \n                      setNewMedicine(prev => ({ ...prev, frequency: value }))}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"once_daily\">Once Daily</SelectItem>\n                        <SelectItem value=\"twice_daily\">Twice Daily</SelectItem>\n                        <SelectItem value=\"three_times_daily\">Three Times Daily</SelectItem>\n                        <SelectItem value=\"four_times_daily\">Four Times Daily</SelectItem>\n                        <SelectItem value=\"as_needed\">As Needed</SelectItem>\n                        <SelectItem value=\"weekly\">Weekly</SelectItem>\n                        <SelectItem value=\"monthly\">Monthly</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label>Timings</Label>\n                    <div className=\"space-y-2\">\n                      {(newMedicine.timings || []).map((time, index) => (\n                        <div key={index} className=\"flex items-center gap-2\">\n                          <Input\n                            type=\"time\"\n                            value={time}\n                            onChange={(e) => updateTiming(index, e.target.value)}\n                            className=\"flex-1\"\n                          />\n                          {(newMedicine.timings || []).length > 1 && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => removeTiming(index)}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                        </div>\n                      ))}\n                      <Button variant=\"outline\" onClick={addTiming} className=\"w-full\">\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Add Timing\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label>Instructions</Label>\n                    <Textarea\n                      value={newMedicine.instructions}\n                      onChange={(e) => setNewMedicine(prev => ({ ...prev, instructions: e.target.value }))}\n                      placeholder=\"e.g., Take with food, before meals, etc.\"\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label>Start Date</Label>\n                      <Input\n                        type=\"date\"\n                        value={newMedicine.startDate}\n                        onChange={(e) => setNewMedicine(prev => ({ ...prev, startDate: e.target.value }))}\n                      />\n                    </div>\n                    <div>\n                      <Label>End Date (Optional)</Label>\n                      <Input\n                        type=\"date\"\n                        value={newMedicine.endDate}\n                        onChange={(e) => setNewMedicine(prev => ({ ...prev, endDate: e.target.value }))}\n                      />\n                    </div>\n                  </div>\n\n                  <Button \n                    onClick={() => addMedicineMutation.mutate(newMedicine)}\n                    disabled={addMedicineMutation.isPending || !newMedicine.name || !newMedicine.dosage}\n                    className=\"w-full\"\n                  >\n                    {addMedicineMutation.isPending ? \"Adding...\" : \"Add Medicine\"}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n\n            {/* Edit Medicine Dialog */}\n            <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Edit Medicine</DialogTitle>\n                </DialogHeader>\n                {editingMedicine && (\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label>Medicine Name</Label>\n                        <Input\n                          value={editingMedicine.name}\n                          onChange={(e) => updateEditingMedicine('name', e.target.value)}\n                          placeholder=\"e.g., Aspirin\"\n                          data-testid=\"input-edit-medicine-name\"\n                        />\n                      </div>\n                      <div>\n                        <Label>Dosage</Label>\n                        <Input\n                          value={editingMedicine.dosage}\n                          onChange={(e) => updateEditingMedicine('dosage', e.target.value)}\n                          placeholder=\"e.g., 75mg, 1 tablet\"\n                          data-testid=\"input-edit-medicine-dosage\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label>Frequency</Label>\n                      <Select value={editingMedicine.frequency} onValueChange={(value) => updateEditingMedicine('frequency', value)}>\n                        <SelectTrigger data-testid=\"select-edit-medicine-frequency\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"once_daily\">Once Daily</SelectItem>\n                          <SelectItem value=\"twice_daily\">Twice Daily</SelectItem>\n                          <SelectItem value=\"three_times_daily\">Three Times Daily</SelectItem>\n                          <SelectItem value=\"four_times_daily\">Four Times Daily</SelectItem>\n                          <SelectItem value=\"as_needed\">As Needed</SelectItem>\n                          <SelectItem value=\"weekly\">Weekly</SelectItem>\n                          <SelectItem value=\"monthly\">Monthly</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label>Timings</Label>\n                      <div className=\"space-y-2\">\n                        {(editingMedicine.timings || []).map((time, index) => (\n                          <div key={index} className=\"flex items-center gap-2\">\n                            <Input\n                              type=\"time\"\n                              value={time}\n                              onChange={(e) => updateEditTiming(index, e.target.value)}\n                              className=\"flex-1\"\n                              data-testid={`input-edit-timing-${index}`}\n                            />\n                            {(editingMedicine.timings || []).length > 1 && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => removeEditTiming(index)}\n                                data-testid={`button-remove-timing-${index}`}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            )}\n                          </div>\n                        ))}\n                        <Button variant=\"outline\" onClick={addEditTiming} className=\"w-full\" data-testid=\"button-add-edit-timing\">\n                          <Plus className=\"w-4 h-4 mr-2\" />\n                          Add Timing\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label>Instructions</Label>\n                      <Textarea\n                        value={editingMedicine.instructions}\n                        onChange={(e) => updateEditingMedicine('instructions', e.target.value)}\n                        placeholder=\"e.g., Take with food, before meals, etc.\"\n                        data-testid=\"textarea-edit-medicine-instructions\"\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label>Start Date</Label>\n                        <Input\n                          type=\"date\"\n                          value={editingMedicine.startDate}\n                          onChange={(e) => updateEditingMedicine('startDate', e.target.value)}\n                          data-testid=\"input-edit-medicine-start-date\"\n                        />\n                      </div>\n                      <div>\n                        <Label>End Date (Optional)</Label>\n                        <Input\n                          type=\"date\"\n                          value={editingMedicine.endDate || ''}\n                          onChange={(e) => updateEditingMedicine('endDate', e.target.value)}\n                          data-testid=\"input-edit-medicine-end-date\"\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label>Status</Label>\n                      <Select value={editingMedicine.status} onValueChange={(value) => updateEditingMedicine('status', value)}>\n                        <SelectTrigger data-testid=\"select-edit-medicine-status\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"active\">Active</SelectItem>\n                          <SelectItem value=\"completed\">Completed</SelectItem>\n                          <SelectItem value=\"paused\">Paused</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div className=\"flex gap-3\">\n                      <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)} className=\"flex-1\">\n                        Cancel\n                      </Button>\n                      <Button \n                        onClick={() => editMedicineMutation.mutate(editingMedicine)}\n                        disabled={editMedicineMutation.isPending || !editingMedicine.name || !editingMedicine.dosage}\n                        className=\"flex-1\"\n                        data-testid=\"button-save-edit-medicine\"\n                      >\n                        {editMedicineMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n        \n        {/* Search Bar for Medicines */}\n        <div className=\"px-4 sm:px-6 py-4 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n          <div className=\"relative\">\n            <Input\n              placeholder=\"Search medicines by name, dosage, frequency, or instructions...\"\n              value={medicineSearchQuery}\n              onChange={(e) => setMedicineSearchQuery(e.target.value)}\n              className=\"pl-4 pr-4\"\n              data-testid=\"input-medicine-search\"\n            />\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-6xl mx-auto p-6\">\n        <Tabs defaultValue=\"medicines\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"medicines\">My Medicines</TabsTrigger>\n            <TabsTrigger value=\"reminders\">Today's Reminders</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"medicines\">\n            <div className=\"grid gap-4\">\n              {customMedicines.length === 0 ? (\n                <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n                  <CardContent className=\"p-8 text-center\">\n                    <Pill className=\"w-12 h-12 text-gray-400 dark:text-gray-500 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No medicines added yet</h3>\n                    <p className=\"text-gray-500 dark:text-gray-400 mb-4\">Add your first medicine or upload a list to get started</p>\n                    <div className=\"flex gap-2 justify-center\">\n                      <Button onClick={() => setIsAddDialogOpen(true)}>\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Add Medicine\n                      </Button>\n                      <Button variant=\"outline\" onClick={() => setIsUploadDialogOpen(true)}>\n                        <Upload className=\"w-4 h-4 mr-2\" />\n                        Upload List\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ) : (\n                customMedicines\n                  .filter((medicine: CustomMedicine) => {\n                    if (!medicineSearchQuery) return true;\n                    const query = medicineSearchQuery.toLowerCase();\n                    const name = (medicine.name || '').toLowerCase();\n                    const dosage = (medicine.dosage || '').toLowerCase();\n                    const frequency = (medicine.frequency || '').toLowerCase();\n                    const instructions = (medicine.instructions || '').toLowerCase();\n                    \n                    return name.includes(query) ||\n                           dosage.includes(query) ||\n                           frequency.includes(query) ||\n                           instructions.includes(query);\n                  })\n                  .map((medicine: CustomMedicine) => {\n                  const medicineStats = missedDoses.find((md: any) => md.medicineName === medicine.name);\n                  const hasOverdueOrMissed = medicineStats && (medicineStats.missedDoses > 0 || medicineStats.overdueToday > 0);\n                  console.log('🔥 MEDICINE DEBUG:', { \n                    id: medicine.id, \n                    name: medicine.name, \n                    dosage: medicine.dosage, \n                    hasData: !!medicine.name \n                  });\n                  return (\n                    <Card key={medicine.id} className={`medicine-card border-gray-200 dark:border-gray-700 ${hasOverdueOrMissed ? 'overdue glow-urgent' : ''}`}>\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between\">\n                          <CardTitle className=\"flex items-center gap-2 font-bold text-lg\">\n                            <Pill className=\"w-5 h-5 text-blue-500\" />\n                            <span className=\"font-semibold\">\n                              {medicine.name || 'MISSING MEDICINE NAME'}\n                            </span>\n                          </CardTitle>\n                          <div className=\"flex items-center gap-2\">\n                            <Badge className={getStatusColor(medicine.status)}>\n                              {medicine.status}\n                            </Badge>\n                            <div className=\"flex gap-1\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => startEditMedicine(medicine)}\n                                disabled={editMedicineMutation.isPending}\n                                data-testid={`button-edit-medicine-${medicine.id}`}\n                              >\n                                <Edit className=\"w-4 h-4\" />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => handleDeleteMedicine(medicine.id!, medicine.name)}\n                                disabled={deleteMedicineMutation.isPending}\n                                className=\"text-red-600 hover:text-red-700 hover:bg-red-50 dark:text-red-400 dark:hover:text-red-300 dark:hover:bg-red-900/20\"\n                                data-testid={`button-delete-medicine-${medicine.id}`}\n                              >\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                        {medicineStats && (medicineStats.missedDoses > 0 || medicineStats.overdueToday > 0) && (\n                          <div className=\"flex gap-2 mt-2\">\n                            {medicineStats.missedDoses > 0 && (\n                              <Badge className=\"bg-red-100 text-red-800 text-xs pulse-urgent\">\n                                {medicineStats.missedDoses} missed doses\n                              </Badge>\n                            )}\n                            {medicineStats.overdueToday > 0 && (\n                              <Badge className=\"bg-orange-100 text-orange-800 text-xs pulse-delay\">\n                                {medicineStats.overdueToday} overdue today\n                              </Badge>\n                            )}\n                          </div>\n                        )}\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div>\n                            <p className=\"text-base font-medium\">\n                              Dosage: <span className=\"font-semibold\">{medicine.dosage || 'No dosage'}</span>\n                            </p>\n                            <p className=\"text-base font-medium\">\n                              Frequency: <span className=\"font-semibold\">{medicine.frequency?.replace('_', ' ') || 'Not specified'}</span>\n                            </p>\n                            <p className=\"text-base font-medium\">\n                              Instructions: <span className=\"font-semibold\">{medicine.instructions || 'Take as prescribed'}</span>\n                            </p>\n                          </div>\n                        <div>\n                          <p className=\"text-base mb-2 font-medium\">Timings:</p>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {(medicine.timings || []).map((time, index) => (\n                              <Badge key={index} variant=\"outline\" className=\"flex items-center gap-1\">\n                                <Clock className=\"w-3 h-3\" />\n                                <span>{formatTime(time)}</span>\n                              </Badge>\n                            ))}\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  );\n                })\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"reminders\">\n            <div className=\"grid gap-4\">\n              {reminders.length === 0 ? (\n                <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n                  <CardContent className=\"p-8 text-center\">\n                    <Clock className=\"w-12 h-12 text-gray-400 dark:text-gray-500 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No reminders for today</h3>\n                    <p className=\"text-gray-500 dark:text-gray-400\">Add some medicines to see reminders here</p>\n                  </CardContent>\n                </Card>\n              ) : (\n                reminders.map((reminder: any) => (\n                  <Card key={reminder.id} className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`w-3 h-3 rounded-full ${\n                            reminder.isTaken ? 'bg-green-500' : \n                            reminder.isSkipped ? 'bg-red-500' : \n                            new Date(reminder.scheduledAt) < new Date() ? 'bg-orange-500' : 'bg-yellow-500'\n                          }`} />\n                          <div>\n                            <h4 className=\"font-medium text-gray-900 dark:text-white\">{reminder.medicineName || reminder.prescription?.medicine?.name || 'Medicine'}</h4>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                              {reminder.dosage || reminder.prescription?.dosage} - {formatTime(reminder.scheduledAt)}\n                              {!reminder.isTaken && !reminder.isSkipped && new Date(reminder.scheduledAt) < new Date() && (\n                                <Badge className=\"bg-orange-100 text-orange-800 text-xs ml-2\">Overdue</Badge>\n                              )}\n                            </p>\n                            {reminder.notes && (\n                              <p className=\"text-sm text-gray-500\">{reminder.notes}</p>\n                            )}\n                          </div>\n                        </div>\n                        \n                        {!reminder.isTaken && !reminder.isSkipped && (\n                          <div className=\"flex gap-2\">\n                            <Button\n                              size=\"sm\"\n                              onClick={() => updateReminderMutation.mutate({ id: reminder.id, status: 'taken' })}\n                              disabled={updateReminderMutation.isPending}\n                            >\n                              <CheckCircle className=\"w-4 h-4 mr-1\" />\n                              Taken\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => updateReminderMutation.mutate({ id: reminder.id, status: 'skipped' })}\n                              disabled={updateReminderMutation.isPending}\n                            >\n                              <XCircle className=\"w-4 h-4 mr-1\" />\n                              Skip\n                            </Button>\n                          </div>\n                        )}\n                        \n                        {(reminder.isTaken || reminder.isSkipped) && (\n                          <div className=\"flex gap-2 items-center\">\n                            <Badge className={reminder.isTaken ? \"bg-green-500\" : \"bg-gray-500\"}>\n                              {reminder.isTaken ? (\n                                <>\n                                  <CheckCircle className=\"w-3 h-3 mr-1\" />\n                                  Taken\n                                </>\n                              ) : (\n                                <>\n                                  <XCircle className=\"w-3 h-3 mr-1\" />\n                                  Skipped\n                                </>\n                              )}\n                            </Badge>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"bg-orange-500 hover:bg-orange-600 text-white border-orange-500\"\n                              onClick={() => updateReminderMutation.mutate({ id: reminder.id, status: 'skipped' })}\n                              disabled={updateReminderMutation.isPending}\n                            >\n                              <AlertCircle className=\"w-3 h-3 mr-1\" />\n                              Correct\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":37030},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { User, Phone, Mail, Calendar, MapPin, Heart, ArrowLeft, Stethoscope } from \"lucide-react\";\n\nexport default function ProfilePage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    dateOfBirth: \"\",\n    address: \"\",\n    emergencyContact: \"\",\n  });\n\n  // Check authentication and redirect if needed\n  useEffect(() => {\n    const token = localStorage.getItem(\"auth_token\");\n    if (!token) {\n      setLocation(\"/patient-login\");\n      return;\n    }\n  }, [setLocation]);\n\n  // Fetch user data from API\n  const { data: profileData, isLoading } = useQuery({\n    queryKey: [\"/api/users/me\"],\n    enabled: !!localStorage.getItem(\"auth_token\"),\n  });\n\n  // Update form data when profile data is loaded\n  useEffect(() => {\n    if (profileData) {\n      setFormData({\n        firstName: profileData.firstName || \"\",\n        lastName: profileData.lastName || \"\",\n        email: profileData.email || \"\",\n        dateOfBirth: profileData.dateOfBirth ? profileData.dateOfBirth.split('T')[0] : \"\",\n        address: profileData.address || \"\",\n        emergencyContact: profileData.emergencyContact || \"\",\n      });\n    }\n  }, [profileData]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"PUT\", \"/api/users/me\", data);\n      return response.json();\n    },\n    onSuccess: (updatedUser) => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been successfully updated.\",\n      });\n      // Update localStorage user data if it exists\n      const existingUser = localStorage.getItem(\"user\");\n      if (existingUser) {\n        localStorage.setItem(\"user\", JSON.stringify(updatedUser));\n      }\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/me\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update profile\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSaveProfile = () => {\n    updateProfileMutation.mutate(formData);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading your profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-4xl mx-auto px-4 py-4\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setLocation(\"/dashboard\")}\n              className=\"flex items-center gap-2\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              Back to Dashboard\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Profile Settings</h1>\n              <p className=\"text-sm text-gray-600\">Manage your personal information</p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"max-w-4xl mx-auto px-4 py-8\">\n        <div className=\"grid gap-6\">\n          {/* Profile Information Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"w-5 h-5 text-blue-500\" />\n                Personal Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <Input\n                    id=\"firstName\"\n                    value={formData.firstName}\n                    onChange={(e) => handleInputChange(\"firstName\", e.target.value)}\n                    placeholder=\"Enter your first name\"\n                    data-testid=\"input-firstName\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input\n                    id=\"lastName\"\n                    value={formData.lastName}\n                    onChange={(e) => handleInputChange(\"lastName\", e.target.value)}\n                    placeholder=\"Enter your last name\"\n                    data-testid=\"input-lastName\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"email\">Email Address</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                    placeholder=\"Enter your email address\"\n                    className=\"pl-10\"\n                    data-testid=\"input-email\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n                <div className=\"relative\">\n                  <Calendar className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"dateOfBirth\"\n                    type=\"date\"\n                    value={formData.dateOfBirth}\n                    onChange={(e) => handleInputChange(\"dateOfBirth\", e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-dateOfBirth\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"address\">Address</Label>\n                <div className=\"relative\">\n                  <MapPin className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                  <Textarea\n                    id=\"address\"\n                    value={formData.address}\n                    onChange={(e) => handleInputChange(\"address\", e.target.value)}\n                    placeholder=\"Enter your complete address\"\n                    className=\"pl-10 resize-none\"\n                    rows={3}\n                    data-testid=\"input-address\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"emergencyContact\">Emergency Contact</Label>\n                <div className=\"relative\">\n                  <Heart className=\"absolute left-3 top-3 w-4 h-4 text-gray-400\" />\n                  <Input\n                    id=\"emergencyContact\"\n                    value={formData.emergencyContact}\n                    onChange={(e) => handleInputChange(\"emergencyContact\", e.target.value)}\n                    placeholder=\"Emergency contact phone number\"\n                    className=\"pl-10\"\n                    data-testid=\"input-emergencyContact\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"pt-4\">\n                <Button\n                  onClick={handleSaveProfile}\n                  disabled={updateProfileMutation.isPending}\n                  className=\"bg-blue-500 hover:bg-blue-600\"\n                  data-testid=\"button-save-profile\"\n                >\n                  {updateProfileMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Medical History Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Stethoscope className=\"w-5 h-5 text-blue-500\" />\n                Medical History\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"allergies\">Known Allergies</Label>\n                <Input\n                  id=\"allergies\"\n                  value={formData.allergies || \"\"}\n                  onChange={(e) => handleInputChange(\"allergies\", e.target.value)}\n                  placeholder=\"List any allergies (e.g., penicillin, peanuts)\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"chronicConditions\">Chronic Conditions</Label>\n                <Input\n                  id=\"chronicConditions\"\n                  value={formData.chronicConditions || \"\"}\n                  onChange={(e) => handleInputChange(\"chronicConditions\", e.target.value)}\n                  placeholder=\"List chronic conditions (e.g., diabetes, hypertension)\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"bloodType\">Blood Type</Label>\n                <Input\n                  id=\"bloodType\"\n                  value={formData.bloodType || \"\"}\n                  onChange={(e) => handleInputChange(\"bloodType\", e.target.value)}\n                  placeholder=\"Enter blood type (e.g., A+, B-, O+)\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"emergencyContact\">Emergency Contact</Label>\n                <Input\n                  id=\"emergencyContact\"\n                  value={formData.emergencyContact || \"\"}\n                  onChange={(e) => handleInputChange(\"emergencyContact\", e.target.value)}\n                  placeholder=\"Emergency contact name and phone\"\n                />\n              </div>\n              <div className=\"pt-4\">\n                <Button\n                  onClick={handleSaveProfile}\n                  disabled={updateProfileMutation.isPending}\n                  className=\"bg-blue-500 hover:bg-blue-600 w-full\"\n                >\n                  {updateProfileMutation.isPending ? \"Saving...\" : \"Save Medical Information\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":10910},"client/src/components/CancelModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { AlertTriangle, Calendar, X } from \"lucide-react\";\n\ninterface CancelModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  appointment?: any;\n}\n\nexport default function CancelModal({ isOpen, onClose, appointment }: CancelModalProps) {\n  const { toast } = useToast();\n  const [reason, setReason] = useState(\"\");\n\n  // Cancel appointment mutation\n  const cancelMutation = useMutation({\n    mutationFn: (data: { appointmentId: string; reason: string }) => \n      apiRequest('PUT', `/api/appointments/${data.appointmentId}/cancel`, { reason: data.reason }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] });\n      onClose();\n      setReason(\"\");\n      toast({\n        title: \"Appointment Cancelled\",\n        description: \"Your appointment has been cancelled successfully. You'll receive a confirmation SMS.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Cancellation Failed\",\n        description: error.message || \"Failed to cancel appointment. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleCancel = () => {\n    if (!appointment?.id) {\n      toast({\n        title: \"No Appointment\",\n        description: \"No appointment selected for cancellation.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    cancelMutation.mutate({\n      appointmentId: appointment.id,\n      reason: reason.trim() || \"No reason provided\"\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 text-red-600\">\n            <AlertTriangle className=\"w-5 h-5\" />\n            Cancel Appointment\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Appointment Details */}\n          {appointment && (\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium mb-2\">Appointment Details</h4>\n              <div className=\"space-y-1 text-sm\">\n                <p><strong>Doctor:</strong> {appointment.doctor?.firstName} {appointment.doctor?.lastName}</p>\n                <p><strong>Date:</strong> {new Date(appointment.appointmentDate).toLocaleDateString()}</p>\n                <p><strong>Time:</strong> {new Date(appointment.appointmentDate).toLocaleTimeString()}</p>\n                <p><strong>Type:</strong> {appointment.type?.replace('_', ' ')}</p>\n              </div>\n            </div>\n          )}\n\n          {/* Cancellation Reason */}\n          <div>\n            <Label htmlFor=\"reason\">Reason for Cancellation (Optional)</Label>\n            <Textarea\n              id=\"reason\"\n              placeholder=\"Please let us know why you're cancelling...\"\n              value={reason}\n              onChange={(e) => setReason(e.target.value)}\n              className=\"mt-2\"\n              rows={3}\n            />\n          </div>\n\n          {/* Warning */}\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n            <div className=\"flex items-start gap-2\">\n              <AlertTriangle className=\"w-4 h-4 text-red-500 mt-0.5 flex-shrink-0\" />\n              <div className=\"text-sm text-red-700\">\n                <p className=\"font-medium\">Cancellation Policy</p>\n                <p className=\"mt-1\">Cancelling within 24 hours may incur a cancellation fee. Emergency cancellations are exempt.</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 pt-2\">\n            <Button\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={cancelMutation.isPending}\n              className=\"flex-1\"\n            >\n              Keep Appointment\n            </Button>\n            <Button\n              onClick={handleCancel}\n              disabled={cancelMutation.isPending}\n              className=\"flex-1 bg-red-600 hover:bg-red-700 text-white\"\n            >\n              {cancelMutation.isPending ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Cancelling...\n                </>\n              ) : (\n                <>\n                  <X className=\"w-4 h-4 mr-2\" />\n                  Cancel Appointment\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4941},"client/src/components/EmergencyModal.tsx":{"content":"\"use client\";\n\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { AlertTriangle, Phone } from 'lucide-react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\nconst emergencySchema = z.object({\n  urgencyLevel: z.enum(['low', 'medium', 'high', 'critical']),\n  symptoms: z.string().min(1, 'Please describe your symptoms'),\n  contactMethod: z.enum(['phone', 'email', 'sms']),\n  location: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype EmergencyFormData = z.infer<typeof emergencySchema>;\n\ninterface EmergencyModalProps {\n  patientId: string;\n  trigger?: React.ReactNode;\n  onClose?: () => void;\n}\n\nexport function EmergencyModal({ patientId, trigger, onClose }: EmergencyModalProps) {\n  const [isOpen, setIsOpen] = useState(true); // Auto-open modal when rendered\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<EmergencyFormData>({\n    resolver: zodResolver(emergencySchema),\n    defaultValues: {\n      urgencyLevel: 'medium',\n      contactMethod: 'phone',\n      symptoms: '',\n      location: '',\n      notes: '',\n    },\n  });\n\n  const emergencyMutation = useMutation({\n    mutationFn: async (data: EmergencyFormData) => {\n      const response = await apiRequest('POST', '/api/emergency', {\n        ...data,\n        patientId,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Emergency Request Sent',\n        description: 'Your emergency request has been sent to the medical staff. They will contact you shortly.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/emergency-requests'] });\n      setIsOpen(false);\n      onClose?.();\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to send emergency request',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: EmergencyFormData) => {\n    emergencyMutation.mutate(data);\n  };\n\n  const urgencyColors = {\n    low: 'text-yellow-600',\n    medium: 'text-orange-600',\n    high: 'text-red-600',\n    critical: 'text-red-800 font-bold',\n  };\n\n  const handleOpenChange = (open: boolean) => {\n    setIsOpen(open);\n    if (!open) {\n      onClose?.();\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleOpenChange}>\n      <DialogTrigger asChild>\n        {trigger || (\n          <Button\n            variant=\"destructive\"\n            size=\"sm\"\n            className=\"bg-red-600 hover:bg-red-700\"\n            data-testid=\"button-emergency\"\n          >\n            <AlertTriangle className=\"h-4 w-4 mr-2\" />\n            Emergency\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2 text-red-600\">\n            <AlertTriangle className=\"h-5 w-5\" />\n            Emergency Request\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"urgencyLevel\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Urgency Level</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-urgency\">\n                        <SelectValue placeholder=\"Select urgency level\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"low\">\n                        <span className=\"text-yellow-600\">Low - Non-urgent concern</span>\n                      </SelectItem>\n                      <SelectItem value=\"medium\">\n                        <span className=\"text-orange-600\">Medium - Needs attention</span>\n                      </SelectItem>\n                      <SelectItem value=\"high\">\n                        <span className=\"text-red-600\">High - Urgent medical issue</span>\n                      </SelectItem>\n                      <SelectItem value=\"critical\">\n                        <span className=\"text-red-800 font-bold\">Critical - Life threatening</span>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"symptoms\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Symptoms/Description *</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Describe your symptoms or emergency situation...\"\n                      className=\"min-h-[80px]\"\n                      data-testid=\"input-symptoms\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"contactMethod\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Preferred Contact Method</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-contact\">\n                        <SelectValue placeholder=\"How should we contact you?\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"phone\">\n                        <span className=\"flex items-center gap-2\">\n                          <Phone className=\"h-4 w-4\" />\n                          Phone Call\n                        </span>\n                      </SelectItem>\n                      <SelectItem value=\"sms\">SMS/Text Message</SelectItem>\n                      <SelectItem value=\"email\">Email</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"location\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Current Location (Optional)</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"Your current address or location\"\n                      data-testid=\"input-location\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"notes\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Additional Notes (Optional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Any additional information...\"\n                      className=\"min-h-[60px]\"\n                      data-testid=\"input-notes\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end gap-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsOpen(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                variant=\"destructive\"\n                disabled={emergencyMutation.isPending}\n                className=\"bg-red-600 hover:bg-red-700\"\n                data-testid=\"button-submit-emergency\"\n              >\n                {emergencyMutation.isPending ? 'Sending...' : 'Send Emergency Request'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9039},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as Theme;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    }\n  }, []);\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.remove(\"dark\");\n    }\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}","size_bytes":1181},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { ArrowLeft, User, Bell, Shield, Moon, Sun } from \"lucide-react\";\n\ninterface UserSettings {\n  notifications: boolean;\n  smsReminders: boolean;\n  emailUpdates: boolean;\n  darkMode: boolean;\n  emergencyContact: string;\n  language: string;\n}\n\nexport default function SettingsPage() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { theme, toggleTheme } = useTheme();\n  const [settings, setSettings] = useState<UserSettings>({\n    notifications: true,\n    smsReminders: true,\n    emailUpdates: false,\n    darkMode: false,\n    emergencyContact: \"\",\n    language: \"en\"\n  });\n\n  // Fetch user profile\n  const { data: user, isLoading } = useQuery({\n    queryKey: ['/api/users/me'],\n  });\n\n  // Update settings mutation\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (newSettings: Partial<UserSettings>) => {\n      const response = await apiRequest(\"PUT\", \"/api/users/settings\", newSettings);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users/me'] });\n      toast({\n        title: \"Settings Updated\",\n        description: \"Your preferences have been saved successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update settings. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSettingChange = (key: keyof UserSettings, value: boolean | string) => {\n    const newSettings = { ...settings, [key]: value };\n    setSettings(newSettings);\n    updateSettingsMutation.mutate({ [key]: value });\n  };\n\n  const deleteAccountMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"DELETE\", \"/api/users/me\");\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Account Deleted\",\n        description: \"Your account has been deactivated successfully.\",\n      });\n      localStorage.removeItem(\"auth_token\");\n      window.location.href = \"/login\";\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteAccount = () => {\n    if (confirm(\"Are you sure you want to delete your account? This action cannot be undone.\")) {\n      deleteAccountMutation.mutate();\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading settings...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\">\n      <div className=\"container mx-auto px-4 py-6 max-w-4xl\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center gap-4\">\n            <Button \n              variant=\"outline\" \n              size=\"icon\"\n              onClick={() => setLocation(\"/dashboard\")}\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Settings</h1>\n              <p className=\"text-gray-600\">Manage your account preferences and privacy settings</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Account Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"w-5 h-5\" />\n                Account Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <Input \n                    id=\"firstName\" \n                    value={user?.firstName || \"\"} \n                    readOnly\n                    className=\"bg-gray-50\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input \n                    id=\"lastName\" \n                    value={user?.lastName || \"\"} \n                    readOnly\n                    className=\"bg-gray-50\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input \n                  id=\"email\" \n                  value={user?.email || \"\"} \n                  readOnly\n                  className=\"bg-gray-50\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"phone\">Phone Number</Label>\n                <Input \n                  id=\"phone\" \n                  value={user?.phoneNumber || \"\"} \n                  readOnly\n                  className=\"bg-gray-50\"\n                />\n              </div>\n              <p className=\"text-sm text-gray-500\">\n                Contact support to update your personal information.\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Notification Settings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"w-5 h-5\" />\n                Notification Preferences\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Push Notifications</Label>\n                  <p className=\"text-sm text-gray-500\">Receive notifications about appointments and reminders</p>\n                </div>\n                <Switch\n                  checked={settings.notifications}\n                  onCheckedChange={(checked) => handleSettingChange('notifications', checked)}\n                />\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">SMS Reminders</Label>\n                  <p className=\"text-sm text-gray-500\">Get text messages for medicine and appointment reminders</p>\n                </div>\n                <Switch\n                  checked={settings.smsReminders}\n                  onCheckedChange={(checked) => handleSettingChange('smsReminders', checked)}\n                />\n              </div>\n              <Separator />\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Email Updates</Label>\n                  <p className=\"text-sm text-gray-500\">Receive weekly health reports and clinic updates</p>\n                </div>\n                <Switch\n                  checked={settings.emailUpdates}\n                  onCheckedChange={(checked) => handleSettingChange('emailUpdates', checked)}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Privacy & Security */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Shield className=\"w-5 h-5\" />\n                Privacy & Security\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"emergencyContact\">Emergency Contact</Label>\n                <Input \n                  id=\"emergencyContact\"\n                  placeholder=\"Enter emergency contact number\"\n                  value={settings.emergencyContact}\n                  onChange={(e) => handleSettingChange('emergencyContact', e.target.value)}\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <Label className=\"text-base font-medium\">Dark Mode</Label>\n                  <p className=\"text-sm text-gray-500\">Switch to dark theme for better viewing in low light</p>\n                </div>\n                <Switch\n                  checked={theme === 'dark'}\n                  onCheckedChange={toggleTheme}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Danger Zone */}\n          <Card className=\"border-red-200\">\n            <CardHeader>\n              <CardTitle className=\"text-red-600\">Danger Zone</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between p-4 bg-red-50 rounded-lg\">\n                <div>\n                  <h3 className=\"font-medium text-red-800\">Delete Account</h3>\n                  <p className=\"text-sm text-red-600\">Permanently delete your account and all associated data</p>\n                </div>\n                <Button \n                  variant=\"destructive\" \n                  size=\"sm\"\n                  onClick={handleDeleteAccount}\n                  disabled={deleteAccountMutation.isPending}\n                >\n                  {deleteAccountMutation.isPending ? \"Deleting...\" : \"Delete Account\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10287},"client/src/components/AppointmentDetailsModal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, Clock, MapPin, Stethoscope, FileText, Phone } from \"lucide-react\";\n\ninterface AppointmentDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  appointment: any;\n}\n\nexport default function AppointmentDetailsModal({ isOpen, onClose, appointment }: AppointmentDetailsModalProps) {\n  if (!appointment) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"w-5 h-5 text-blue-500\" />\n            Appointment Details\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          {/* Doctor Information */}\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n              <Stethoscope className=\"w-6 h-6 text-blue-600\" />\n            </div>\n            <div>\n              <p className=\"font-semibold\">{appointment.doctor.firstName?.startsWith('Dr. ') ? `${appointment.doctor.firstName} ${appointment.doctor.lastName}` : `Dr. ${appointment.doctor.firstName} ${appointment.doctor.lastName}`}</p>\n              <p className=\"text-sm text-gray-600\">{appointment.doctor.email}</p>\n            </div>\n          </div>\n\n          {/* Appointment Details */}\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-sm\">\n                {new Date(appointment.appointmentDate).toLocaleDateString('en-US', {\n                  weekday: 'long',\n                  year: 'numeric',\n                  month: 'long',\n                  day: 'numeric'\n                })}\n              </span>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <Clock className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-sm\">\n                {new Date(appointment.appointmentDate).toLocaleTimeString('en-US', {\n                  hour: 'numeric',\n                  minute: '2-digit',\n                  hour12: true\n                })}\n              </span>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <MapPin className=\"w-4 h-4 text-gray-400\" />\n              <span className=\"text-sm\">{appointment.location || \"Clinic\"}</span>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <Badge className=\"bg-blue-100 text-blue-800 capitalize\">\n                {appointment.type.replace('_', ' ')}\n              </Badge>\n              <Badge className=\"bg-green-100 text-green-800 capitalize\">\n                {appointment.status}\n              </Badge>\n            </div>\n\n            {appointment.symptoms && (\n              <div>\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <FileText className=\"w-4 h-4 text-gray-400\" />\n                  <span className=\"text-sm font-medium\">Symptoms</span>\n                </div>\n                <p className=\"text-sm text-gray-600 ml-6\">{appointment.symptoms}</p>\n              </div>\n            )}\n\n            {appointment.notes && (\n              <div>\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <FileText className=\"w-4 h-4 text-gray-400\" />\n                  <span className=\"text-sm font-medium\">Notes</span>\n                </div>\n                <p className=\"text-sm text-gray-600 ml-6\">{appointment.notes}</p>\n              </div>\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-2 pt-4\">\n            <Button variant=\"outline\" className=\"flex-1\" onClick={onClose}>\n              Close\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":4128},"client/src/pages/admin-dashboard.tsx":{"content":"\"use client\"\n\nimport React, { useState, useEffect, useCallback } from \"react\"\nimport {\n  Bell,\n  Calendar,\n  Clock,\n  Users,\n  DollarSign,\n  AlertTriangle,\n  Activity,\n  UserPlus,\n  FileText,\n  LogOut,\n  Settings,\n  BarChart3,\n  Stethoscope,\n  User,\n  TrendingUp,\n  X,\n  Plus,\n  UserCheck,\n  Shield,\n  Database,\n  Download,\n  MessageCircle,\n  Star,\n  Eye,\n  Mail,\n  PhoneCall,\n  Pill,\n  Moon,\n  Sun\n} from \"lucide-react\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { apiRequest } from \"@/lib/queryClient\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { useQueueSocket } from \"@/hooks/useQueueSocket\"\nimport { useTheme } from \"@/components/ThemeProvider\"\nimport { UnifiedEmergencyAlerts } from \"@/components/UnifiedEmergencyAlerts\"\n\nimport jsPDF from 'jspdf'\n\ninterface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  phoneNumber: string;\n  email?: string;\n  address?: string;\n  isActive: boolean;\n  isApproved: boolean;\n  createdAt: string;\n}\n\ninterface StaffPresence {\n  id: string;\n  staffId: string;\n  date: string;\n  isPresent: boolean;\n  checkInTime: string | null;\n  checkOutTime: string | null;\n  markedByAdmin: boolean;\n  lastUpdated: string;\n}\n\ninterface DashboardStats {\n  patientsToday: number;\n  completedAppointments: number;\n  revenue: number;\n  activeStaff: number;\n}\n\ninterface QueueToken {\n  id: string;\n  tokenNumber: number;\n  status: string;\n  estimatedWaitTime: number;\n  createdAt: string;\n  patient: User;\n  doctor: User;\n}\n\ninterface Appointment {\n  id: string;\n  patientId: string;\n  doctorId: string;\n  appointmentDate: string;\n  appointmentTime?: string;\n  consultationType?: string;\n  symptoms: string;\n  status: string;\n  type?: string;\n  duration?: number;\n  diagnosis?: string;\n  treatmentPlan?: string;\n  createdAt: string;\n  updatedAt: string;\n  patient: User;\n  doctor: User;\n}\n\ninterface Medicine {\n  id: string;\n  name: string;\n  description: string;\n  dosageForm: string;\n  strength: string;\n  manufacturer: string;\n  stock: number;\n}\n\ninterface StaffMember extends User {\n  specialization?: string;\n  department?: string;\n  lastCheckIn?: string;\n  isPresent: boolean;\n}\n\ninterface StaffPresence {\n  id: string;\n  staffId: string;\n  date: string;\n  isPresent: boolean;\n  checkInTime: string | null;\n  markedByAdmin: boolean;\n  createdAt: string;\n  updatedAt: string;\n  staff: User;\n}\n\n// Emergency Alert Interface\ninterface EmergencyAlert {\n  id: string;\n  title: string;\n  message: string;\n  type: 'appointment_delay' | 'staff_missing' | 'medicine_low' | 'high_volume' | 'queue_overload';\n  priority: 'high' | 'medium' | 'low';\n  timestamp: string;\n  timeAgo: string;\n  color: string;\n}\n\nexport default function ClinicDashboard() {\n  const [activeTab, setActiveTab] = useState('dashboard')\n  const [currentTime, setCurrentTime] = useState(new Date())\n  const [reportData, setReportData] = useState<any>(null)\n  const [isAddMedicineOpen, setIsAddMedicineOpen] = useState(false)\n  const [isRestockOpen, setIsRestockOpen] = useState(false)\n  const [isEditMedicineOpen, setIsEditMedicineOpen] = useState(false)\n  const [isAddStaffOpen, setIsAddStaffOpen] = useState(false)\n  const [selectedMedicine, setSelectedMedicine] = useState<any>(null)\n  const [newMedicine, setNewMedicine] = useState({\n    name: '',\n    strength: '',\n    dosageForm: '',\n    manufacturer: '',\n    stock: 0,\n    description: ''\n  })\n  \n  // Patient form state\n  const [patientForm, setPatientForm] = useState({\n    firstName: '',\n    lastName: '',\n    phoneNumber: '',\n    email: '',\n    dateOfBirth: '',\n    address: ''\n  })\n  \n  // Admin profile form state\n  const [adminProfileForm, setAdminProfileForm] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    phoneNumber: ''\n  })\n  const [isEditProfileOpen, setIsEditProfileOpen] = useState(false)\n  \n  // Reschedule form state\n  const [rescheduleForm, setRescheduleForm] = useState({\n    appointmentId: '',\n    newDate: '',\n    newTime: ''\n  })\n  const [restockAmount, setRestockAmount] = useState(0)\n  const [forceRender, setForceRender] = useState(0)\n  const [showAppointmentModal, setShowAppointmentModal] = useState(false)\n  const [showPatientModal, setShowPatientModal] = useState(false)\n  const [isDelayModalOpen, setIsDelayModalOpen] = useState(false)\n  \n  // Delay notification form state\n  const [delayForm, setDelayForm] = useState({\n    doctorId: '',\n    delayMinutes: '',\n    reason: ''\n  })\n  \n  // Feedback management state\n  const [isContactModalOpen, setIsContactModalOpen] = useState(false)\n  const [selectedFeedback, setSelectedFeedback] = useState<any>(null)\n  \n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n  const { theme, toggleTheme } = useTheme()\n\n  // Appointment approval mutation\n  const appointmentApproval = useMutation({\n    mutationFn: async ({ appointmentId, action }: { appointmentId: string; action: 'approve' | 'reject' }) => {\n      return apiRequest('POST', `/api/appointments/admin/${appointmentId}/${action}`)\n    },\n    onSuccess: (_, variables) => {\n      toast({\n        title: variables.action === 'approve' ? 'Appointment Approved' : 'Appointment Rejected',\n        description: variables.action === 'approve' \n          ? 'Patient will receive SMS confirmation' \n          : 'Patient will be notified of the rejection'\n      })\n      // Invalidate both admin and patient appointment queries for real-time sync\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments/admin'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] })\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to update appointment status',\n        variant: 'destructive'\n      })\n    }\n  })\n\n  // Handler for appointment approval/rejection\n  const handleAppointmentAction = (appointmentId: string, action: 'approve' | 'reject') => {\n    console.log('🔥 Button clicked:', action, 'for appointment:', appointmentId)\n    appointmentApproval.mutate({ appointmentId, action })\n  }\n\n  // Delay notification mutation\n  const delayNotificationMutation = useMutation({\n    mutationFn: async (delayData: { doctorId: string; delayMinutes: number; reason?: string }) => {\n      return apiRequest('POST', '/api/delays', delayData)\n    },\n    onSuccess: (data) => {\n      toast({\n        title: 'Doctor Running Late Notification Sent',\n        description: `SMS notifications sent to all affected patients about ${data.delayMinutes} minute delay`\n      })\n      setIsDelayModalOpen(false)\n      setDelayForm({ doctorId: '', delayMinutes: '', reason: '' })\n      // Invalidate queries to refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments/admin'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/delays'] })\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to send delay notification',\n        variant: 'destructive'\n      })\n    }\n  })\n\n  // Handler for delay notification\n  const handleDelaySubmit = () => {\n    if (!delayForm.doctorId || !delayForm.delayMinutes) {\n      toast({\n        title: 'Missing Information',\n        description: 'Please select a doctor and specify delay minutes',\n        variant: 'destructive'\n      })\n      return\n    }\n    \n    delayNotificationMutation.mutate({\n      doctorId: delayForm.doctorId,\n      delayMinutes: parseInt(delayForm.delayMinutes),\n      reason: delayForm.reason || undefined\n    })\n  }\n\n  // Feedback mark as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: async (feedbackId: string) => {\n      return apiRequest('PUT', `/api/feedback/${feedbackId}/read`)\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Feedback Marked as Read',\n        description: 'The feedback has been marked as read'\n      })\n      queryClient.invalidateQueries({ queryKey: ['/api/feedback'] })\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to mark feedback as read',\n        variant: 'destructive'\n      })\n    }\n  })\n\n  // Feedback handlers\n  const handleMarkAsRead = (feedbackId: string) => {\n    markAsReadMutation.mutate(feedbackId)\n  }\n\n  const handleContactPatient = (feedbackItem: any) => {\n    setSelectedFeedback(feedbackItem)\n    setIsContactModalOpen(true)\n  }\n\n  // Alert management functions\n  const resolveAlert = (alertId: string) => {\n    setEmergencyAlerts(prev => prev.filter(alert => alert.id !== alertId))\n    setShowAlertModal(false)\n    setSelectedAlert(null)\n    toast({\n      title: 'Alert Resolved',\n      description: 'The emergency alert has been marked as resolved.'\n    })\n  }\n  \n  // Get real feedback data for notifications\n  const { data: feedbackData = [] } = useQuery({\n    queryKey: ['/api/feedback'],\n    refetchInterval: 30000 // Refresh every 30 seconds for real-time updates\n  })\n\n  // Filter unread feedback for notifications\n  const unreadFeedback = feedbackData.filter((feedback: any) => !feedback.isRead)\n\n  // Emergency alerts state (for other non-feedback alerts)\n  const [emergencyAlerts, setEmergencyAlerts] = useState<EmergencyAlert[]>([])\n  const [lastAlertCheck, setLastAlertCheck] = useState<Date>(new Date())\n  \n  // Alert modal states\n  const [showAlertModal, setShowAlertModal] = useState(false)\n  const [selectedAlert, setSelectedAlert] = useState<EmergencyAlert | null>(null)\n  \n\n\n\n\n  // Appointment form state\n  const [appointmentForm, setAppointmentForm] = useState({\n    patientName: '',\n    doctorId: '',\n    date: '',\n    time: '',\n    type: 'clinic',\n    symptoms: ''\n  })\n\n  const [prescriptionForm, setPrescriptionForm] = useState({\n    patientId: '',\n    medicineName: '',\n    dosage: '',\n    frequency: '',\n    duration: '',\n    instructions: ''\n  })\n\n\n\n  const [staffForm, setStaffForm] = useState({\n    firstName: '',\n    lastName: '',\n    phoneNumber: '',\n    email: '',\n    role: 'staff'\n  })\n\n  // Patient record modal states\n  const [selectedPatient, setSelectedPatient] = useState<User | null>(null)\n  const [showHistoryModal, setShowHistoryModal] = useState(false)\n  const [showEditModal, setShowEditModal] = useState(false)\n  \n  // Search functionality states\n  const [appointmentSearchQuery, setAppointmentSearchQuery] = useState(\"\")\n  const [patientSearchQuery, setPatientSearchQuery] = useState(\"\")\n  const [editPatientForm, setEditPatientForm] = useState({\n    firstName: '',\n    lastName: '',\n    phoneNumber: '',\n    email: '',\n    address: '',\n    dateOfBirth: ''\n  })\n\n\n\n  // Form submission handlers\n  const handlePatientSubmit = async () => {\n    if (!patientForm.firstName || !patientForm.lastName || !patientForm.phoneNumber) {\n      toast({\n        title: 'Validation Error',\n        description: 'Please fill in all required fields (name and phone number).',\n        variant: 'destructive'\n      })\n      return\n    }\n\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n        },\n        body: JSON.stringify({\n          firstName: patientForm.firstName,\n          lastName: patientForm.lastName,\n          phoneNumber: patientForm.phoneNumber,\n          email: patientForm.email || undefined,\n          role: 'patient',\n          password: 'temp123', // Default password\n          dateOfBirth: patientForm.dateOfBirth || undefined, // Send as string, schema will convert\n          address: patientForm.address || undefined,\n          clinicId: currentUser?.clinicId || '84e1b3c6-3b25-4446-96e8-a227d9e92d76' // Link patient to the same clinic as admin\n        })\n      })\n      \n      if (response.ok) {\n        // Refresh patient data\n        queryClient.invalidateQueries({ queryKey: ['/api/patients'] })\n        queryClient.invalidateQueries({ queryKey: ['/api/users'] })\n        queryClient.invalidateQueries({ queryKey: ['/api/appointments/admin'] })\n        \n        toast({\n          title: 'Patient Added Successfully',\n          description: `${patientForm.firstName} ${patientForm.lastName} has been registered and will appear in Patient Records.`,\n        })\n        \n        setPatientForm({\n          firstName: '',\n          lastName: '',\n          phoneNumber: '',\n          email: '',\n          dateOfBirth: '',\n          address: ''\n        })\n        setShowPatientModal(false)\n      } else {\n        throw new Error('Registration failed')\n      }\n    } catch (error) {\n      toast({\n        title: 'Registration Error',\n        description: 'Failed to add patient. Please check the information and try again.',\n        variant: 'destructive'\n      })\n    }\n  }\n\n  const handleAppointmentSubmit = async () => {\n    if (!appointmentForm.patientName || !appointmentForm.doctorId || !appointmentForm.date || !appointmentForm.time) {\n      toast({\n        title: 'Validation Error',\n        description: 'Please fill in all required fields (patient name, doctor, date, and time).',\n        variant: 'destructive'\n      })\n      return\n    }\n\n    try {\n      // Combine date and time into proper DateTime format\n      const appointmentDateTime = new Date(`${appointmentForm.date}T${appointmentForm.time}:00`)\n      \n      const appointmentData = {\n        patientName: appointmentForm.patientName.trim(),\n        doctorId: appointmentForm.doctorId,\n        appointmentDate: appointmentDateTime.toISOString(),\n        type: appointmentForm.type || 'clinic',\n        symptoms: appointmentForm.symptoms || 'Scheduled by admin',\n        status: 'scheduled'\n      }\n\n      console.log('🔥 Frontend submitting appointment:', appointmentData)\n      await apiRequest('POST', '/api/appointments/admin', appointmentData)\n      \n      // Reset form and close modal\n      setAppointmentForm({\n        patientName: '',\n        doctorId: '',\n        date: '',\n        time: '',\n        type: 'clinic',\n        symptoms: ''\n      })\n      setShowAppointmentModal(false)\n      \n      // Refresh both appointments and patients data\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments/admin'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] })\n      \n      toast({\n        title: 'Appointment Scheduled',\n        description: 'New appointment has been successfully scheduled and patient added to records.',\n      })\n    } catch (error) {\n      console.error('🔥 Frontend appointment error:', error)\n      toast({\n        title: 'Booking Error',\n        description: 'Failed to schedule appointment. Please try again.',\n        variant: 'destructive'\n      })\n    }\n  }\n\n  const handleStaffSubmit = async () => {\n    if (!staffForm.firstName || !staffForm.lastName || !staffForm.phoneNumber || !staffForm.role) {\n      toast({\n        title: 'Validation Error',\n        description: 'Please fill in all required fields (name, phone number, and role).',\n        variant: 'destructive'\n      })\n      return\n    }\n\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n        },\n        body: JSON.stringify({\n          firstName: staffForm.firstName,\n          lastName: staffForm.lastName,\n          phoneNumber: staffForm.phoneNumber,\n          email: staffForm.email || undefined,\n          role: staffForm.role,\n          password: 'temp123', // Default password\n          isApproved: true, // Auto-approve staff created by admin\n          clinicId: currentUser?.clinicId || '84e1b3c6-3b25-4446-96e8-a227d9e92d76' // Link staff to the same clinic as admin\n        })\n      })\n      \n      if (response.ok) {\n        // Refresh staff data with multiple cache-busting strategies\n        queryClient.invalidateQueries({ queryKey: ['/api/users'] })\n        queryClient.removeQueries({ queryKey: ['users', 'staff'] })\n        setForceRender(prev => prev + 1)\n        if (refetchUsers) {\n          await refetchUsers() // Force immediate refetch\n        }\n        \n        toast({\n          title: 'Staff Member Added Successfully',\n          description: `${staffForm.firstName} ${staffForm.lastName} has been added to the staff.`,\n        })\n        \n        setStaffForm({\n          firstName: '',\n          lastName: '',\n          phoneNumber: '',\n          email: '',\n          role: 'staff'\n        })\n        \n        setIsAddStaffOpen(false) // Close dialog\n      } else {\n        const errorData = await response.json()\n        throw new Error(errorData.message || 'Registration failed')\n      }\n    } catch (error) {\n      console.error('Staff registration error:', error)\n      toast({\n        title: 'Registration Error',\n        description: error instanceof Error ? error.message : 'Failed to add staff member. Please check the information and try again.',\n        variant: 'destructive'\n      })\n    }\n  }\n\n  const handlePrescriptionSubmit = async () => {\n    if (!prescriptionForm.patientId || !prescriptionForm.medicineName || !prescriptionForm.dosage || !prescriptionForm.frequency) {\n      toast({\n        title: 'Validation Error',\n        description: 'Please fill in all required fields (patient, medicine name, dosage, and frequency).',\n        variant: 'destructive'\n      })\n      return\n    }\n\n    try {\n      const prescriptionData = {\n        patientId: prescriptionForm.patientId,\n        medicines: [{\n          name: prescriptionForm.medicineName,\n          dosage: prescriptionForm.dosage,\n          frequency: prescriptionForm.frequency,\n          duration: prescriptionForm.duration || '7 days',\n          instructions: prescriptionForm.instructions || 'Take as directed'\n        }],\n        notes: `Prescription created by admin for ${prescriptionForm.medicineName}`\n      }\n\n      await apiRequest('POST', '/api/prescriptions', prescriptionData)\n      \n      // Reset form\n      setPrescriptionForm({\n        patientId: '',\n        medicineName: '',\n        dosage: '',\n        frequency: '',\n        duration: '',\n        instructions: ''\n      })\n\n      // Refresh relevant data\n      queryClient.invalidateQueries({ queryKey: ['/api/prescriptions'] })\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments/admin'] })\n\n      toast({\n        title: 'Prescription Created',\n        description: `Prescription for ${prescriptionData.medicines[0].name} has been created successfully.`,\n      })\n    } catch (error) {\n      toast({\n        title: 'Error',\n        description: 'Failed to create prescription. Please try again.',\n        variant: 'destructive'\n      })\n    }\n  }\n\n\n\n  // Patient record handlers\n  const handleViewHistory = (patient: User) => {\n    setSelectedPatient(patient)\n    setShowHistoryModal(true)\n  }\n\n  const handleEditProfile = (patient: User) => {\n    setSelectedPatient(patient)\n    setEditPatientForm({\n      firstName: patient.firstName || '',\n      lastName: patient.lastName || '',\n      phoneNumber: patient.phoneNumber || '',\n      email: patient.email || '',\n      address: patient.address || '',\n      dateOfBirth: (patient as any).dateOfBirth ? new Date((patient as any).dateOfBirth).toISOString().split('T')[0] : ''\n    })\n    setShowEditModal(true)\n  }\n\n  const handleUpdatePatient = async () => {\n    if (!selectedPatient) return\n    \n    try {\n      const response = await fetch(`/api/users/${selectedPatient.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n        },\n        body: JSON.stringify({\n          firstName: editPatientForm.firstName,\n          lastName: editPatientForm.lastName,\n          phoneNumber: editPatientForm.phoneNumber,\n          email: editPatientForm.email || null,\n          address: editPatientForm.address || null,\n          dateOfBirth: editPatientForm.dateOfBirth ? new Date(editPatientForm.dateOfBirth).toISOString() : null\n        })\n      })\n\n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(error.message || 'Update failed')\n      }\n      \n      // Force immediate cache invalidation and refetch\n      await queryClient.invalidateQueries({ queryKey: ['/api/patients'] })\n      await queryClient.invalidateQueries({ queryKey: ['/api/users'] })\n      await queryClient.invalidateQueries({ queryKey: [`/api/users/${selectedPatient.id}`] })\n      \n      // Force refetch of patients data immediately\n      await queryClient.refetchQueries({ queryKey: ['/api/patients'] })\n      await refetchPatients() // Direct refetch call\n      \n      setShowEditModal(false)\n      \n      // Force component re-render\n      setForceRender(prev => prev + 1)\n      \n      toast({\n        title: 'Patient Profile Updated',\n        description: `${editPatientForm.firstName} ${editPatientForm.lastName}'s profile has been successfully updated.`,\n      })\n    } catch (error: any) {\n      console.error('Patient update error:', error)\n      toast({\n        title: 'Update Failed',\n        description: error.message || 'Failed to update patient profile. Please try again.',\n        variant: 'destructive'\n      })\n    }\n  }\n  \n  // Admin profile update handler\n  const handleUpdateAdminProfile = async () => {\n    if (!currentUser) return\n    \n    try {\n      console.log('🔥 ADMIN PROFILE UPDATE - Starting update with data:', {\n        firstName: adminProfileForm.firstName,\n        lastName: adminProfileForm.lastName,\n        email: adminProfileForm.email\n      })\n      \n      const response = await fetch('/api/users/me', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n        },\n        body: JSON.stringify({\n          firstName: adminProfileForm.firstName,\n          lastName: adminProfileForm.lastName,\n          email: adminProfileForm.email || null\n        })\n      })\n\n      console.log('🔥 ADMIN PROFILE UPDATE - Response status:', response.status)\n\n      if (!response.ok) {\n        const error = await response.json()\n        console.error('🔥 ADMIN PROFILE UPDATE - Error response:', error)\n        throw new Error(error.message || 'Update failed')\n      }\n      \n      const updatedUser = await response.json()\n      console.log('🔥 ADMIN PROFILE UPDATE - Updated user:', updatedUser)\n      \n      // Force cache invalidation to refresh user data\n      await queryClient.invalidateQueries({ queryKey: ['/api/users/me'] })\n      await queryClient.refetchQueries({ queryKey: ['/api/users/me'] })\n      \n      // Close the dialog\n      setIsEditProfileOpen(false)\n      \n      toast({\n        title: 'Profile Updated',\n        description: 'Your admin profile has been successfully updated.',\n      })\n    } catch (error: any) {\n      console.error('🔥 ADMIN PROFILE UPDATE - Error:', error)\n      toast({\n        title: 'Update Failed',\n        description: error.message || 'Failed to update profile. Please try again.',\n        variant: 'destructive'\n      })\n    }\n  }\n\n  // Patient history download handler\n  const handleDownloadPatientHistory = async (patient: User) => {\n    if (!patient) return\n\n    try {\n      toast({\n        title: \"Generating Patient History\",\n        description: \"Preparing comprehensive medical history document...\",\n      })\n\n      // Generate PDF using jsPDF\n      const { jsPDF } = await import('jspdf')\n      const pdf = new jsPDF()\n\n      // Header\n      pdf.setFontSize(20)\n      pdf.setTextColor(41, 128, 185)\n      pdf.text('SmartClinic - Patient Medical History', 20, 25)\n      \n      pdf.setFontSize(12)\n      pdf.setTextColor(0, 0, 0)\n      pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 35)\n      \n      // Patient Information\n      pdf.setFontSize(16)\n      pdf.setTextColor(41, 128, 185)\n      pdf.text('Patient Information', 20, 50)\n      \n      pdf.setFontSize(11)\n      pdf.setTextColor(0, 0, 0)\n      let yPos = 60\n      \n      pdf.text(`Name: ${patient.firstName} ${patient.lastName}`, 20, yPos)\n      yPos += 8\n      pdf.text(`Phone: ${patient.phoneNumber}`, 20, yPos)\n      yPos += 8\n      if (patient.email) {\n        pdf.text(`Email: ${patient.email}`, 20, yPos)\n        yPos += 8\n      }\n      if ((patient as any).dateOfBirth) {\n        pdf.text(`Date of Birth: ${new Date((patient as any).dateOfBirth).toLocaleDateString()}`, 20, yPos)\n        yPos += 8\n      }\n      if ((patient as any).address) {\n        pdf.text(`Address: ${(patient as any).address}`, 20, yPos)\n        yPos += 8\n      }\n      \n      yPos += 15\n\n      // Medical Summary\n      pdf.setFontSize(16)\n      pdf.setTextColor(41, 128, 185)\n      pdf.text('Medical Summary', 20, yPos)\n      yPos += 10\n      \n      pdf.setFontSize(10)\n      pdf.setTextColor(0, 0, 0)\n      \n      // Sample medical history data (replace with actual data when API endpoints are available)\n      const medicalSummary = [\n        'Recent Consultation: Routine checkup completed (Jan 15, 2024)',\n        'Follow-up: Blood pressure monitoring (Dec 28, 2023)',\n        'Current Medications: Lisinopril 10mg (daily), Metformin 500mg (twice daily)',\n        'Medical Notes: Patient managing diabetes well with current regimen.',\n        'Next Appointment: Follow-up recommended in 3 months',\n        'Emergency Contact: Available in patient records',\n        'Insurance Status: Active coverage verified'\n      ]\n      \n      medicalSummary.forEach((item, index) => {\n        if (yPos > 260) {\n          pdf.addPage()\n          yPos = 20\n        }\n        pdf.text(`• ${item}`, 25, yPos)\n        yPos += 8\n      })\n\n      yPos += 10\n\n      // Important Notes Section\n      pdf.setFontSize(16)\n      pdf.setTextColor(220, 53, 69)  // Red for important notes\n      pdf.text('Important Medical Notes', 20, yPos)\n      yPos += 10\n      \n      pdf.setFontSize(10)\n      pdf.setTextColor(0, 0, 0)\n      pdf.text('• All prescription medications should be taken as directed', 25, yPos)\n      yPos += 8\n      pdf.text('• Schedule regular follow-up appointments for chronic conditions', 25, yPos)\n      yPos += 8\n      pdf.text('• Contact clinic immediately for any emergency situations', 25, yPos)\n      yPos += 8\n      pdf.text('• Keep this medical history document updated and accessible', 25, yPos)\n      \n      // Footer\n      const pageCount = (pdf as any).internal.getNumberOfPages()\n      for (let i = 1; i <= pageCount; i++) {\n        pdf.setPage(i)\n        pdf.setFontSize(8)\n        pdf.setTextColor(128, 128, 128)\n        pdf.text(`SmartClinic Healthcare System - Page ${i} of ${pageCount}`, 20, 285)\n        pdf.text(`Confidential Medical Document - ${new Date().toLocaleString()}`, 120, 285)\n      }\n\n      // Save the PDF\n      const fileName = `${patient.firstName}_${patient.lastName}_Medical_History_${new Date().toISOString().split('T')[0]}.pdf`\n      pdf.save(fileName)\n\n      toast({\n        title: \"Download Complete\",\n        description: `Patient history downloaded as ${fileName}`,\n      })\n\n    } catch (error: any) {\n      console.error('History download error:', error)\n      toast({\n        title: \"Download Failed\",\n        description: \"Unable to generate patient history. Please try again.\",\n        variant: \"destructive\"\n      })\n    }\n  }\n\n  // Verify authentication on load\n  useEffect(() => {\n    const token = localStorage.getItem('auth_token')\n    console.log('Verifying admin authentication...')\n    if (!token) {\n      console.log('No auth token found, redirecting to login')\n      window.location.href = '/login'\n      return\n    }\n    // Token validation will be handled by the API calls\n    console.log('Auth token exists, proceeding with dashboard load')\n  }, [])\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date())\n    }, 1000)\n    return () => clearInterval(timer)\n  }, [])\n\n  // Check if user is admin\n  const { data: currentUser } = useQuery<User>({\n    queryKey: ['/api/users/me'],\n    retry: (failureCount, error) => {\n      // If auth fails, redirect to login\n      if (error && typeof error === 'object' && 'status' in error && error.status === 401) {\n        localStorage.removeItem('auth_token')\n        window.location.href = '/login'\n        return false\n      }\n      return failureCount < 2\n    }\n  })\n  \n  // Initialize admin profile form when current user data is available\n  useEffect(() => {\n    if (currentUser) {\n      setAdminProfileForm({\n        firstName: currentUser.firstName || '',\n        lastName: currentUser.lastName || '',\n        email: currentUser.email || '',\n        phoneNumber: currentUser.phoneNumber || ''\n      })\n    }\n  }, [currentUser])\n\n\n\n  // Update alert timestamps every minute\n  useEffect(() => {\n    const timestampInterval = setInterval(() => {\n      setEmergencyAlerts(prev => prev.map(alert => {\n        const alertTime = new Date(parseInt(alert.id.split('-')[1]))\n        const now = new Date()\n        const diffMinutes = Math.floor((now.getTime() - alertTime.getTime()) / (1000 * 60))\n        \n        let timeAgo = 'Just now'\n        if (diffMinutes >= 60) {\n          const hours = Math.floor(diffMinutes / 60)\n          timeAgo = `${hours} hour${hours > 1 ? 's' : ''} ago`\n        } else if (diffMinutes > 0) {\n          timeAgo = `${diffMinutes} min ago`\n        }\n        \n        return { ...alert, timeAgo }\n      }))\n    }, 60000) // Update every minute\n\n    return () => clearInterval(timestampInterval)\n  }, [])\n\n  // Redirect if not admin\n  useEffect(() => {\n    if (currentUser && currentUser.role !== 'admin') {\n      window.location.href = '/dashboard'\n    }\n  }, [currentUser])\n\n  // Dashboard stats\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: ['/api/admin/dashboard-stats'],\n    refetchInterval: 30000\n  })\n\n  // Live queue data via WebSocket\n  const { queueTokens: liveQueueTokens, isConnected: queueConnected } = useQueueSocket(undefined, true);\n  \n  // Add debug logging\n  useEffect(() => {\n    console.log('🔥 ADMIN QUEUE DEBUG:', {\n      liveQueueTokens: liveQueueTokens?.length || 'null/undefined',\n      queueConnected,\n      hasData: !!liveQueueTokens\n    });\n  }, [liveQueueTokens, queueConnected]);\n  \n  // Fallback to API polling - always enabled but slower when WebSocket connected\n  const { data: fallbackQueueTokens, isLoading: queueLoading } = useQuery<QueueToken[]>({\n    queryKey: ['/api/queue/admin'],\n    refetchInterval: queueConnected ? 30000 : 5000, // Slower when WebSocket connected\n    enabled: true // Always enabled for reliable data\n  });\n  \n  // Use live data if available, otherwise fallback to API data\n  const queueTokens = (liveQueueTokens && liveQueueTokens.length > 0) ? liveQueueTokens : fallbackQueueTokens;\n\n  // Appointments data - polling every 3 seconds for real-time patient bookings\n  const { data: appointments, isLoading: appointmentsLoading, error: appointmentsError, refetch: refetchAppointments } = useQuery<Appointment[]>({\n    queryKey: ['/api/appointments/admin', forceRender],\n    queryFn: () => fetch('/api/appointments/admin', {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n      return res.json();\n    }),\n    refetchInterval: 3000, // Poll every 3 seconds for real-time patient bookings\n    refetchOnWindowFocus: true,\n    staleTime: 0, // Always consider data stale for real-time sync\n    gcTime: 0, // Don't cache data to ensure fresh reads\n    retry: 3\n  })\n\n  // Force initial appointment data fetch on mount\n  React.useEffect(() => {\n    console.log('🔥 APPOINTMENTS COMPONENT MOUNTED - Force fetching appointments');\n    console.log('🔥 APPOINTMENTS INITIAL STATE:', { appointments, appointmentsLoading, appointmentsError });\n    refetchAppointments();\n  }, []);\n\n  // Debug appointments data changes\n  React.useEffect(() => {\n    console.log('🔥 APPOINTMENTS DATA CHANGED:', { \n      appointments, \n      length: appointments?.length, \n      loading: appointmentsLoading, \n      error: appointmentsError,\n      currentTab: activeTab \n    });\n  }, [appointments, appointmentsLoading, appointmentsError, activeTab]);\n\n  // Patients data with force render dependency and proper auth\n  const { data: patients, isLoading: patientsLoading, refetch: refetchPatients, error: patientsError } = useQuery<User[]>({\n    queryKey: ['/api/patients', forceRender],\n    queryFn: () => fetch('/api/patients', {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n      return res.json();\n    }),\n    refetchInterval: 60000,\n    staleTime: 0, // Always consider data stale to force fresh fetch\n    gcTime: 0, // Don't cache data to ensure fresh reads\n    retry: 3\n  })\n  \n  // Debug patient query\n  React.useEffect(() => {\n    console.log('🔥 PATIENTS QUERY - Data:', Array.isArray(patients) ? patients.length : 0, 'Loading:', patientsLoading, 'Error:', patientsError);\n    if (patientsError) {\n      console.log('🔥 PATIENTS QUERY ERROR DETAILS:', patientsError);\n    }\n    if (patients) {\n      console.log('🔥 PATIENTS DATA:', patients);\n    }\n  }, [patients, patientsLoading, patientsError]);\n\n  // Force initial patient data fetch on mount\n  React.useEffect(() => {\n    console.log('🔥 COMPONENT MOUNTED - Force rendering patients');\n    refetchPatients();\n  }, []);\n\n  // All Users data (for staff management)  \n  const { data: users, isLoading: usersLoading, error: usersError, refetch: refetchUsers } = useQuery<User[]>({\n    queryKey: ['users', 'staff', forceRender],\n    queryFn: () => fetch('/api/users', {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n      return res.json();\n    }),\n    staleTime: 0,\n    gcTime: 0,\n    refetchOnWindowFocus: true,\n    retry: false,\n    refetchOnMount: true\n  })\n\n  // Fetch today's staff presence data\n  const { data: staffPresence = [], isLoading: presenceLoading, refetch: refetchPresence } = useQuery<StaffPresence[]>({\n    queryKey: ['/api/staff-presence/today', forceRender],\n    queryFn: () => fetch('/api/staff-presence/today', {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);\n      return res.json();\n    }),\n    staleTime: 0,\n    gcTime: 0,\n    refetchOnWindowFocus: true,\n    refetchInterval: 30000\n  })\n\n  // Filter staff members (non-patients)\n  const staffMembers = users?.filter(user => user.role !== 'patient') || []\n\n  // Calculate real staff metrics\n  const doctorCount = staffMembers.filter(staff => staff.role === 'doctor').length\n  const nurseCount = staffMembers.filter(staff => staff.role === 'nurse').length  \n  const staffCount = staffMembers.filter(staff => staff.role === 'staff' || staff.role === 'admin').length\n  const totalStaff = staffMembers.length\n  \n  // Calculate present staff from presence data\n  const presentFromRecords = staffPresence.filter(presence => presence.isPresent).length\n  \n  // Check if current admin user has a presence record\n  const currentUserPresenceRecord = staffPresence.find(presence => presence.staffId === currentUser?.id)\n  const isCurrentUserInPresenceRecords = !!currentUserPresenceRecord\n  \n  // Only count staff who have actually checked in via GPS verification\n  // Being logged in ≠ being physically present at the clinic\n  const shouldCountCurrentUserAsPresent = false\n  \n  const presentStaff = presentFromRecords\n  const onDutyStaff = presentStaff\n\n  // Medicines/Inventory data\n  const { data: medicines = [], isLoading: medicinesLoading, refetch: refetchMedicines } = useQuery<Medicine[]>({\n    queryKey: ['/api/medicines'],\n    staleTime: 0,\n    gcTime: 0,\n    refetchOnWindowFocus: true\n  })\n\n  // Feedback data\n  const { data: feedback = [], isLoading: feedbackLoading } = useQuery({\n    queryKey: ['/api/feedback'],\n    enabled: !!currentUser,\n    staleTime: 0,\n    gcTime: 0,\n    refetchOnWindowFocus: true\n  })\n\n  // Debug: Log medicines data\n  console.log('Medicines data:', medicines, 'Loading:', medicinesLoading, 'Force render:', forceRender)\n  console.log('First medicine stock:', medicines[0]?.stock)\n  \n  // Debug: Log appointments data\n  React.useEffect(() => {\n    console.log('🔥 APPOINTMENTS QUERY - Data:', Array.isArray(appointments) ? appointments.length : 0, 'Loading:', appointmentsLoading, 'Error:', appointmentsError);\n    if (appointmentsError) {\n      console.log('🔥 APPOINTMENTS QUERY ERROR DETAILS:', appointmentsError);\n    }\n    if (appointments) {\n      console.log('🔥 APPOINTMENTS DATA:', appointments);\n    }\n  }, [appointments, appointmentsLoading, appointmentsError]);\n\n  // Debug: Log staff presence data\n  console.log('🔥 FRONTEND - Staff presence data:', staffPresence)\n  console.log('🔥 FRONTEND - Staff presence loading:', presenceLoading)\n  console.log('🔥 FRONTEND - Present count calculation:', presentStaff)\n  console.log('🔥 FRONTEND - Present from records:', presentFromRecords)\n  console.log('🔥 FRONTEND - Current user in records:', isCurrentUserInPresenceRecords)\n  console.log('🔥 FRONTEND - Should count current user:', shouldCountCurrentUserAsPresent)\n\n  // Function to remove emergency alert\n  const removeAlert = (alertId: string) => {\n    setEmergencyAlerts(prev => prev.filter(alert => alert.id !== alertId))\n    toast({\n      title: 'Alert Resolved',\n      description: 'Emergency alert has been successfully resolved and removed.',\n    })\n  }\n\n  // Function to add emergency alert\n  const addEmergencyAlert = (title: string, message: string, type: EmergencyAlert['type'], priority: EmergencyAlert['priority'] = 'medium', duration?: number) => {\n    const alertId = `alert-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n    const newAlert: EmergencyAlert = {\n      id: alertId,\n      title,\n      message,\n      type,\n      priority,\n      timestamp: new Date().toISOString(),\n      timeAgo: 'Just now',\n      color: priority === 'high' ? 'red' : priority === 'medium' ? 'yellow' : 'blue'\n    }\n    \n    setEmergencyAlerts(prev => [newAlert, ...prev].slice(0, 5)) // Limit to 5 alerts\n    \n    // Auto-remove low priority alerts after specified duration (default 5 minutes)\n    if (priority === 'low' && duration) {\n      setTimeout(() => {\n        setEmergencyAlerts(prev => prev.filter(alert => alert.id !== alertId))\n      }, duration)\n    }\n  }\n\n  // Emergency Alert Monitoring System\n  const checkEmergencyConditions = useCallback(() => {\n    if (!stats || !appointments || !patients || !users) return\n\n    const now = new Date()\n    const currentHour = now.getHours()\n    \n    // Only check during business hours (8 AM - 6 PM)\n    if (currentHour < 8 || currentHour > 18) return\n\n    // 1. Check for delayed appointments (more than 30 minutes late)\n    const todayAppointments = appointments.filter((apt: any) => {\n      const aptDate = new Date(apt.appointmentDate)\n      return aptDate.toDateString() === now.toDateString() && apt.status === 'scheduled'\n    })\n\n    todayAppointments.forEach((apt: any) => {\n      const appointmentTime = new Date(apt.appointmentDate)\n      const delayMinutes = (now.getTime() - appointmentTime.getTime()) / (1000 * 60)\n      \n      if (delayMinutes > 30 && !emergencyAlerts.some(alert => alert.id.includes(apt.id))) {\n        const doctorName = apt.doctor ? `${apt.doctor.firstName} ${apt.doctor.lastName}` : 'Unknown Doctor'\n        const patientName = apt.patient ? `${apt.patient.firstName} ${apt.patient.lastName}` : 'Unknown Patient'\n        \n        addEmergencyAlert(\n          'Appointment Delay',\n          `${patientName} with ${doctorName} is ${Math.round(delayMinutes)} minutes overdue`,\n          'appointment_delay',\n          'high'\n        )\n      }\n    })\n\n    // 2. Check for missing staff (no check-in today)\n    const doctorsAndStaff = users.filter((user: any) => \n      user.role === 'doctor' || user.role === 'staff'\n    )\n    \n    doctorsAndStaff.forEach((staffMember: any) => {\n      const hasCheckedIn = staffPresence?.some((presence: any) => \n        presence.userId === staffMember.id\n      )\n      \n      if (!hasCheckedIn && currentHour > 9 && !emergencyAlerts.some(alert => alert.id.includes(`staff-${staffMember.id}`))) {\n        addEmergencyAlert(\n          'Staff Missing',\n          `${staffMember.firstName} ${staffMember.lastName} has not checked in today`,\n          'staff_missing',\n          'high'\n        )\n      }\n    })\n\n    // 3. Check for high patient load (more than 15 patients today)\n    if (stats.patientsToday > 15 && !emergencyAlerts.some(alert => alert.message.includes('High patient volume'))) {\n      addEmergencyAlert(\n        'High Patient Volume',\n        `${stats.patientsToday} patients scheduled today`,\n        'high_volume',\n        'medium'\n      )\n    }\n\n    // 4. Check for low medicine stock\n    if (medicines && medicines.length > 0) {\n      medicines.forEach((medicine: any) => {\n        if (medicine.stock <= 5 && medicine.stock > 0 && !emergencyAlerts.some(alert => alert.id.includes(`stock-${medicine.id}`))) {\n          addEmergencyAlert(\n            'Low Medicine Stock',\n            `${medicine.name} has only ${medicine.stock} units remaining`,\n            'medicine_low',\n            'medium'\n          )\n        } else if (medicine.stock === 0 && !emergencyAlerts.some(alert => alert.id.includes(`outstock-${medicine.id}`))) {\n          addEmergencyAlert(\n            'Medicine Out of Stock',\n            `${medicine.name} is completely out of stock`,\n            'medicine_low',\n            'high'\n          )\n        }\n      })\n    }\n\n    // 5. Check for queue overload (more than 8 patients waiting)\n    const waitingInQueue = liveQueueTokens?.filter((token: any) => \n      token.status === 'waiting' || token.status === 'called'\n    ).length || 0\n    \n    if (waitingInQueue > 8 && !emergencyAlerts.some(alert => alert.message.includes('Queue overload'))) {\n      addEmergencyAlert(\n        'Queue Overload',\n        `${waitingInQueue} patients currently waiting`,\n        'queue_overload',\n        'high'\n      )\n    }\n\n    setLastAlertCheck(now)\n  }, [stats, appointments, patients, users, staffPresence, medicines, liveQueueTokens, emergencyAlerts])\n\n  // Test function to demonstrate alerts\n  const triggerTestAlerts = () => {\n    // Test critical alert for out of stock medicine\n    if (medicines && medicines.length > 0) {\n      const firstMedicine = medicines[0]\n      if (firstMedicine.stock === 0) {\n        addEmergencyAlert(\n          'Test Medicine Alert',\n          `${firstMedicine.name} is completely out of stock`,\n          'medicine_low',\n          'high'\n        )\n      }\n    }\n\n    // Test warning alert for high queue\n    if (liveQueueTokens && liveQueueTokens.length > 0) {\n      addEmergencyAlert(\n        'Test Queue Alert',\n        `${liveQueueTokens.length} patients currently in queue`,\n        'queue_overload',\n        'medium'\n      )\n    }\n\n    // Test info alert\n    addEmergencyAlert(\n      'System Check',\n      'Emergency alert system is functioning normally',\n      'system_status',\n      'low',\n      300000 // Auto-remove after 5 minutes\n    )\n  }\n\n  // Emergency alert monitoring - check every 2 minutes\n  useEffect(() => {\n    const alertInterval = setInterval(() => {\n      checkEmergencyConditions()\n    }, 120000) // Check every 2 minutes\n\n    // Initial check after 5 seconds\n    const initialTimeout = setTimeout(() => {\n      checkEmergencyConditions()\n    }, 5000)\n\n    return () => {\n      clearInterval(alertInterval)\n      clearTimeout(initialTimeout)\n    }\n  }, [checkEmergencyConditions])\n  \n  // Debug: Log staff data\n  console.log('Staff members:', staffMembers, 'Total users:', users?.length, 'Users loading:', usersLoading)\n  console.log('🔥 DOCTORS DEBUG - All users:', users?.map(u => ({id: u.id, role: u.role, firstName: u.firstName, lastName: u.lastName})))\n  console.log('🔥 DOCTORS DEBUG - Filtered doctors:', users?.filter(user => user.role === 'doctor'))\n  if (usersError) {\n    console.error('Users query error details:', JSON.stringify(usersError, null, 2))\n  }\n  \n  // Get doctors from appointment data as fallback\n  const doctorsFromAppointments = React.useMemo(() => {\n    if (!appointments) return []\n    const doctorMap = new Map()\n    appointments.forEach(apt => {\n      if (apt.doctor && !doctorMap.has(apt.doctor.id)) {\n        doctorMap.set(apt.doctor.id, apt.doctor)\n      }\n    })\n    return Array.from(doctorMap.values())\n  }, [appointments])\n  \n  // Combine doctors from users API and appointments as fallback\n  const availableDoctors = React.useMemo(() => {\n    const doctorsFromUsers = users?.filter(user => user.role === 'doctor') || []\n    const fromAppointments = doctorsFromAppointments || []\n    \n    // Add static doctors if none found\n    const staticDoctors = [\n      {\n        id: 'doc-rajesh-3667458f',\n        firstName: 'Dr. Rajesh',\n        lastName: 'Sharma',\n        role: 'doctor',\n        email: 's37196307@gmail.com',\n        phoneNumber: '+919876543210'\n      },\n      {\n        id: 'doc-priya-2451789b',\n        firstName: 'Dr. Priya',\n        lastName: 'Patel',\n        role: 'doctor',\n        email: 'priya.patel@clinic.com',\n        phoneNumber: '+919876543211'\n      }\n    ]\n    \n    // Merge and dedupe by ID\n    const doctorMap = new Map()\n    doctorsFromUsers.forEach(doc => doctorMap.set(doc.id, doc))\n    fromAppointments.forEach(doc => doctorMap.set(doc.id, doc))\n    staticDoctors.forEach(doc => doctorMap.set(doc.id, doc))\n    \n    const result = Array.from(doctorMap.values())\n    console.log('🔥 AVAILABLE DOCTORS - Combined result:', result)\n    return result\n  }, [users, doctorsFromAppointments])\n  console.log('Auth token exists:', !!localStorage.getItem('auth_token'))\n\n  const formatTime = (date: Date) => {\n    return date.toLocaleTimeString(\"en-US\", {\n      hour: \"numeric\",\n      minute: \"2-digit\",\n      hour12: true,\n    })\n  }\n\n  const handleLogout = () => {\n    localStorage.removeItem('auth_token')\n    window.location.href = '/login'\n  }\n\n  // Mutation for updating queue token status\n  const updateQueueStatus = useMutation({\n    mutationFn: async ({ tokenId, status }: { tokenId: string; status: string }) => {\n      return await apiRequest('PUT', `/api/queue/${tokenId}/status`, { status })\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/queue/admin'] })\n      toast({ title: 'Success', description: 'Queue status updated successfully' })\n    },\n    onError: (error) => {\n      toast({ title: 'Error', description: error.message, variant: 'destructive' })\n    }\n  })\n\n  // Mutation for approving users\n  const approveUser = useMutation({\n    mutationFn: async ({ userId, isApproved }: { userId: string; isApproved: boolean }) => {\n      return await apiRequest('PUT', `/api/users/${userId}/approve`, { isApproved })\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] })\n      toast({ title: 'Success', description: 'User approval status updated' })\n    },\n    onError: (error) => {\n      toast({ title: 'Error', description: error.message, variant: 'destructive' })\n    }\n  })\n\n  // Additional mutations for comprehensive admin functionality\n  const updateUserStatus = useMutation({\n    mutationFn: async ({ userId, action }: { userId: string; action: 'activate' | 'deactivate' }) => {\n      return await apiRequest('PUT', `/api/users/${userId}/${action}`, {})\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] })\n      toast({ title: 'Success', description: 'User status updated successfully' })\n    },\n    onError: (error) => {\n      toast({ title: 'Error', description: error.message, variant: 'destructive' })\n    }\n  })\n\n  // Staff presence toggle mutation\n  const toggleStaffPresenceMutation = useMutation({\n    mutationFn: async ({ userId, isPresent }: { userId: string; isPresent: boolean }) => {\n      return apiRequest('PUT', `/api/staff-presence/update/${userId}`, { \n        isPresent, \n        markedByAdmin: true \n      })\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Staff presence updated',\n        description: 'Staff presence status has been updated successfully.'\n      })\n      queryClient.invalidateQueries({ queryKey: ['/api/staff-presence/today'] })\n      refetchPresence()\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to update staff presence',\n        variant: 'destructive'\n      })\n    }\n  })\n\n  const updateAppointmentStatus = useMutation({\n    mutationFn: async ({ appointmentId, status }: { appointmentId: string; status: string }) => {\n      return await apiRequest('PUT', `/api/appointments/${appointmentId}/status`, { status })\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments/admin'] })\n      toast({ title: 'Success', description: 'Appointment status updated successfully' })\n    },\n    onError: (error) => {\n      toast({ title: 'Error', description: error.message, variant: 'destructive' })\n    }\n  })\n\n  const generateReport = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/reports/daily', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n          'Content-Type': 'application/json'\n        }\n      })\n      \n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(error.message || 'Failed to generate report')\n      }\n      \n      return await response.json()\n    },\n    onSuccess: (data) => {\n      setReportData(data)\n      toast({ title: 'Success', description: 'Daily report generated successfully' })\n    },\n    onError: (error) => {\n      toast({ title: 'Error', description: error.message, variant: 'destructive' })\n    }\n  })\n\n  // Handle queue actions\n  const handleCallNext = (tokenId: string) => {\n    updateQueueStatus.mutate({ tokenId, status: 'in_progress' })\n  }\n\n  const handleApproveUser = (userId: string) => {\n    approveUser.mutate({ userId, isApproved: true })\n  }\n\n  // Additional handler functions for new functionality\n  const handleActivateUser = (userId: string) => {\n    updateUserStatus.mutate({ userId, action: 'activate' })\n  }\n\n  const handleDeactivateUser = (userId: string) => {\n    updateUserStatus.mutate({ userId, action: 'deactivate' })\n  }\n\n  const handleUpdateAppointment = (appointmentId: string, status: string) => {\n    updateAppointmentStatus.mutate({ appointmentId, status })\n  }\n\n  const handleGenerateReport = () => {\n    generateReport.mutate()\n  }\n  \n  // Reschedule appointment handler\n  const handleReschedule = async (appointmentId: string, newDate: string, newTime: string) => {\n    try {\n      alert('🚨 INSIDE handleReschedule function!');\n      console.log('🚨🚨🚨 FRONTEND RESCHEDULE - Starting reschedule for appointment:', appointmentId)\n      console.log('🚨 FRONTEND RESCHEDULE - New date:', newDate, 'New time:', newTime)\n      \n      const newDateTime = new Date(`${newDate}T${newTime}:00`)\n      console.log('🚨 FRONTEND RESCHEDULE - Calculated new datetime:', newDateTime.toISOString())\n      \n      console.log('🚨 FRONTEND RESCHEDULE - Making API call to backend...')\n      alert('🚨 About to make API call to: PUT /api/appointments/' + appointmentId);\n      \n      console.log('🚨 DEBUG - About to call apiRequest with:', {\n        method: 'PUT',\n        url: `/api/appointments/${appointmentId}`,\n        data: { appointmentDate: newDateTime.toISOString() }\n      });\n      \n      // Add timeout to the API request\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n      \n      try {\n        const response = await fetch(`/api/appointments/${appointmentId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n          },\n          body: JSON.stringify({ appointmentDate: newDateTime.toISOString() }),\n          signal: controller.signal\n        });\n        \n        clearTimeout(timeoutId);\n        \n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        \n        console.log('🚨 FRONTEND RESCHEDULE - API call completed successfully!', response)\n        console.log('🚨 FRONTEND RESCHEDULE - Response status:', response.status)\n        console.log('🚨 FRONTEND RESCHEDULE - Response ok:', response.ok)\n        alert('🚨 API call completed! Status: ' + response.status);\n      } catch (fetchError) {\n        clearTimeout(timeoutId);\n        if (fetchError.name === 'AbortError') {\n          console.error('🚨 FETCH TIMEOUT - Request timed out after 10 seconds');\n          alert('🚨 TIMEOUT ERROR: Request timed out after 10 seconds');\n          throw new Error('Request timeout - API call took too long');\n        } else {\n          console.error('🚨 FETCH ERROR:', fetchError);\n          alert('🚨 FETCH ERROR: ' + fetchError.message);\n          throw fetchError;\n        }\n      }\n      \n      // Reset form\n      setRescheduleForm({\n        appointmentId: '',\n        newDate: '',\n        newTime: ''\n      })\n      \n      // Refresh appointments list\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments/admin'] })\n      toast({ title: 'Success', description: 'Appointment rescheduled successfully - Check email!' })\n    } catch (error: any) {\n      console.error('🚨 FRONTEND RESCHEDULE ERROR:', error);\n      alert('🚨 ERROR in handleReschedule: ' + error.message);\n      toast({ title: 'Error', description: error.message, variant: 'destructive' })\n    }\n  }\n\n  // Medicine management mutations\n  const addMedicineMutation = useMutation({\n    mutationFn: async (medicine: any) => {\n      const response = await apiRequest('POST', '/api/medicines', medicine)\n      return response.json()\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/medicines'] })\n      queryClient.refetchQueries({ queryKey: ['/api/medicines'] })\n      setIsAddMedicineOpen(false)\n      setNewMedicine({ name: '', strength: '', dosageForm: '', manufacturer: '', stock: 0, description: '' })\n      toast({ title: 'Success', description: 'Medicine added successfully' })\n    },\n    onError: (error: any) => {\n      toast({ title: 'Error', description: error.message || 'Failed to add medicine' })\n    }\n  })\n\n  const updateMedicineMutation = useMutation({\n    mutationFn: async ({ medicineId, updates }: { medicineId: string, updates: any }) => {\n      const response = await apiRequest('PUT', `/api/medicines/${medicineId}`, updates)\n      return response.json()\n    },\n    onSuccess: (data) => {\n      console.log('Edit success, updated medicine:', data)\n      queryClient.invalidateQueries({ queryKey: ['/api/medicines'] })\n      queryClient.refetchQueries({ queryKey: ['/api/medicines'] })\n      refetchMedicines()\n      setForceRender(prev => prev + 1)\n      setIsEditMedicineOpen(false)\n      setSelectedMedicine(null)\n      toast({ title: 'Success', description: 'Medicine updated successfully' })\n    },\n    onError: (error: any) => {\n      toast({ title: 'Error', description: error.message || 'Failed to update medicine' })\n    }\n  })\n\n  const restockMedicineMutation = useMutation({\n    mutationFn: async ({ medicineId, amount }: { medicineId: string, amount: number }) => {\n      const response = await apiRequest('PUT', `/api/medicines/${medicineId}/restock`, { amount })\n      return response.json()\n    },\n    onSuccess: (data) => {\n      console.log('Restock success, updated medicine:', data)\n      queryClient.invalidateQueries({ queryKey: ['/api/medicines'] })\n      queryClient.refetchQueries({ queryKey: ['/api/medicines'] })\n      refetchMedicines()\n      setForceRender(prev => prev + 1)\n      setIsRestockOpen(false)\n      setRestockAmount(0)\n      setSelectedMedicine(null)\n      toast({ title: 'Success', description: 'Medicine restocked successfully' })\n    },\n    onError: (error: any) => {\n      toast({ title: 'Error', description: error.message || 'Failed to restock medicine' })\n    }\n  })\n\n  const handleAddMedicine = () => {\n    if (!newMedicine.name || !newMedicine.strength || !newMedicine.dosageForm || !newMedicine.manufacturer) {\n      toast({ title: 'Error', description: 'Please fill in all required fields' })\n      return\n    }\n    addMedicineMutation.mutate(newMedicine)\n  }\n\n  const handleEditMedicine = (medicine: any) => {\n    setSelectedMedicine(medicine)\n    setNewMedicine({\n      name: medicine.name,\n      strength: medicine.strength,\n      dosageForm: medicine.dosageForm,\n      manufacturer: medicine.manufacturer,\n      stock: medicine.stock || 0,\n      description: medicine.description || ''\n    })\n    setIsEditMedicineOpen(true)\n  }\n\n  const handleUpdateMedicine = () => {\n    if (!selectedMedicine || !newMedicine.name || !newMedicine.strength || !newMedicine.dosageForm || !newMedicine.manufacturer) {\n      toast({ title: 'Error', description: 'Please fill in all required fields' })\n      return\n    }\n    updateMedicineMutation.mutate({ medicineId: selectedMedicine.id, updates: newMedicine })\n  }\n\n  const handleRestockMedicine = (medicine: any) => {\n    setSelectedMedicine(medicine)\n    setRestockAmount(0)\n    setIsRestockOpen(true)\n  }\n\n  const handleRestock = () => {\n    if (!selectedMedicine || restockAmount <= 0) {\n      toast({ title: 'Error', description: 'Please enter a valid restock amount' })\n      return\n    }\n    restockMedicineMutation.mutate({ medicineId: selectedMedicine.id, amount: restockAmount })\n  }\n\n  const generatePDFReport = (reportData: any) => {\n    const pdf = new jsPDF()\n    const pageWidth = pdf.internal.pageSize.width\n    const pageHeight = pdf.internal.pageSize.height\n    const margin = 20\n    let yPosition = margin\n\n    // Colors\n    const primaryColor = [41, 128, 185] // Blue\n    const accentColor = [52, 152, 219] // Light Blue\n    const successColor = [39, 174, 96] // Green\n    const warningColor = [230, 126, 34] // Orange\n\n    // Helper function to add section with background\n    const addSectionHeader = (title: string, color: number[]) => {\n      pdf.setFillColor(color[0], color[1], color[2])\n      pdf.rect(margin, yPosition - 5, pageWidth - 2 * margin, 15, 'F')\n      pdf.setTextColor(255, 255, 255)\n      pdf.setFontSize(14)\n      pdf.setFont(\"helvetica\", \"bold\")\n      pdf.text(title, margin + 5, yPosition + 5)\n      pdf.setTextColor(0, 0, 0)\n      yPosition += 20\n    }\n\n    // Helper function to add data rows with alternating background\n    const addDataRows = (data: string[][], isFinancial = false) => {\n      data.forEach(([label, value], index) => {\n        if (index % 2 === 0) {\n          pdf.setFillColor(248, 249, 250)\n          pdf.rect(margin, yPosition - 3, pageWidth - 2 * margin, 12, 'F')\n        }\n        \n        pdf.setFontSize(11)\n        pdf.setFont(\"helvetica\", \"normal\")\n        pdf.setTextColor(51, 51, 51)\n        pdf.text(label, margin + 5, yPosition + 3)\n        \n        // Style values differently for financial data\n        if (isFinancial && value.includes('$')) {\n          pdf.setTextColor(39, 174, 96) // Green for money\n          pdf.setFont(\"helvetica\", \"bold\")\n        } else {\n          pdf.setTextColor(0, 0, 0)\n          pdf.setFont(\"helvetica\", \"bold\")\n        }\n        \n        pdf.text(value, margin + 120, yPosition + 3)\n        pdf.setTextColor(0, 0, 0)\n        yPosition += 12\n      })\n      yPosition += 10\n    }\n\n    // Header with logo area\n    pdf.setFillColor(41, 128, 185)\n    pdf.rect(0, 0, pageWidth, 60, 'F')\n    \n    pdf.setTextColor(255, 255, 255)\n    pdf.setFontSize(24)\n    pdf.setFont(\"helvetica\", \"bold\")\n    pdf.text(\"SmartClinic Medical Center\", pageWidth / 2, 25, { align: \"center\" })\n    \n    pdf.setFontSize(16)\n    pdf.setFont(\"helvetica\", \"normal\")\n    pdf.text(\"Daily Healthcare Analytics Report\", pageWidth / 2, 40, { align: \"center\" })\n    \n    yPosition = 80\n    pdf.setTextColor(0, 0, 0)\n\n    // Report metadata in a box\n    pdf.setDrawColor(41, 128, 185)\n    pdf.setLineWidth(1)\n    pdf.rect(margin, yPosition, pageWidth - 2 * margin, 25)\n    \n    pdf.setFontSize(11)\n    pdf.setFont(\"helvetica\", \"normal\")\n    pdf.text(`Report Date: ${reportData.date}`, margin + 5, yPosition + 8)\n    pdf.text(`Generated: ${new Date(reportData.generatedAt).toLocaleString()}`, margin + 5, yPosition + 16)\n    pdf.text(`Generated By: ${reportData.generatedBy}`, margin + 5, yPosition + 24)\n    yPosition += 35\n\n    // Executive Summary\n    addSectionHeader(\"📊 Executive Summary\", primaryColor)\n    const summaryData = [\n      [\"Total Patients Today:\", reportData.summary?.totalPatients?.toString() || \"0\"],\n      [\"Total Appointments:\", reportData.summary?.totalAppointments?.toString() || \"0\"],\n      [\"Completed Appointments:\", reportData.summary?.completedAppointments?.toString() || \"0\"],\n      [\"Cancelled Appointments:\", reportData.summary?.cancelledAppointments?.toString() || \"0\"],\n      [\"Revenue Generated:\", `$${reportData.summary?.revenue || 0}`],\n      [\"Active Staff:\", reportData.summary?.activeStaff?.toString() || \"0\"],\n      [\"Queue Processed:\", reportData.summary?.queueProcessed?.toString() || \"0\"]\n    ]\n    addDataRows(summaryData)\n\n    // Check if we need a new page\n    if (yPosition > pageHeight - 100) {\n      pdf.addPage()\n      yPosition = margin\n    }\n\n    // Financial Summary (Enhanced)\n    addSectionHeader(\"💰 Financial Summary\", successColor)\n    const financialData = [\n      [\"Gross Revenue:\", `$${reportData.financial?.grossRevenue || 0}`],\n      [\"Consultation Fees:\", `$${reportData.financial?.consultationFees || 0}`],\n      [\"Average Revenue per Patient:\", `$${reportData.financial?.averageRevenuePerPatient || 0}`],\n      [\"Total Revenue Today:\", `$${reportData.summary?.revenue || 0}`],\n      [\"Revenue per Appointment:\", reportData.summary?.totalAppointments > 0 ? `$${Math.round((reportData.summary?.revenue || 0) / reportData.summary.totalAppointments)}` : \"$0\"]\n    ]\n    addDataRows(financialData, true)\n\n    // Appointment Analytics\n    addSectionHeader(\"📅 Appointment Analytics\", accentColor)\n    const appointmentData = [\n      [\"Total Appointments:\", reportData.appointments?.total?.toString() || \"0\"],\n      [\"Completed:\", reportData.appointments?.completed?.toString() || \"0\"],\n      [\"Cancelled:\", reportData.appointments?.cancelled?.toString() || \"0\"],\n      [\"Pending:\", reportData.appointments?.pending?.toString() || \"0\"],\n      [\"Completion Rate:\", `${reportData.appointments?.completionRate || 0}%`],\n      [\"Success Rate:\", reportData.appointments?.total > 0 ? `${Math.round(((reportData.appointments?.completed || 0) / reportData.appointments.total) * 100)}%` : \"0%\"]\n    ]\n    addDataRows(appointmentData)\n\n    // Patient Information\n    addSectionHeader(\"👥 Patient Information\", warningColor)\n    const patientData = [\n      [\"New Registrations Today:\", reportData.patients?.newRegistrations?.toString() || \"0\"],\n      [\"Total Active Patients:\", reportData.patients?.totalActive?.toString() || \"0\"],\n      [\"Total Registered Patients:\", reportData.patients?.totalRegistered?.toString() || \"0\"],\n      [\"Patient Growth Rate:\", reportData.patients?.totalRegistered > 0 ? `${Math.round(((reportData.patients?.newRegistrations || 0) / reportData.patients.totalRegistered) * 100)}%` : \"0%\"]\n    ]\n    addDataRows(patientData)\n\n    // Queue Management\n    addSectionHeader(\"⏱️ Queue Management\", [155, 89, 182])\n    const queueData = [\n      [\"Processed Today:\", reportData.queue?.processed?.toString() || \"0\"],\n      [\"Currently Waiting:\", reportData.queue?.waiting?.toString() || \"0\"],\n      [\"Missed Appointments:\", reportData.queue?.missed?.toString() || \"0\"],\n      [\"Average Wait Time:\", `${reportData.queue?.averageWaitTime || 0} minutes`],\n      [\"Queue Efficiency:\", reportData.queue?.processed > 0 ? `${Math.round(((reportData.queue?.processed || 0) / (reportData.queue?.processed + reportData.queue?.missed || 1)) * 100)}%` : \"0%\"]\n    ]\n    addDataRows(queueData)\n\n    // Staff Performance\n    addSectionHeader(\"👨‍⚕️ Staff Performance\", [231, 76, 60])\n    const staffData = [\n      [\"Active Staff:\", reportData.staff?.active?.toString() || \"0\"],\n      [\"Staff On Duty:\", reportData.staff?.onDuty?.toString() || \"0\"],\n      [\"Productivity Score:\", reportData.staff?.productivity?.toString() || \"0\"],\n      [\"Patients per Staff:\", reportData.staff?.active > 0 ? `${Math.round((reportData.summary?.totalPatients || 0) / reportData.staff.active)}` : \"0\"],\n      [\"Appointments per Staff:\", reportData.staff?.active > 0 ? `${Math.round((reportData.summary?.totalAppointments || 0) / reportData.staff.active)}` : \"0\"]\n    ]\n    addDataRows(staffData)\n\n    // Footer with enhanced styling\n    const footerY = pageHeight - 15\n    pdf.setFillColor(41, 128, 185)\n    pdf.rect(0, footerY - 5, pageWidth, 20, 'F')\n    pdf.setTextColor(255, 255, 255)\n    pdf.setFontSize(10)\n    pdf.setFont(\"helvetica\", \"normal\")\n    pdf.text(\"SmartClinic Medical Center - Confidential Healthcare Report\", pageWidth / 2, footerY + 2, { align: \"center\" })\n    pdf.text(`Page 1 | Report ID: SC-${reportData.date}-${Date.now()}`, pageWidth / 2, footerY + 8, { align: \"center\" })\n\n    // Save the PDF\n    const fileName = `SmartClinic_Daily_Report_${reportData.date}.pdf`\n    pdf.save(fileName)\n    \n    toast({ \n      title: 'Success', \n      description: `Professional report downloaded as ${fileName}` \n    })\n  }\n\n  if (currentUser && currentUser.role !== 'admin') {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <AlertTriangle className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">Access Denied</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">You need admin privileges to access this page.</p>\n          <Button onClick={() => window.location.href = '/dashboard'} className=\"mt-4\">\n            Return to Dashboard\n          </Button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 mobile-page mobile-container\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 mobile-content sm:px-4 lg:px-6 mobile-py-3 sm:py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2 sm:gap-4\">\n            <div className=\"flex items-center gap-2 sm:gap-3\">\n              <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-blue-600 dark:bg-blue-500 rounded-lg flex items-center justify-center mobile-touch-target\">\n                <Stethoscope className=\"mobile-icon sm:w-5 sm:h-5 text-white\" />\n              </div>\n              <div>\n                <h1 className=\"mobile-subheading sm:text-xl font-semibold text-gray-900 dark:text-white\">SmartClinic Medical Center</h1>\n                <p className=\"mobile-caption sm:text-sm text-gray-500 dark:text-gray-400 hidden sm:block\">Healthcare Management System</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2 sm:gap-6\">\n            <div className=\"hidden md:flex items-center gap-4 text-sm text-gray-600\">\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"w-4 h-4\" />\n                <span>{formatTime(currentTime)}</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Users className=\"w-4 h-4\" />\n                <span>{statsLoading ? '...' : (stats?.patientsToday || 0)} Patients Today</span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center gap-4\">\n              {/* Notifications Dropdown */}\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    data-testid=\"button-notifications\"\n                  >\n                    <Bell className=\"w-5 h-5\" />\n                    {unreadFeedback.length > 0 && (\n                      <Badge className=\"bg-red-500 text-white text-xs ml-1\">\n                        {unreadFeedback.length}\n                      </Badge>\n                    )}\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Notifications</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    {unreadFeedback.length === 0 ? (\n                      <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                        <Bell className=\"w-12 h-12 mx-auto mb-4 text-gray-300 dark:text-gray-600\" />\n                        <p>No new notifications</p>\n                      </div>\n                    ) : (\n                      <>\n                        {unreadFeedback.map((feedback: any) => (\n                          <div key={feedback.id} className=\"p-3 bg-blue-50 dark:bg-blue-950 rounded-lg border-l-4 border-blue-500 dark:border-blue-400\">\n                            <div className=\"flex justify-between items-start\">\n                              <div className=\"flex-1\">\n                                <div className=\"font-medium text-sm text-gray-900 dark:text-gray-100\">Patient Feedback</div>\n                                <div className=\"text-xs text-gray-600 dark:text-gray-300 mt-1\">{feedback.message}</div>\n                                <div className=\"text-xs text-gray-400 dark:text-gray-400 mt-2\">\n                                  Rating: {feedback.rating}/5 stars\n                                </div>\n                                <div className=\"text-xs text-gray-400 dark:text-gray-500\">\n                                  {new Date(feedback.createdAt).toLocaleDateString()} {new Date(feedback.createdAt).toLocaleTimeString()}\n                                </div>\n                              </div>\n                              <Button \n                                size=\"sm\" \n                                variant=\"ghost\"\n                                onClick={() => handleMarkAsRead(feedback.id)}\n                                disabled={markAsReadMutation.isPending}\n                                data-testid={`button-mark-read-${feedback.id}`}\n                                className=\"text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100\"\n                              >\n                                Mark as Read\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                        <Button \n                          className=\"w-full\" \n                          variant=\"outline\"\n                          onClick={async () => {\n                            for (const feedback of unreadFeedback) {\n                              await markAsReadMutation.mutateAsync(feedback.id)\n                            }\n                          }}\n                          disabled={markAsReadMutation.isPending}\n                          data-testid=\"button-mark-all-read\"\n                        >\n                          {markAsReadMutation.isPending ? 'Marking...' : 'Mark All as Read'}\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                </DialogContent>\n              </Dialog>\n\n              {/* Profile Dropdown */}\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    data-testid=\"button-profile\"\n                  >\n                    <User className=\"w-5 h-5\" />\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Admin Profile</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center gap-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                      <div className=\"w-16 h-16 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\n                        <User className=\"w-8 h-8 text-blue-600 dark:text-blue-400\" />\n                      </div>\n                      <div>\n                        <h3 className=\"font-semibold text-gray-900 dark:text-gray-100\">{currentUser?.firstName} {currentUser?.lastName}</h3>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">System Administrator</p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\">{currentUser?.email || 'admin@smartclinic.com'}</p>\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Dialog open={isEditProfileOpen} onOpenChange={(open) => {\n                        setIsEditProfileOpen(open)\n                        if (open && currentUser) {\n                          // Reset form when dialog opens\n                          setAdminProfileForm({\n                            firstName: currentUser.firstName || '',\n                            lastName: currentUser.lastName || '',\n                            email: currentUser.email || '',\n                            phoneNumber: currentUser.phoneNumber || ''\n                          })\n                        }\n                      }}>\n                        <DialogTrigger asChild>\n                          <Button variant=\"outline\" className=\"w-full justify-start\">\n                            <User className=\"w-4 h-4 mr-2\" />\n                            Edit Profile\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-md\">\n                          <DialogHeader>\n                            <DialogTitle>Edit Admin Profile</DialogTitle>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"edit-firstName\">First Name</Label>\n                              <Input \n                                id=\"edit-firstName\" \n                                value={adminProfileForm.firstName}\n                                onChange={(e) => setAdminProfileForm({...adminProfileForm, firstName: e.target.value})}\n                                placeholder=\"First Name\"\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"edit-lastName\">Last Name</Label>\n                              <Input \n                                id=\"edit-lastName\" \n                                value={adminProfileForm.lastName}\n                                onChange={(e) => setAdminProfileForm({...adminProfileForm, lastName: e.target.value})}\n                                placeholder=\"Last Name\"\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"edit-email\">Email</Label>\n                              <Input \n                                id=\"edit-email\" \n                                type=\"email\"\n                                value={adminProfileForm.email}\n                                onChange={(e) => setAdminProfileForm({...adminProfileForm, email: e.target.value})}\n                                placeholder=\"Email Address\"\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"edit-phone\">Phone Number</Label>\n                              <Input \n                                id=\"edit-phone\" \n                                value={currentUser?.phoneNumber || ''}\n                                placeholder=\"Phone Number\"\n                                disabled\n                                className=\"bg-gray-100 dark:bg-gray-800\"\n                              />\n                              <p className=\"text-xs text-gray-500\">Phone number cannot be changed</p>\n                            </div>\n                            <div className=\"flex gap-2\">\n                              <Button \n                                className=\"action-btn-primary flex-1\" \n                                onClick={handleUpdateAdminProfile}\n                                data-testid=\"button-save-profile\"\n                              >\n                                Save Changes\n                              </Button>\n                              <Button \n                                variant=\"outline\" \n                                className=\"action-btn-secondary flex-1\"\n                                onClick={() => setIsEditProfileOpen(false)}\n                              >\n                                Cancel\n                              </Button>\n                            </div>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                      \n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button variant=\"outline\" className=\"w-full justify-start\">\n                            <Settings className=\"w-4 h-4 mr-2\" />\n                            Account Settings\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-md\">\n                          <DialogHeader>\n                            <DialogTitle>Account Settings</DialogTitle>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            <div className=\"space-y-3\">\n                              <h4 className=\"font-medium\">Security</h4>\n                              <div className=\"space-y-2\">\n                                <Button variant=\"outline\" className=\"w-full justify-start\">\n                                  <Shield className=\"w-4 h-4 mr-2\" />\n                                  Change Password\n                                </Button>\n                                <Button variant=\"outline\" className=\"w-full justify-start\">\n                                  <Activity className=\"w-4 h-4 mr-2\" />\n                                  Two-Factor Authentication\n                                </Button>\n                              </div>\n                            </div>\n                            <div className=\"space-y-3\">\n                              <h4 className=\"font-medium\">Sessions</h4>\n                              <div className=\"space-y-2\">\n                                <Button variant=\"outline\" className=\"w-full justify-start\">\n                                  <LogOut className=\"w-4 h-4 mr-2\" />\n                                  Sign Out All Devices\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                      \n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button variant=\"outline\" className=\"w-full justify-start\">\n                            <Bell className=\"w-4 h-4 mr-2\" />\n                            Notification Preferences\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-md\">\n                          <DialogHeader>\n                            <DialogTitle>Notification Settings</DialogTitle>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            <div className=\"flex items-center justify-between\">\n                              <span>Email Notifications</span>\n                              <input type=\"checkbox\" defaultChecked className=\"rounded\" />\n                            </div>\n                            <div className=\"flex items-center justify-between\">\n                              <span>SMS Alerts</span>\n                              <input type=\"checkbox\" defaultChecked className=\"rounded\" />\n                            </div>\n                            <div className=\"flex items-center justify-between\">\n                              <span>Emergency Alerts</span>\n                              <input type=\"checkbox\" defaultChecked className=\"rounded\" />\n                            </div>\n                            <div className=\"flex items-center justify-between\">\n                              <span>System Updates</span>\n                              <input type=\"checkbox\" className=\"rounded\" />\n                            </div>\n                            <Button className=\"w-full\">Save Preferences</Button>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n\n              {/* Dark Mode Toggle */}\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={toggleTheme}\n                data-testid=\"button-dark-mode-toggle\"\n                className=\"hover:bg-gray-100 dark:hover:bg-gray-800\"\n              >\n                {theme === 'light' ? (\n                  <Moon className=\"w-5 h-5\" />\n                ) : (\n                  <Sun className=\"w-5 h-5\" />\n                )}\n              </Button>\n\n              {/* Settings Dropdown */}\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    data-testid=\"button-settings\"\n                  >\n                    <Settings className=\"w-5 h-5\" />\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>System Settings</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium\">General Settings</h4>\n                      <div className=\"space-y-2\">\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button variant=\"outline\" className=\"w-full justify-start\">\n                              <Users className=\"w-4 h-4 mr-2\" />\n                              User Management\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-2xl\">\n                            <DialogHeader>\n                              <DialogTitle>User Management</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4\">\n                                <div className=\"text-center p-3 sm:p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                                  <div className=\"text-xl sm:text-2xl font-bold text-blue-600 dark:text-blue-400\">{Array.isArray(patients) ? patients.length : 0}</div>\n                                  <div className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-400\">Active Patients</div>\n                                </div>\n                                <div className=\"text-center p-3 sm:p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                                  <div className=\"text-xl sm:text-2xl font-bold text-green-600 dark:text-green-400\">3</div>\n                                  <div className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-400\">Doctors</div>\n                                </div>\n                                <div className=\"text-center p-3 sm:p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                                  <div className=\"text-xl sm:text-2xl font-bold text-purple-600 dark:text-purple-400\">8</div>\n                                  <div className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-400\">Staff Members</div>\n                                </div>\n                              </div>\n                              <div className=\"space-y-2\">\n                                <Button className=\"w-full\">Add New User</Button>\n                                <Button variant=\"outline\" className=\"w-full\">Manage Permissions</Button>\n                                <Button variant=\"outline\" className=\"w-full\">View User Activity</Button>\n                              </div>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n                        \n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button variant=\"outline\" className=\"w-full justify-start\">\n                              <Calendar className=\"w-4 h-4 mr-2\" />\n                              Appointment Settings\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-md\">\n                            <DialogHeader>\n                              <DialogTitle>Appointment Configuration</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div className=\"space-y-2\">\n                                <Label>Default Appointment Duration</Label>\n                                <Select defaultValue=\"30\">\n                                  <SelectTrigger>\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"15\">15 minutes</SelectItem>\n                                    <SelectItem value=\"30\">30 minutes</SelectItem>\n                                    <SelectItem value=\"45\">45 minutes</SelectItem>\n                                    <SelectItem value=\"60\">1 hour</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                              <div className=\"space-y-2\">\n                                <Label>Booking Window (days ahead)</Label>\n                                <Input type=\"number\" defaultValue=\"30\" />\n                              </div>\n                              <div className=\"flex items-center justify-between\">\n                                <span>Allow Same-Day Booking</span>\n                                <input type=\"checkbox\" defaultChecked className=\"rounded\" />\n                              </div>\n                              <Button className=\"w-full\">Save Settings</Button>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n                        \n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button variant=\"outline\" className=\"w-full justify-start\">\n                              <FileText className=\"w-4 h-4 mr-2\" />\n                              System Reports\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-lg\">\n                            <DialogHeader>\n                              <DialogTitle>Generate Reports</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div className=\"space-y-2\">\n                                <Button variant=\"outline\" className=\"w-full justify-start\">\n                                  <Users className=\"w-4 h-4 mr-2\" />\n                                  Patient Activity Report\n                                </Button>\n                                <Button variant=\"outline\" className=\"w-full justify-start\">\n                                  <Calendar className=\"w-4 h-4 mr-2\" />\n                                  Appointment Analytics\n                                </Button>\n                                <Button variant=\"outline\" className=\"w-full justify-start\">\n                                  <DollarSign className=\"w-4 h-4 mr-2\" />\n                                  Revenue Summary\n                                </Button>\n                                <Button variant=\"outline\" className=\"w-full justify-start\">\n                                  <Activity className=\"w-4 h-4 mr-2\" />\n                                  System Performance\n                                </Button>\n                              </div>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n                      </div>\n                    </div>\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium\">Security</h4>\n                      <div className=\"space-y-2\">\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button variant=\"outline\" className=\"w-full justify-start\">\n                              <Shield className=\"w-4 h-4 mr-2\" />\n                              Security Settings\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-lg\">\n                            <DialogHeader>\n                              <DialogTitle>Security Settings</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div className=\"space-y-3\">\n                                <div className=\"flex items-center justify-between\">\n                                  <span>Two-Factor Authentication</span>\n                                  <input type=\"checkbox\" defaultChecked className=\"rounded\" />\n                                </div>\n                                <div className=\"flex items-center justify-between\">\n                                  <span>Password Complexity Requirements</span>\n                                  <input type=\"checkbox\" defaultChecked className=\"rounded\" />\n                                </div>\n                                <div className=\"flex items-center justify-between\">\n                                  <span>Session Timeout (minutes)</span>\n                                  <Input type=\"number\" defaultValue=\"30\" className=\"w-20\" />\n                                </div>\n                                <div className=\"flex items-center justify-between\">\n                                  <span>Login Attempt Limit</span>\n                                  <Input type=\"number\" defaultValue=\"3\" className=\"w-20\" />\n                                </div>\n                                <div className=\"flex items-center justify-between\">\n                                  <span>Auto-lock System</span>\n                                  <input type=\"checkbox\" defaultChecked className=\"rounded\" />\n                                </div>\n                              </div>\n                              <Button className=\"w-full\">Update Security Settings</Button>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n                        \n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button variant=\"outline\" className=\"w-full justify-start\">\n                              <Activity className=\"w-4 h-4 mr-2\" />\n                              Audit Logs\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-4xl\">\n                            <DialogHeader>\n                              <DialogTitle>System Audit Logs</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div className=\"flex gap-4 items-center\">\n                                <Select defaultValue=\"all\">\n                                  <SelectTrigger className=\"w-40\">\n                                    <SelectValue />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"all\">All Activities</SelectItem>\n                                    <SelectItem value=\"login\">Login Attempts</SelectItem>\n                                    <SelectItem value=\"patient\">Patient Changes</SelectItem>\n                                    <SelectItem value=\"staff\">Staff Actions</SelectItem>\n                                    <SelectItem value=\"system\">System Changes</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <Input type=\"date\" className=\"w-40\" />\n                                <Button>Filter</Button>\n                              </div>\n                              <div className=\"max-h-96 overflow-y-auto border rounded-lg\">\n                                <div className=\"space-y-2 p-4\">\n                                  {[\n                                    { time: '2025-08-06 12:04:30', user: 'Admin User', action: 'Viewed patient records', type: 'patient' },\n                                    { time: '2025-08-06 12:03:15', user: 'Dr. Sarah Johnson', action: 'Updated appointment status', type: 'appointment' },\n                                    { time: '2025-08-06 12:01:45', user: 'Admin User', action: 'Added new medicine to inventory', type: 'inventory' },\n                                    { time: '2025-08-06 11:58:20', user: 'Admin User', action: 'Login successful', type: 'login' },\n                                    { time: '2025-08-06 11:45:10', user: 'Dr. Michael Davis', action: 'Created new patient record', type: 'patient' }\n                                  ].map((log, index) => (\n                                    <div key={index} className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                                      <div>\n                                        <div className=\"font-medium\">{log.action}</div>\n                                        <div className=\"text-sm text-gray-600\">by {log.user}</div>\n                                      </div>\n                                      <div className=\"text-right\">\n                                        <div className=\"text-sm\">{log.time}</div>\n                                        <Badge className=\"text-xs\">{log.type}</Badge>\n                                      </div>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                              <div className=\"flex gap-2\">\n                                <Button variant=\"outline\">Export Logs</Button>\n                                <Button variant=\"outline\">Clear Old Logs</Button>\n                              </div>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n                      </div>\n                    </div>\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium\">System</h4>\n                      <div className=\"space-y-2\">\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button variant=\"outline\" className=\"w-full justify-start\">\n                              <Database className=\"w-4 h-4 mr-2\" />\n                              Database Management\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-lg\">\n                            <DialogHeader>\n                              <DialogTitle>Database Management</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                                  <div className=\"text-2xl font-bold text-blue-600\">2.4 GB</div>\n                                  <div className=\"text-sm text-gray-600\">Database Size</div>\n                                </div>\n                                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                                  <div className=\"text-2xl font-bold text-green-600\">99.8%</div>\n                                  <div className=\"text-sm text-gray-600\">Uptime</div>\n                                </div>\n                              </div>\n                              <div className=\"space-y-2\">\n                                <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                                  <span>Patients Table</span>\n                                  <span className=\"font-medium\">{Array.isArray(patients) ? patients.length : 0} records</span>\n                                </div>\n                                <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                                  <span>Appointments Table</span>\n                                  <span className=\"font-medium\">12 records</span>\n                                </div>\n                                <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                                  <span>Staff Table</span>\n                                  <span className=\"font-medium\">5 records</span>\n                                </div>\n                                <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                                  <span>Medicines Table</span>\n                                  <span className=\"font-medium\">{medicines?.length || 0} records</span>\n                                </div>\n                              </div>\n                              <div className=\"space-y-2\">\n                                <Button variant=\"outline\" className=\"w-full\">Optimize Database</Button>\n                                <Button variant=\"outline\" className=\"w-full\">Check Integrity</Button>\n                                <Button variant=\"destructive\" className=\"w-full\">Clear Cache</Button>\n                              </div>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n                        \n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button variant=\"outline\" className=\"w-full justify-start\">\n                              <Download className=\"w-4 h-4 mr-2\" />\n                              Backup & Restore\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-lg\">\n                            <DialogHeader>\n                              <DialogTitle>Backup & Restore</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div className=\"space-y-3\">\n                                <h4 className=\"font-medium\">Automatic Backups</h4>\n                                <div className=\"flex items-center justify-between\">\n                                  <span>Daily Backups</span>\n                                  <input type=\"checkbox\" defaultChecked className=\"rounded\" />\n                                </div>\n                                <div className=\"flex items-center justify-between\">\n                                  <span>Weekly Full Backup</span>\n                                  <input type=\"checkbox\" defaultChecked className=\"rounded\" />\n                                </div>\n                                <div className=\"flex items-center justify-between\">\n                                  <span>Retention (days)</span>\n                                  <Input type=\"number\" defaultValue=\"30\" className=\"w-20\" />\n                                </div>\n                              </div>\n                              \n                              <div className=\"space-y-3\">\n                                <h4 className=\"font-medium\">Recent Backups</h4>\n                                <div className=\"space-y-2\">\n                                  {[\n                                    { date: '2025-08-06 06:00', type: 'Daily', size: '2.4 GB' },\n                                    { date: '2025-08-05 06:00', type: 'Daily', size: '2.3 GB' },\n                                    { date: '2025-08-04 00:00', type: 'Weekly', size: '2.2 GB' }\n                                  ].map((backup, index) => (\n                                    <div key={index} className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                                      <div>\n                                        <div className=\"font-medium\">{backup.type} Backup</div>\n                                        <div className=\"text-sm text-gray-600\">{backup.date}</div>\n                                      </div>\n                                      <div className=\"text-right\">\n                                        <div className=\"text-sm\">{backup.size}</div>\n                                        <Button size=\"sm\" variant=\"outline\">Restore</Button>\n                                      </div>\n                                    </div>\n                                  ))}\n                                </div>\n                              </div>\n                              \n                              <div className=\"space-y-2\">\n                                <Button className=\"w-full\">Create Backup Now</Button>\n                                <Button variant=\"outline\" className=\"w-full\">Download Backup</Button>\n                              </div>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n                      </div>\n                    </div>\n                  </div>\n                </DialogContent>\n              </Dialog>\n\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={handleLogout}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Navigation Tabs */}\n      <div className=\"nav-tabs mobile-nav-tabs\">\n        <div className=\"mobile-content sm:px-4 lg:px-6\">\n          <Tabs defaultValue=\"dashboard\" className=\"w-full\">\n            <TabsList className=\"mobile-tabs-list grid w-full grid-cols-4 sm:grid-cols-8 bg-transparent border-0 h-auto p-0 overflow-x-auto mobile-scrollbar-hide\">\n              <TabsTrigger\n                value=\"dashboard\"\n                className=\"nav-tab data-[state=active]:active rounded-none text-xs sm:text-sm px-2 sm:px-4\"\n              >\n                <span className=\"hidden sm:inline\">Dashboard</span>\n                <span className=\"sm:hidden\">Home</span>\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"queue\"\n                className=\"nav-tab data-[state=active]:active rounded-none text-xs sm:text-sm px-2 sm:px-4\"\n              >\n                <span className=\"hidden sm:inline\">Patient Queue</span>\n                <span className=\"sm:hidden\">Queue</span>\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"appointments\"\n                className=\"nav-tab data-[state=active]:active rounded-none text-xs sm:text-sm px-2 sm:px-4\"\n              >\n                <span className=\"hidden sm:inline\">Appointments</span>\n                <span className=\"sm:hidden\">Appts</span>\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"records\"\n                className=\"nav-tab data-[state=active]:active rounded-none text-xs sm:text-sm px-2 sm:px-4\"\n              >\n                <span className=\"hidden sm:inline\">Patient Records</span>\n                <span className=\"sm:hidden\">Records</span>\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"inventory\"\n                className=\"nav-tab data-[state=active]:active rounded-none text-xs sm:text-sm hidden sm:flex\"\n              >\n                Inventory\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"staff\"\n                className=\"nav-tab data-[state=active]:active rounded-none text-xs sm:text-sm hidden sm:flex\"\n              >\n                Staff\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"feedback\"\n                className=\"nav-tab data-[state=active]:active rounded-none text-xs sm:text-sm hidden sm:flex\"\n              >\n                Feedback\n              </TabsTrigger>\n              <TabsTrigger\n                value=\"reports\"\n                className=\"nav-tab data-[state=active]:active rounded-none text-xs sm:text-sm hidden sm:flex\"\n              >\n                Reports\n              </TabsTrigger>\n\n\n            </TabsList>\n\n            <TabsContent value=\"dashboard\" className=\"mt-0\">\n              <main className=\"mobile-content sm:p-4 lg:p-6 mobile-safe-area\">\n                {/* Key Metrics */}\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-6 sm:mb-8\">\n                  {/* Patients Today */}\n                  <Card className=\"dashboard-card stats-card\">\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"mobile-card-title sm:text-sm font-medium text-gray-600 dark:text-gray-400 flex items-center gap-2\">\n                        <Users className=\"w-5 h-5 sm:w-4 sm:h-4 text-blue-500 dark:text-blue-400\" />\n                        Patients Today\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <span className=\"stat-number text-2xl sm:text-3xl\">{statsLoading ? '...' : (stats?.patientsToday || 0)}</span>\n                        <Badge className={`text-xs flex items-center gap-1 ${\n                          stats?.completedAppointments && stats?.patientsToday \n                            ? (stats.completedAppointments / stats.patientsToday > 0.7 ? 'stat-change-positive' : 'bg-blue-100 text-blue-800')\n                            : 'bg-gray-100 text-gray-800'\n                        }`}>\n                          <TrendingUp className=\"w-3 h-3\" />\n                          {stats?.completedAppointments && stats?.patientsToday \n                            ? `${Math.round((stats.completedAppointments / stats.patientsToday) * 100)}%`\n                            : 'N/A'\n                          }\n                        </Badge>\n                      </div>\n                      <p className=\"mobile-body-text text-gray-600 dark:text-gray-400\">\n                        {stats?.completedAppointments || 0} completed, {(stats?.patientsToday || 0) - (stats?.completedAppointments || 0)} pending\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Queue Length */}\n                  <Card className=\"dashboard-card alert-card\">\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"mobile-card-title sm:text-sm font-medium text-gray-600 dark:text-gray-400 flex items-center gap-2\">\n                        <Clock className=\"w-5 h-5 sm:w-4 sm:h-4 text-orange-500 dark:text-orange-400\" />\n                        Queue Length\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <span className=\"stat-number text-2xl sm:text-3xl text-orange-600\">{queueTokens ? queueTokens.length : 0}</span>\n                        {queueTokens && queueTokens.length > 5 && (\n                          <Badge className=\"bg-red-500 text-white text-xs\">Urgent</Badge>\n                        )}\n                        {queueTokens && queueTokens.length <= 5 && queueTokens.length > 2 && (\n                          <Badge className=\"bg-orange-500 text-white text-xs\">Moderate</Badge>\n                        )}\n                        {queueTokens && queueTokens.length <= 2 && (\n                          <Badge className=\"bg-green-500 text-white text-xs\">Light</Badge>\n                        )}\n                      </div>\n                      <p className=\"mobile-body-text text-gray-600 dark:text-gray-400\">Current waiting patients</p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Medicine Inventory */}\n                  <Card className=\"dashboard-card info-card\">\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-sm font-medium text-gray-600 dark:text-gray-400 flex items-center gap-2\">\n                        <Pill className=\"w-4 h-4 text-green-500 dark:text-green-400\" />\n                        Medicine Inventory\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <span className=\"stat-number text-green-600\">{\n                          medicines ? medicines.reduce((total: number, med: any) => total + med.stock, 0) : '...'\n                        }</span>\n                        <Badge className={`text-xs flex items-center gap-1 ${\n                          medicines && medicines.filter((med: any) => med.stock <= 5).length > 0 \n                            ? 'bg-red-100 text-red-800' \n                            : 'bg-green-100 text-green-800'\n                        }`}>\n                          <AlertTriangle className=\"w-3 h-3\" />\n                          {medicines ? medicines.filter((med: any) => med.stock <= 5).length : 0} Low Stock\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {medicines ? medicines.length : 0} types available\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Staff Present */}\n                  <Card className=\"dashboard-card stats-card\">\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-sm font-medium text-gray-600 dark:text-gray-400 flex items-center gap-2\">\n                        <Activity className=\"w-4 h-4 text-purple-500 dark:text-purple-400\" />\n                        Staff Present\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <span className=\"stat-number text-purple-600\">\n                          {presentStaff}/{totalStaff}\n                        </span>\n                        <Badge className={`text-xs ${\n                          totalStaff > 0 && presentStaff > totalStaff * 0.7 \n                            ? 'bg-green-100 text-green-800' \n                            : 'bg-orange-100 text-orange-800'\n                        }`}>\n                          {totalStaff > 0 ? \n                            `${Math.round((presentStaff / totalStaff) * 100)}%` \n                            : '0%'\n                          }\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        {staffPresence.filter(p => p.isPresent && p.staff.role === 'doctor').length} doctors, {' '}\n                        {staffPresence.filter(p => p.isPresent && ['staff', 'nurse'].includes(p.staff.role)).length} staff, {' '}\n                        {staffPresence.filter(p => p.isPresent && p.staff.role === 'admin').length} admin\n                      </p>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6 lg:gap-8\">\n                  {/* Emergency Alerts - Real emergency requests */}\n                  <UnifiedEmergencyAlerts onTestAlerts={triggerTestAlerts} />\n                  \n\n\n                  {/* Quick Actions */}\n                  <Card>\n                    <CardHeader className=\"pb-3 sm:pb-4\">\n                      <CardTitle className=\"flex items-center gap-2 text-base sm:text-lg\">\n                        <BarChart3 className=\"w-4 h-4 sm:w-5 sm:h-5 text-blue-500 dark:text-blue-400\" />\n                        Quick Actions\n                      </CardTitle>\n                      <p className=\"text-xs sm:text-sm text-gray-600 dark:text-gray-400\">Common administrative tasks</p>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4\">\n                        {/* Doctor Running Late Dialog */}\n                        <Dialog open={isDelayModalOpen} onOpenChange={setIsDelayModalOpen}>\n                          <DialogTrigger asChild>\n                            <Button \n                              className=\"mobile-btn action-btn-primary h-16 sm:h-20 flex-col gap-1 sm:gap-2 bg-orange-600 hover:bg-orange-700 text-base sm:text-sm\"\n                              data-testid=\"button-doctor-delay\"\n                            >\n                              <Clock className=\"w-5 h-5 sm:w-6 sm:h-6\" />\n                              <span className=\"text-center\">Doctor Running Late</span>\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-md\">\n                            <DialogHeader>\n                              <DialogTitle>Doctor Running Late Notification</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div>\n                                <Label htmlFor=\"doctorSelect\">Select Doctor</Label>\n                                <Select value={delayForm.doctorId} onValueChange={(value) => setDelayForm({...delayForm, doctorId: value})}>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select a doctor...\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    {staffMembers.filter(staff => staff.role === 'doctor').map((doctor) => (\n                                      <SelectItem key={doctor.id} value={doctor.id}>\n                                        Dr. {doctor.firstName} {doctor.lastName}\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                              <div>\n                                <Label htmlFor=\"delayMinutes\">Delay Duration (minutes)</Label>\n                                <Input\n                                  id=\"delayMinutes\"\n                                  type=\"number\"\n                                  min=\"1\"\n                                  max=\"120\"\n                                  value={delayForm.delayMinutes}\n                                  onChange={(e) => setDelayForm({...delayForm, delayMinutes: e.target.value})}\n                                  placeholder=\"15\"\n                                />\n                              </div>\n                              <div>\n                                <Label htmlFor=\"delayReason\">Reason (Optional)</Label>\n                                <Textarea\n                                  id=\"delayReason\"\n                                  value={delayForm.reason}\n                                  onChange={(e) => setDelayForm({...delayForm, reason: e.target.value})}\n                                  placeholder=\"Emergency case, traffic, etc...\"\n                                  rows={3}\n                                />\n                              </div>\n                              <div className=\"flex gap-2\">\n                                <Button \n                                  onClick={handleDelaySubmit} \n                                  className=\"flex-1\"\n                                  disabled={delayNotificationMutation.isPending}\n                                  data-testid=\"button-send-delay\"\n                                >\n                                  {delayNotificationMutation.isPending ? 'Sending...' : 'Send SMS Notifications'}\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  onClick={() => setIsDelayModalOpen(false)}\n                                  className=\"flex-1\"\n                                >\n                                  Cancel\n                                </Button>\n                              </div>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n\n                        {/* Add Patient Dialog */}\n                        <Dialog open={showPatientModal} onOpenChange={setShowPatientModal}>\n                          <DialogTrigger asChild>\n                            <Button \n                              className=\"h-16 sm:h-20 flex-col gap-1 sm:gap-2 bg-blue-600 hover:bg-blue-700 text-xs sm:text-sm\"\n                              data-testid=\"button-quick-add-patient\"\n                            >\n                              <UserPlus className=\"w-4 h-4 sm:w-6 sm:h-6\" />\n                              <span className=\"text-center\">Add Patient</span>\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-md\">\n                            <DialogHeader>\n                              <DialogTitle>Add New Patient</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div>\n                                  <Label htmlFor=\"firstName\">First Name</Label>\n                                  <Input\n                                    id=\"firstName\"\n                                    value={patientForm.firstName}\n                                    onChange={(e) => setPatientForm({...patientForm, firstName: e.target.value})}\n                                    placeholder=\"John\"\n                                  />\n                                </div>\n                                <div>\n                                  <Label htmlFor=\"lastName\">Last Name</Label>\n                                  <Input\n                                    id=\"lastName\"\n                                    value={patientForm.lastName}\n                                    onChange={(e) => setPatientForm({...patientForm, lastName: e.target.value})}\n                                    placeholder=\"Doe\"\n                                  />\n                                </div>\n                              </div>\n                              <div>\n                                <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n                                <Input\n                                  id=\"phoneNumber\"\n                                  value={patientForm.phoneNumber}\n                                  onChange={(e) => setPatientForm({...patientForm, phoneNumber: e.target.value})}\n                                  placeholder=\"+1234567890\"\n                                />\n                              </div>\n                              <div>\n                                <Label htmlFor=\"email\">Email</Label>\n                                <Input\n                                  id=\"email\"\n                                  type=\"email\"\n                                  value={patientForm.email}\n                                  onChange={(e) => setPatientForm({...patientForm, email: e.target.value})}\n                                  placeholder=\"john@example.com\"\n                                />\n                              </div>\n                              <div>\n                                <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n                                <Input\n                                  id=\"dateOfBirth\"\n                                  type=\"date\"\n                                  value={patientForm.dateOfBirth}\n                                  onChange={(e) => setPatientForm({...patientForm, dateOfBirth: e.target.value})}\n                                />\n                              </div>\n                              <div>\n                                <Label htmlFor=\"address\">Address</Label>\n                                <Textarea\n                                  id=\"address\"\n                                  value={patientForm.address}\n                                  onChange={(e) => setPatientForm({...patientForm, address: e.target.value})}\n                                  placeholder=\"123 Main St, City, State\"\n                                />\n                              </div>\n                              <div className=\"flex gap-2\">\n                                <Button onClick={handlePatientSubmit} className=\"flex-1\">\n                                  <Plus className=\"w-4 h-4 mr-2\" />\n                                  Add Patient\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  onClick={() => setShowPatientModal(false)}\n                                  className=\"flex-1\"\n                                >\n                                  Cancel\n                                </Button>\n                              </div>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n\n                        {/* Schedule Appointment Dialog */}\n                        <Dialog open={showAppointmentModal} onOpenChange={setShowAppointmentModal}>\n                          <DialogTrigger asChild>\n                            <Button \n                              variant=\"outline\" \n                              className=\"h-16 sm:h-20 flex-col gap-1 sm:gap-2 bg-transparent text-xs sm:text-sm\"\n                              data-testid=\"button-quick-schedule\"\n                            >\n                              <Calendar className=\"w-4 h-4 sm:w-6 sm:h-6\" />\n                              <span className=\"text-center\">Schedule</span>\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-md\">\n                            <DialogHeader>\n                              <DialogTitle>Schedule Appointment</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div>\n                                <Label htmlFor=\"patientName\">Patient Name *</Label>\n                                <Input\n                                  id=\"patientName\"\n                                  value={appointmentForm.patientName || ''}\n                                  onChange={(e) => setAppointmentForm({...appointmentForm, patientName: e.target.value})}\n                                  placeholder=\"Enter patient full name\"\n                                />\n                              </div>\n                              <div>\n                                <Label htmlFor=\"doctorSelect\">Select Doctor *</Label>\n                                <Select onValueChange={(value) => setAppointmentForm({...appointmentForm, doctorId: value})}>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Choose a doctor\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    {/* Get unique doctors from both appointments and users */}\n                                    {(() => {\n                                      const allDoctors = [];\n                                      \n                                      // Add doctors from appointments\n                                      appointments?.forEach(apt => {\n                                        if (apt.doctor) {\n                                          allDoctors.push(apt.doctor);\n                                        }\n                                      });\n                                      \n                                      // Add doctors from users\n                                      users?.filter(user => user.role === 'doctor').forEach(doctor => {\n                                        allDoctors.push(doctor);\n                                      });\n                                      \n                                      // Remove duplicates by ID\n                                      const uniqueDoctors = allDoctors.filter((doctor, index, self) => \n                                        doctor && self.findIndex(d => d?.id === doctor.id) === index\n                                      );\n                                      \n                                      return uniqueDoctors.map((doctor) => (\n                                        <SelectItem key={doctor.id} value={doctor.id}>\n                                          {doctor.firstName && doctor.lastName \n                                            ? `${doctor.firstName} ${doctor.lastName}` \n                                            : doctor.email}\n                                        </SelectItem>\n                                      ));\n                                    })()}\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div>\n                                  <Label htmlFor=\"appointmentDate\">Date *</Label>\n                                  <Input\n                                    id=\"appointmentDate\"\n                                    type=\"date\"\n                                    value={appointmentForm.date || ''}\n                                    onChange={(e) => setAppointmentForm({...appointmentForm, date: e.target.value})}\n                                    min={new Date().toISOString().split('T')[0]}\n                                    className=\"w-full\"\n                                    data-testid=\"input-appointment-date\"\n                                  />\n                                </div>\n                                <div>\n                                  <Label htmlFor=\"appointmentTime\">Time *</Label>\n                                  <Input\n                                    id=\"appointmentTime\"\n                                    type=\"time\"\n                                    value={appointmentForm.time || ''}\n                                    onChange={(e) => setAppointmentForm({...appointmentForm, time: e.target.value})}\n                                    className=\"w-full\"\n                                    data-testid=\"input-appointment-time\"\n                                  />\n                                </div>\n                              </div>\n                              <div>\n                                <Label htmlFor=\"appointmentType\">Consultation Type</Label>\n                                <Select onValueChange={(value) => setAppointmentForm({...appointmentForm, type: value})}>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Regular\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    <SelectItem value=\"clinic\">Regular</SelectItem>\n                                    <SelectItem value=\"follow-up\">Follow-up</SelectItem>\n                                    <SelectItem value=\"emergency\">Emergency</SelectItem>\n                                    <SelectItem value=\"checkup\">Health Checkup</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                              <div>\n                                <Label htmlFor=\"symptoms\">Symptoms/Notes</Label>\n                                <Textarea\n                                  id=\"symptoms\"\n                                  value={appointmentForm.symptoms}\n                                  onChange={(e) => setAppointmentForm({...appointmentForm, symptoms: e.target.value})}\n                                  placeholder=\"Describe symptoms or appointment purpose\"\n                                />\n                              </div>\n                              <div className=\"flex gap-2\">\n                                <Button onClick={handleAppointmentSubmit} className=\"flex-1\">\n                                  <Calendar className=\"w-4 h-4 mr-2\" />\n                                  Schedule Appointment\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  onClick={() => setShowAppointmentModal(false)}\n                                  className=\"flex-1\"\n                                >\n                                  Cancel\n                                </Button>\n                              </div>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n\n                        {/* Prescriptions Dialog */}\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button \n                              variant=\"outline\" \n                              className=\"h-20 flex-col gap-2 bg-transparent\"\n                              data-testid=\"button-quick-prescriptions\"\n                            >\n                              <FileText className=\"w-6 h-6\" />\n                              <span>Prescriptions</span>\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-md\">\n                            <DialogHeader>\n                              <DialogTitle>Create Prescription</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div>\n                                <Label htmlFor=\"prescriptionPatient\">Patient *</Label>\n                                <Select onValueChange={(value) => setPrescriptionForm({...prescriptionForm, patientId: value})}>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select a patient...\" />\n                                  </SelectTrigger>\n                                  <SelectContent>\n                                    {patients?.map((patient) => (\n                                      <SelectItem key={patient.id} value={patient.id}>\n                                        {patient.firstName} {patient.lastName} ({patient.phoneNumber})\n                                      </SelectItem>\n                                    ))}\n                                  </SelectContent>\n                                </Select>\n                              </div>\n                              <div>\n                                <Label htmlFor=\"medicineName\">Medicine Name</Label>\n                                <Input\n                                  id=\"medicineName\"\n                                  value={prescriptionForm.medicineName}\n                                  onChange={(e) => setPrescriptionForm({...prescriptionForm, medicineName: e.target.value})}\n                                  placeholder=\"Paracetamol, Amoxicillin, etc.\"\n                                />\n                              </div>\n                              <div className=\"grid grid-cols-2 gap-4\">\n                                <div>\n                                  <Label htmlFor=\"dosage\">Dosage</Label>\n                                  <Input\n                                    id=\"dosage\"\n                                    value={prescriptionForm.dosage}\n                                    onChange={(e) => setPrescriptionForm({...prescriptionForm, dosage: e.target.value})}\n                                    placeholder=\"500mg\"\n                                  />\n                                </div>\n                                <div>\n                                  <Label htmlFor=\"frequency\">Frequency</Label>\n                                  <Select onValueChange={(value) => setPrescriptionForm({...prescriptionForm, frequency: value})}>\n                                    <SelectTrigger>\n                                      <SelectValue placeholder=\"Select frequency\" />\n                                    </SelectTrigger>\n                                    <SelectContent>\n                                      <SelectItem value=\"once-daily\">Once Daily</SelectItem>\n                                      <SelectItem value=\"twice-daily\">Twice Daily</SelectItem>\n                                      <SelectItem value=\"three-times\">Three Times Daily</SelectItem>\n                                      <SelectItem value=\"as-needed\">As Needed</SelectItem>\n                                    </SelectContent>\n                                  </Select>\n                                </div>\n                              </div>\n                              <div>\n                                <Label htmlFor=\"duration\">Duration</Label>\n                                <Input\n                                  id=\"duration\"\n                                  value={prescriptionForm.duration}\n                                  onChange={(e) => setPrescriptionForm({...prescriptionForm, duration: e.target.value})}\n                                  placeholder=\"7 days, 2 weeks, etc.\"\n                                />\n                              </div>\n                              <div>\n                                <Label htmlFor=\"instructions\">Instructions</Label>\n                                <Textarea\n                                  id=\"instructions\"\n                                  value={prescriptionForm.instructions}\n                                  onChange={(e) => setPrescriptionForm({...prescriptionForm, instructions: e.target.value})}\n                                  placeholder=\"Take with food, after meals, etc.\"\n                                />\n                              </div>\n                              <Button onClick={handlePrescriptionSubmit} className=\"w-full\">\n                                <FileText className=\"w-4 h-4 mr-2\" />\n                                Create Prescription\n                              </Button>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n\n\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Department Status */}\n                <Card className=\"mt-8\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <BarChart3 className=\"w-5 h-5 text-purple-500\" />\n                      Quick Analytics Dashboard\n                    </CardTitle>\n                    <p className=\"text-sm text-gray-600\">Real-time healthcare metrics and insights</p>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                      {/* Patient Flow Chart */}\n                      <div className=\"space-y-3\">\n                        <h4 className=\"font-semibold text-gray-800 dark:text-gray-200\">Today's Patient Flow</h4>\n                        <div className=\"space-y-2\">\n                          {(() => {\n                            const todayAppts = appointments?.filter(appt => {\n                              const apptDate = new Date(appt.appointmentDate);\n                              const today = new Date();\n                              return apptDate.toDateString() === today.toDateString();\n                            }) || [];\n                            \n                            const morningAppts = todayAppts.filter(appt => {\n                              const hour = new Date(appt.appointmentDate).getHours();\n                              return hour >= 8 && hour < 12;\n                            }).length;\n                            \n                            const afternoonAppts = todayAppts.filter(appt => {\n                              const hour = new Date(appt.appointmentDate).getHours();\n                              return hour >= 12 && hour < 17;\n                            }).length;\n                            \n                            const eveningAppts = todayAppts.filter(appt => {\n                              const hour = new Date(appt.appointmentDate).getHours();\n                              return hour >= 17 && hour < 20;\n                            }).length;\n                            \n                            const maxAppts = Math.max(morningAppts, afternoonAppts, eveningAppts, 1);\n                            \n                            return (\n                              <>\n                                <div className=\"flex items-center justify-between\">\n                                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Morning (8-12 PM)</span>\n                                  <div className=\"flex items-center gap-2\">\n                                    <div className=\"w-20 h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\">\n                                      <div \n                                        className=\"h-full bg-blue-500\" \n                                        style={{ width: `${(morningAppts / maxAppts) * 100}%` }}\n                                      ></div>\n                                    </div>\n                                    <span className=\"text-sm font-medium dark:text-gray-300\">{morningAppts} patients</span>\n                                  </div>\n                                </div>\n                                <div className=\"flex items-center justify-between\">\n                                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Afternoon (12-5 PM)</span>\n                                  <div className=\"flex items-center gap-2\">\n                                    <div className=\"w-20 h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\">\n                                      <div \n                                        className=\"h-full bg-green-500\" \n                                        style={{ width: `${(afternoonAppts / maxAppts) * 100}%` }}\n                                      ></div>\n                                    </div>\n                                    <span className=\"text-sm font-medium dark:text-gray-300\">{afternoonAppts} patients</span>\n                                  </div>\n                                </div>\n                                <div className=\"flex items-center justify-between\">\n                                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Evening (5-8 PM)</span>\n                                  <div className=\"flex items-center gap-2\">\n                                    <div className=\"w-20 h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden\">\n                                      <div \n                                        className=\"h-full bg-orange-500\" \n                                        style={{ width: `${(eveningAppts / maxAppts) * 100}%` }}\n                                      ></div>\n                                    </div>\n                                    <span className=\"text-sm font-medium dark:text-gray-300\">{eveningAppts} patients</span>\n                                  </div>\n                                </div>\n                              </>\n                            );\n                          })()}\n                        </div>\n                      </div>\n\n                      {/* Doctor Performance */}\n                      <div className=\"space-y-3\">\n                        <h4 className=\"font-semibold text-gray-800 dark:text-gray-200\">Doctor Performance</h4>\n                        <div className=\"space-y-2\">\n                          {(() => {\n                            const doctors = staffMembers?.filter(staff => staff.role === 'doctor') || [];\n                            const todayCompletedAppts = appointments?.filter(appt => {\n                              const apptDate = new Date(appt.appointmentDate);\n                              const today = new Date();\n                              return apptDate.toDateString() === today.toDateString() && appt.status === 'completed';\n                            }) || [];\n                            \n                            return doctors.map(doctor => {\n                              const completedCount = todayCompletedAppts.filter(appt => appt.doctorId === doctor.id).length;\n                              const bgColor = completedCount > 3 ? 'bg-green-50 dark:bg-green-900/20' : \n                                            completedCount > 1 ? 'bg-blue-50 dark:bg-blue-900/20' : \n                                            'bg-gray-50 dark:bg-gray-800';\n                              const badgeColor = completedCount > 3 ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-300' : \n                                                completedCount > 1 ? 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-300' : \n                                                'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300';\n                              \n                              return (\n                                <div key={doctor.id} className={`flex items-center justify-between p-2 ${bgColor} rounded`}>\n                                  <span className=\"text-sm font-medium dark:text-gray-200\">Dr. {doctor.firstName} {doctor.lastName}</span>\n                                  <Badge className={badgeColor}>{completedCount} completed</Badge>\n                                </div>\n                              );\n                            });\n                          })()}\n                          {(!staffMembers || staffMembers.filter(s => s.role === 'doctor').length === 0) && (\n                            <div className=\"text-sm text-gray-500 dark:text-gray-400 text-center py-4\">\n                              No doctor data available\n                            </div>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Medicine Stock Status */}\n                      <div className=\"space-y-3\">\n                        <h4 className=\"font-semibold text-gray-800\">Medicine Stock Status</h4>\n                        <div className=\"space-y-2\">\n                          {medicines && medicines.slice(0, 3).map((medicine) => (\n                            <div key={medicine.id} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                              <span className=\"text-sm font-medium\">{medicine.name}</span>\n                              <Badge className={\n                                medicine.stock === 0 ? 'bg-red-100 text-red-800' :\n                                medicine.stock <= 5 ? 'bg-yellow-100 text-yellow-800' :\n                                'bg-green-100 text-green-800'\n                              }>\n                                {medicine.stock} units\n                              </Badge>\n                            </div>\n                          ))}\n                          {(!medicines || medicines.length === 0) && (\n                            <div className=\"text-sm text-gray-500 text-center py-4\">\n                              No medicine data available\n                            </div>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Appointment Status Summary */}\n                      <div className=\"space-y-3\">\n                        <h4 className=\"font-semibold text-gray-800\">Appointment Status Summary</h4>\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-600\">Patients Served Today</span>\n                            <span className=\"text-sm font-medium text-green-600\">{stats?.completedAppointments || 0}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-600\">Currently Waiting</span>\n                            <span className=\"text-sm font-medium text-blue-600\">{liveQueueTokens?.length || 0}</span>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <span className=\"text-sm text-gray-600\">Total Scheduled Today</span>\n                            <span className=\"text-sm font-medium text-purple-600\">{stats?.patientsToday || 0}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </main>\n            </TabsContent>\n\n            <TabsContent value=\"queue\">\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div>\n                    <h2 className=\"text-2xl font-bold\">Patient Queue Management</h2>\n                    <p className=\"text-gray-600\">Monitor and manage patient queues across all doctors</p>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge className=\"bg-blue-100 text-blue-800\">\n                      Live Updates\n                    </Badge>\n                    <span className=\"text-sm text-gray-500\">\n                      Updated {new Date().toLocaleTimeString()}\n                    </span>\n                  </div>\n                </div>\n\n                {queueLoading ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3].map(i => (\n                      <div key={i} className=\"h-16 bg-gray-100 rounded-lg animate-pulse\"></div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {queueTokens && queueTokens.length > 0 ? (\n                      queueTokens.map((token) => (\n                        <Card key={token.id} className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-4\">\n                              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                                <span className=\"text-lg font-bold text-blue-600\">#{token.tokenNumber}</span>\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold\">\n                                  {token.patient.firstName} {token.patient.lastName}\n                                </h3>\n                                <p className=\"text-sm text-gray-600\">\n                                  Dr. {token.doctor.firstName} {token.doctor.lastName}\n                                </p>\n                                <p className=\"text-xs text-gray-500\">\n                                  Joined: {new Date(token.createdAt).toLocaleTimeString()}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-4\">\n                              <div className=\"text-right\">\n                                <Badge className={\n                                  token.status === 'waiting' ? 'bg-yellow-100 text-yellow-800' :\n                                  token.status === 'in_progress' ? 'bg-green-100 text-green-800' :\n                                  token.status === 'completed' ? 'bg-blue-100 text-blue-800' :\n                                  'bg-gray-100 text-gray-800'\n                                }>\n                                  {token.status}\n                                </Badge>\n                                <p className=\"text-sm text-gray-600 mt-1\">\n                                  Est. wait: {token.estimatedWaitTime || 15} min\n                                </p>\n                              </div>\n                              <div className=\"flex gap-2\">\n                                {token.status === 'waiting' && (\n                                  <Button \n                                    size=\"sm\" \n                                    className=\"bg-green-600 hover:bg-green-700\"\n                                    onClick={() => handleCallNext(token.id)}\n                                    disabled={updateQueueStatus.isPending}\n                                    data-testid={`button-call-next-${token.id}`}\n                                  >\n                                    {updateQueueStatus.isPending ? 'Calling...' : 'Call Next'}\n                                  </Button>\n                                )}\n                                {token.status === 'in_progress' && (\n                                  <Button \n                                    size=\"sm\" \n                                    className=\"bg-blue-600 hover:bg-blue-700\"\n                                    onClick={() => updateQueueStatus.mutate({ tokenId: token.id, status: 'completed' })}\n                                    disabled={updateQueueStatus.isPending}\n                                    data-testid={`button-complete-${token.id}`}\n                                  >\n                                    {updateQueueStatus.isPending ? 'Completing...' : 'Complete'}\n                                  </Button>\n                                )}\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\"\n                                  onClick={() => toast({ title: 'Queue Details', description: `Token #${token.tokenNumber} - ${token.patient.firstName} ${token.patient.lastName}` })}\n                                  data-testid={`button-view-details-${token.id}`}\n                                >\n                                  View Details\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        </Card>\n                      ))\n                    ) : (\n                      <Card className=\"p-8 text-center\">\n                        <Users className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Active Queue</h3>\n                        <p className=\"text-gray-600\">No patients are currently waiting in the queue.</p>\n                      </Card>\n                    )}\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"appointments\">\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div>\n                    <h2 className=\"text-2xl font-bold\">Appointments Management</h2>\n                    <p className=\"text-gray-600\">View and manage all scheduled appointments</p>\n                  </div>\n                  <Button \n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                    onClick={() => setShowAppointmentModal(true)}\n                    data-testid=\"button-new-appointment\"\n                  >\n                    <Calendar className=\"w-4 h-4 mr-2\" />\n                    New Appointment\n                  </Button>\n                </div>\n\n                {/* Search Bar for Appointments */}\n                <div className=\"mb-6\">\n                  <div className=\"relative\">\n                    <Input\n                      placeholder=\"Search appointments by patient name, doctor name, symptoms, or status...\"\n                      value={appointmentSearchQuery}\n                      onChange={(e) => setAppointmentSearchQuery(e.target.value)}\n                      className=\"pl-4 pr-4\"\n                      data-testid=\"input-appointment-search\"\n                    />\n                  </div>\n                </div>\n\n                {appointmentsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3, 4].map(i => (\n                      <div key={i} className=\"h-20 bg-gray-100 rounded-lg animate-pulse\"></div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {/* Debug appointments rendering */}\n                    {console.log('🔥 APPOINTMENTS RENDER DEBUG:', { appointments, length: appointments?.length, loading: appointmentsLoading, error: appointmentsError })}\n                    {appointments && appointments.length > 0 ? (\n                      appointments\n                        .filter((appointment) => {\n                          if (!appointmentSearchQuery) return true;\n                          const query = appointmentSearchQuery.toLowerCase();\n                          const patientName = `${appointment.patient?.firstName || ''} ${appointment.patient?.lastName || ''}`.toLowerCase();\n                          const doctorName = `${appointment.doctor?.firstName || ''} ${appointment.doctor?.lastName || ''}`.toLowerCase();\n                          const symptoms = (appointment.symptoms || '').toLowerCase();\n                          const status = (appointment.status || '').toLowerCase();\n                          const type = (appointment.type || '').toLowerCase();\n                          \n                          return patientName.includes(query) ||\n                                 doctorName.includes(query) ||\n                                 symptoms.includes(query) ||\n                                 status.includes(query) ||\n                                 type.includes(query);\n                        })\n                        .sort((a, b) => {\n                          // Pending approval first, then by creation date\n                          if (a.status === 'pending_approval' && b.status !== 'pending_approval') return -1;\n                          if (b.status === 'pending_approval' && a.status !== 'pending_approval') return 1;\n                          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n                        })\n                        .map((appointment) => (\n                        <Card key={appointment.id} className=\"p-4 card-with-buttons appointment-card\">\n                          <div className=\"flex items-center justify-between min-w-0\">\n                            <div className=\"flex items-center gap-4 min-w-0 flex-1\">\n                              <div className={`w-12 h-12 rounded-lg flex items-center justify-center flex-shrink-0 ${\n                                appointment.status === 'pending_approval' ? 'bg-yellow-100' : 'bg-green-100'\n                              }`}>\n                                <Calendar className={`w-6 h-6 ${\n                                  appointment.status === 'pending_approval' ? 'text-yellow-600' : 'text-green-600'\n                                }`} />\n                              </div>\n                              <div className=\"min-w-0 flex-1\">\n                                <h3 className=\"font-semibold truncate\">\n                                  {appointment.patient?.firstName} {appointment.patient?.lastName}\n                                </h3>\n                                <p className=\"text-sm text-gray-600 truncate\">\n                                  Dr. {appointment.doctor?.firstName} {appointment.doctor?.lastName}\n                                </p>\n                                <p className=\"text-xs text-gray-500 truncate\">\n                                  {new Date(appointment.appointmentDate).toLocaleDateString()} at {new Date(appointment.appointmentDate).toLocaleTimeString()}\n                                </p>\n                                {appointment.symptoms && (\n                                  <p className=\"text-xs text-blue-600 mt-1 truncate\">Symptoms: {appointment.symptoms}</p>\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-2 flex-shrink-0\">\n                              <div className=\"text-right\">\n                                <Badge className={\n                                  appointment.status === 'scheduled' ? 'bg-blue-100 text-blue-800' :\n                                  appointment.status === 'completed' ? 'bg-green-100 text-green-800' :\n                                  appointment.status === 'cancelled' ? 'bg-red-100 text-red-800' :\n                                  appointment.status === 'pending_approval' ? 'bg-yellow-100 text-yellow-800' :\n                                  'bg-gray-100 text-gray-800'\n                                }>\n                                  {appointment.status === 'pending_approval' ? 'PENDING APPROVAL' : appointment.status}\n                                </Badge>\n                                <p className=\"text-sm text-gray-600 mt-1 hidden sm:block\">\n                                  {appointment.type || 'Consultation'}\n                                </p>\n                              </div>\n                              <div className=\"mobile-card-buttons\">\n                                {appointment.status === 'pending_approval' ? (\n                                  <>\n                                    <Button\n                                      size=\"sm\"\n                                      onClick={() => handleAppointmentAction(appointment.id, 'approve')}\n                                      className=\"bg-green-600 hover:bg-green-700 text-white\"\n                                      disabled={appointmentApproval.isPending}\n                                    >\n                                      Approve\n                                    </Button>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"outline\"\n                                      onClick={() => handleAppointmentAction(appointment.id, 'reject')}\n                                      className=\"border-red-300 text-red-600 hover:bg-red-50\"\n                                      disabled={appointmentApproval.isPending}\n                                    >\n                                      Reject\n                                    </Button>\n                                  </>\n                                ) : (\n                                  <div className=\"flex gap-2\">\n                                <Dialog>\n                                    <DialogTrigger asChild>\n                                      <Button \n                                        size=\"sm\" \n                                        variant=\"outline\"\n                                        data-testid={`button-reschedule-${appointment.id}`}\n                                      >\n                                        Reschedule\n                                      </Button>\n                                    </DialogTrigger>\n                                  <DialogContent className=\"max-w-md\">\n                                    <DialogHeader>\n                                      <DialogTitle>Reschedule Appointment</DialogTitle>\n                                    </DialogHeader>\n                                    <div className=\"space-y-4\">\n                                      <div>\n                                        <p className=\"text-sm text-gray-600\">\n                                          Patient: {appointment.patient.firstName} {appointment.patient.lastName}\n                                        </p>\n                                        <p className=\"text-sm text-gray-600\">\n                                          Doctor: Dr. {appointment.doctor.firstName} {appointment.doctor.lastName}\n                                        </p>\n                                      </div>\n                                      <div>\n                                        <Label htmlFor={`newDate-${appointment.id}`}>New Date</Label>\n                                        <Input\n                                          id={`newDate-${appointment.id}`}\n                                          type=\"date\"\n                                          min={new Date().toISOString().split('T')[0]}\n                                          value={rescheduleForm.appointmentId === appointment.id ? rescheduleForm.newDate : ''}\n                                          onChange={(e) => setRescheduleForm({\n                                            appointmentId: appointment.id,\n                                            newDate: e.target.value,\n                                            newTime: rescheduleForm.newTime\n                                          })}\n                                        />\n                                      </div>\n                                      <div>\n                                        <Label htmlFor={`newTime-${appointment.id}`}>New Time</Label>\n                                        <Input\n                                          id={`newTime-${appointment.id}`}\n                                          type=\"time\"\n                                          value={rescheduleForm.appointmentId === appointment.id ? rescheduleForm.newTime : ''}\n                                          onChange={(e) => setRescheduleForm({\n                                            appointmentId: appointment.id,\n                                            newDate: rescheduleForm.newDate,\n                                            newTime: e.target.value\n                                          })}\n                                        />\n                                      </div>\n                                      <Button \n                                        className=\"w-full\"\n                                        onClick={() => {\n                                          alert('🚨 RESCHEDULE BUTTON CLICKED! Check console for details.');\n                                          console.log('🚨🚨🚨 BUTTON CLICKED - Reschedule button clicked!');\n                                          console.log('🚨 FORM DATA - appointmentId:', appointment.id);\n                                          console.log('🚨 FORM DATA - newDate:', rescheduleForm.newDate);\n                                          console.log('🚨 FORM DATA - newTime:', rescheduleForm.newTime);\n                                          console.log('🚨 FORM DATA - rescheduleForm:', rescheduleForm);\n                                          console.log('🚨 VALIDATION CHECK - Has newDate?', !!rescheduleForm.newDate);\n                                          console.log('🚨 VALIDATION CHECK - Has newTime?', !!rescheduleForm.newTime);\n                                          \n                                          if (rescheduleForm.newDate && rescheduleForm.newTime) {\n                                            console.log('🚨 VALIDATION PASSED - About to call handleReschedule...');\n                                            alert('🚨 About to call handleReschedule - watch console!');\n                                            handleReschedule(appointment.id, rescheduleForm.newDate, rescheduleForm.newTime)\n                                          } else {\n                                            console.log('🚨 VALIDATION FAILED - Missing date or time');\n                                            alert('🚨 VALIDATION FAILED - You need both date AND time!');\n                                            toast({ \n                                              title: 'Error', \n                                              description: 'Please select both date and time',\n                                              variant: 'destructive'\n                                            })\n                                          }\n                                        }}\n                                      >\n                                        Confirm Reschedule\n                                      </Button>\n                                    </div>\n                                  </DialogContent>\n                                </Dialog>\n\n                                <Dialog>\n                                  <DialogTrigger asChild>\n                                    <Button \n                                      size=\"sm\" \n                                      variant=\"outline\"\n                                      data-testid={`button-view-details-${appointment.id}`}\n                                    >\n                                      View Details\n                                    </Button>\n                                  </DialogTrigger>\n                                  <DialogContent className=\"max-w-2xl\">\n                                    <DialogHeader>\n                                      <DialogTitle>Appointment Details</DialogTitle>\n                                    </DialogHeader>\n                                    <div className=\"space-y-6\">\n                                      <div className=\"grid grid-cols-2 gap-4\">\n                                        <div>\n                                          <Label className=\"text-sm font-medium text-gray-700\">Patient</Label>\n                                          <p className=\"text-sm\">{appointment.patient.firstName} {appointment.patient.lastName}</p>\n                                          <p className=\"text-xs text-gray-500\">{appointment.patient.phoneNumber}</p>\n                                        </div>\n                                        <div>\n                                          <Label className=\"text-sm font-medium text-gray-700\">Doctor</Label>\n                                          <p className=\"text-sm\">Dr. {appointment.doctor.firstName} {appointment.doctor.lastName}</p>\n                                          <p className=\"text-xs text-gray-500\">{appointment.doctor.phoneNumber}</p>\n                                        </div>\n                                      </div>\n                                      \n                                      <div className=\"grid grid-cols-2 gap-4\">\n                                        <div>\n                                          <Label className=\"text-sm font-medium text-gray-700\">Date & Time</Label>\n                                          <p className=\"text-sm\">{new Date(appointment.appointmentDate).toLocaleDateString()}</p>\n                                          <p className=\"text-xs text-gray-500\">{new Date(appointment.appointmentDate).toLocaleTimeString()}</p>\n                                        </div>\n                                        <div>\n                                          <Label className=\"text-sm font-medium text-gray-700\">Type & Duration</Label>\n                                          <p className=\"text-sm\">{appointment.type || 'Consultation'}</p>\n                                          <p className=\"text-xs text-gray-500\">{appointment.duration || 30} minutes</p>\n                                        </div>\n                                      </div>\n                                      \n                                      <div>\n                                        <Label className=\"text-sm font-medium text-gray-700\">Status</Label>\n                                        <Badge className={\n                                          appointment.status === 'scheduled' ? 'bg-blue-100 text-blue-800' :\n                                          appointment.status === 'completed' ? 'bg-green-100 text-green-800' :\n                                          appointment.status === 'cancelled' ? 'bg-red-100 text-red-800' :\n                                          'bg-gray-100 text-gray-800'\n                                        }>\n                                          {appointment.status}\n                                        </Badge>\n                                      </div>\n                                      \n                                      {appointment.symptoms && (\n                                        <div>\n                                          <Label className=\"text-sm font-medium text-gray-700\">Symptoms</Label>\n                                          <p className=\"text-sm text-gray-600\">{appointment.symptoms}</p>\n                                        </div>\n                                      )}\n                                      \n                                      {appointment.diagnosis && (\n                                        <div>\n                                          <Label className=\"text-sm font-medium text-gray-700\">Diagnosis</Label>\n                                          <p className=\"text-sm text-gray-600\">{appointment.diagnosis}</p>\n                                        </div>\n                                      )}\n                                      \n                                      {appointment.treatmentPlan && (\n                                        <div>\n                                          <Label className=\"text-sm font-medium text-gray-700\">Treatment Plan</Label>\n                                          <p className=\"text-sm text-gray-600\">{appointment.treatmentPlan}</p>\n                                        </div>\n                                      )}\n                                      \n                                      <div className=\"text-xs text-gray-500 border-t pt-4\">\n                                        <p>Created: {new Date(appointment.createdAt).toLocaleString()}</p>\n                                        <p>Last Updated: {new Date(appointment.updatedAt).toLocaleString()}</p>\n                                      </div>\n                                    </div>\n                                  </DialogContent>\n                                </Dialog>\n                                {appointment.status === 'scheduled' && (\n                                  <Button \n                                    size=\"sm\" \n                                    className=\"bg-green-600 hover:bg-green-700\"\n                                    onClick={() => handleUpdateAppointment(appointment.id, 'completed')}\n                                    disabled={updateAppointmentStatus.isPending}\n                                    data-testid={`button-complete-appointment-${appointment.id}`}\n                                  >\n                                    {updateAppointmentStatus.isPending ? 'Completing...' : 'Mark Complete'}\n                                  </Button>\n                                )}\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </Card>\n                      ))\n                    ) : (\n                      <Card className=\"p-8 text-center\">\n                        <Calendar className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Appointments Today</h3>\n                        <p className=\"text-gray-600\">No appointments are scheduled for today.</p>\n                      </Card>\n                    )}\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"records\">\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div>\n                    <h2 className=\"text-2xl font-bold\">Patient Records</h2>\n                    <p className=\"text-gray-600\">View and manage all patient records</p>\n                  </div>\n                  <Dialog>\n                    <DialogTrigger asChild>\n                      <Button \n                        className=\"bg-blue-600 hover:bg-blue-700\"\n                        data-testid=\"button-add-patient\"\n                      >\n                        <UserPlus className=\"w-4 h-4 mr-2\" />\n                        Add Patient\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-md\">\n                      <DialogHeader>\n                        <DialogTitle>Add New Patient</DialogTitle>\n                      </DialogHeader>\n                      <div className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"firstName\">First Name</Label>\n                            <Input\n                              id=\"firstName\"\n                              value={patientForm.firstName}\n                              onChange={(e) => setPatientForm({...patientForm, firstName: e.target.value})}\n                              placeholder=\"John\"\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"lastName\">Last Name</Label>\n                            <Input\n                              id=\"lastName\"\n                              value={patientForm.lastName}\n                              onChange={(e) => setPatientForm({...patientForm, lastName: e.target.value})}\n                              placeholder=\"Doe\"\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n                          <Input\n                            id=\"phoneNumber\"\n                            value={patientForm.phoneNumber}\n                            onChange={(e) => setPatientForm({...patientForm, phoneNumber: e.target.value})}\n                            placeholder=\"+1234567890\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"email\">Email (Optional)</Label>\n                          <Input\n                            id=\"email\"\n                            type=\"email\"\n                            value={patientForm.email}\n                            onChange={(e) => setPatientForm({...patientForm, email: e.target.value})}\n                            placeholder=\"john.doe@example.com\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"dateOfBirth\">Date of Birth (Optional)</Label>\n                          <Input\n                            id=\"dateOfBirth\"\n                            type=\"date\"\n                            value={patientForm.dateOfBirth}\n                            onChange={(e) => setPatientForm({...patientForm, dateOfBirth: e.target.value})}\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"address\">Address (Optional)</Label>\n                          <Textarea\n                            id=\"address\"\n                            value={patientForm.address}\n                            onChange={(e) => setPatientForm({...patientForm, address: e.target.value})}\n                            placeholder=\"123 Main St, City, State\"\n                          />\n                        </div>\n                        <Button onClick={handlePatientSubmit} className=\"w-full\">\n                          <UserPlus className=\"w-4 h-4 mr-2\" />\n                          Add Patient\n                        </Button>\n                      </div>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n\n                {/* Search Bar for Patient Records */}\n                <div className=\"mb-6\">\n                  <div className=\"relative\">\n                    <Input\n                      placeholder=\"Search patients by name, phone number, or email...\"\n                      value={patientSearchQuery}\n                      onChange={(e) => setPatientSearchQuery(e.target.value)}\n                      className=\"pl-4 pr-4\"\n                      data-testid=\"input-patient-search\"\n                    />\n                  </div>\n                </div>\n\n                {patientsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3, 4, 5].map(i => (\n                      <div key={i} className=\"h-16 bg-gray-100 rounded-lg animate-pulse\"></div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {Array.isArray(patients) && patients.length > 0 ? (\n                      patients\n                        .filter((patient: any) => {\n                          if (!patientSearchQuery) return true;\n                          const query = patientSearchQuery.toLowerCase();\n                          const fullName = `${patient.firstName || ''} ${patient.lastName || ''}`.toLowerCase();\n                          const phoneNumber = (patient.phoneNumber || '').toLowerCase();\n                          const email = (patient.email || '').toLowerCase();\n                          const address = (patient.address || '').toLowerCase();\n                          \n                          return fullName.includes(query) ||\n                                 phoneNumber.includes(query) ||\n                                 email.includes(query) ||\n                                 address.includes(query);\n                        })\n                        .map((patient: any) => (\n                        <Card key={patient.id} className=\"p-4 card-with-buttons patient-record-card\">\n                          <div className=\"flex items-center justify-between min-w-0\">\n                            <div className=\"flex items-center gap-4 min-w-0 flex-1\">\n                              <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center flex-shrink-0\">\n                                <User className=\"w-6 h-6 text-purple-600\" />\n                              </div>\n                              <div className=\"min-w-0 flex-1\">\n                                <h3 className=\"font-semibold truncate\">\n                                  {patient.firstName} {patient.lastName}\n                                </h3>\n                                <p className=\"text-sm text-gray-600 truncate\">\n                                  {patient.phoneNumber}\n                                </p>\n                                <p className=\"text-xs text-gray-500 truncate\">\n                                  Registered: {new Date(patient.createdAt).toLocaleDateString()}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-2 flex-shrink-0\">\n                              <div className=\"text-right\">\n                                <Badge className={\n                                  patient.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                                }>\n                                  {patient.isActive ? 'Active' : 'Inactive'}\n                                </Badge>\n                                {!patient.isApproved && (\n                                  <Badge className=\"bg-yellow-100 text-yellow-800 ml-1 text-xs hidden sm:inline-flex\">\n                                    Pending\n                                  </Badge>\n                                )}\n                              </div>\n                              <div className=\"mobile-card-buttons\">\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\"\n                                  onClick={() => handleViewHistory(patient)}\n                                  data-testid={`button-view-history-${patient.id}`}\n                                >\n                                  View History\n                                </Button>\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\"\n                                  onClick={() => handleEditProfile(patient)}\n                                  data-testid={`button-edit-profile-${patient.id}`}\n                                >\n                                  Edit Profile\n                                </Button>\n                                {!patient.isApproved && (\n                                  <Button \n                                    size=\"sm\" \n                                    className=\"bg-green-600 hover:bg-green-700\"\n                                    onClick={() => handleApproveUser(patient.id)}\n                                    disabled={approveUser.isPending}\n                                    data-testid={`button-approve-${patient.id}`}\n                                  >\n                                    {approveUser.isPending ? 'Approving...' : 'Approve'}\n                                  </Button>\n                                )}\n                                {patient.isActive ? (\n                                  <Button \n                                    size=\"sm\" \n                                    variant=\"destructive\"\n                                    onClick={() => handleDeactivateUser(patient.id)}\n                                    disabled={updateUserStatus.isPending}\n                                    data-testid={`button-deactivate-${patient.id}`}\n                                  >\n                                    {updateUserStatus.isPending ? 'Deactivating...' : 'Deactivate'}\n                                  </Button>\n                                ) : (\n                                  <Button \n                                    size=\"sm\" \n                                    className=\"bg-blue-600 hover:bg-blue-700\"\n                                    onClick={() => handleActivateUser(patient.id)}\n                                    disabled={updateUserStatus.isPending}\n                                    data-testid={`button-activate-${patient.id}`}\n                                  >\n                                    {updateUserStatus.isPending ? 'Activating...' : 'Activate'}\n                                  </Button>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </Card>\n                      ))\n                    ) : (\n                      <Card className=\"p-8 text-center\">\n                        <User className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Patient Records</h3>\n                        <p className=\"text-gray-600\">No patient records found in the system.</p>\n                      </Card>\n                    )}\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"inventory\">\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div>\n                    <h2 className=\"text-2xl font-bold\">Inventory Management</h2>\n                    <p className=\"text-gray-600\">Monitor medicine stock levels and manage inventory</p>\n                  </div>\n                  <Button \n                    className=\"bg-blue-600 hover:bg-blue-700\"\n                    onClick={() => setIsAddMedicineOpen(true)}\n                    data-testid=\"button-add-medicine\"\n                  >\n                    <FileText className=\"w-4 h-4 mr-2\" />\n                    Add Medicine\n                  </Button>\n                </div>\n\n                {medicinesLoading ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3, 4, 5].map(i => (\n                      <div key={i} className=\"h-16 bg-gray-100 rounded-lg animate-pulse\"></div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\" key={forceRender}>\n                    {medicines && medicines.length > 0 ? (\n                      medicines.map((medicine: Medicine) => (\n                        <Card key={`${medicine.id}-${forceRender}`} className=\"p-4\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center gap-4\">\n                              <div className=\"w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                                <FileText className=\"w-6 h-6 text-orange-600\" />\n                              </div>\n                              <div>\n                                <h3 className=\"font-semibold\">{medicine.name}</h3>\n                                <p className=\"text-sm text-gray-600\">\n                                  {medicine.strength} - {medicine.dosageForm}\n                                </p>\n                                <p className=\"text-xs text-gray-500\">\n                                  Manufacturer: {medicine.manufacturer}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-4\">\n                              <div className=\"text-right\">\n                                <Badge className={\n                                  (medicine.stock || 0) > 50 ? 'bg-green-100 text-green-800' :\n                                  (medicine.stock || 0) > 10 ? 'bg-yellow-100 text-yellow-800' :\n                                  'bg-red-100 text-red-800'\n                                }>\n                                  {medicine.stock || 0} units\n                                </Badge>\n                                <p className=\"text-sm text-gray-600 mt-1\">\n                                  {(medicine.stock || 0) <= 10 ? 'Low Stock' : \n                                   (medicine.stock || 0) <= 50 ? 'Medium Stock' : 'In Stock'}\n                                </p>\n                              </div>\n                              <div className=\"flex gap-2\">\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\"\n                                  onClick={() => handleRestockMedicine(medicine)}\n                                  data-testid={`button-restock-${medicine.id}`}\n                                >\n                                  Restock\n                                </Button>\n                                <Button \n                                  size=\"sm\" \n                                  variant=\"outline\"\n                                  onClick={() => handleEditMedicine(medicine)}\n                                  data-testid={`button-edit-${medicine.id}`}\n                                >\n                                  Edit\n                                </Button>\n                              </div>\n                            </div>\n                          </div>\n                        </Card>\n                      ))\n                    ) : (\n                      <Card className=\"p-8 text-center\">\n                        <FileText className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Medicines</h3>\n                        <p className=\"text-gray-600\">No medicines found in inventory.</p>\n                      </Card>\n                    )}\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"staff\">\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div>\n                    <h2 className=\"text-2xl font-bold\">Staff Management</h2>\n                    <p className=\"text-gray-600\">Manage doctors, nurses, and administrative staff</p>\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <Dialog open={isAddStaffOpen} onOpenChange={setIsAddStaffOpen}>\n                      <DialogTrigger asChild>\n                        <Button className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-add-staff\">\n                          <UserPlus className=\"w-4 h-4 mr-2\" />\n                          Add Staff Member\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-md\">\n                        <DialogHeader>\n                          <DialogTitle>Add New Staff Member</DialogTitle>\n                        </DialogHeader>\n                        <div className=\"space-y-4\">\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <Label htmlFor=\"staffFirstName\">First Name</Label>\n                              <Input \n                                id=\"staffFirstName\" \n                                placeholder=\"First Name\"\n                                value={staffForm.firstName}\n                                onChange={(e) => setStaffForm(prev => ({ ...prev, firstName: e.target.value }))}\n                              />\n                            </div>\n                            <div>\n                              <Label htmlFor=\"staffLastName\">Last Name</Label>\n                              <Input \n                                id=\"staffLastName\" \n                                placeholder=\"Last Name\"\n                                value={staffForm.lastName}\n                                onChange={(e) => setStaffForm(prev => ({ ...prev, lastName: e.target.value }))}\n                              />\n                            </div>\n                          </div>\n                          <div>\n                            <Label htmlFor=\"staffRole\">Role</Label>\n                            <Select value={staffForm.role} onValueChange={(value) => setStaffForm(prev => ({ ...prev, role: value }))}>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select role\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"doctor\">Doctor</SelectItem>\n                                <SelectItem value=\"nurse\">Nurse</SelectItem>\n                                <SelectItem value=\"staff\">Administrative Staff</SelectItem>\n                                <SelectItem value=\"admin\">Administrator</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <Label htmlFor=\"staffPhone\">Phone Number</Label>\n                            <Input \n                              id=\"staffPhone\" \n                              placeholder=\"+1234567890\"\n                              value={staffForm.phoneNumber}\n                              onChange={(e) => setStaffForm(prev => ({ ...prev, phoneNumber: e.target.value }))}\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"staffEmail\">Email</Label>\n                            <Input \n                              id=\"staffEmail\" \n                              type=\"email\" \n                              placeholder=\"staff@smartclinic.com\"\n                              value={staffForm.email}\n                              onChange={(e) => setStaffForm(prev => ({ ...prev, email: e.target.value }))}\n                            />\n                          </div>\n                          <Button className=\"w-full\" onClick={handleStaffSubmit}>\n                            <UserPlus className=\"w-4 h-4 mr-2\" />\n                            Add Staff Member\n                          </Button>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                    \n\n\n                  </div>\n                </div>\n\n                {/* Staff Statistics */}\n                <div className=\"grid grid-cols-4 gap-4 mb-6\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-gray-600\">Total Staff</p>\n                          <p className=\"text-2xl font-bold text-blue-600\">{totalStaff}</p>\n                        </div>\n                        <Users className=\"w-8 h-8 text-blue-600\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-gray-600\">Doctors</p>\n                          <p className=\"text-2xl font-bold text-green-600\">{doctorCount}</p>\n                        </div>\n                        <Stethoscope className=\"w-8 h-8 text-green-600\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-gray-600\">Staff Members</p>\n                          <p className=\"text-2xl font-bold text-purple-600\">{staffCount}</p>\n                        </div>\n                        <User className=\"w-8 h-8 text-purple-600\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-sm text-gray-600\">Present Today</p>\n                          <p className=\"text-2xl font-bold text-orange-600\">{presentStaff}</p>\n                        </div>\n                        <Activity className=\"w-8 h-8 text-orange-600\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {usersLoading ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3, 4].map(i => (\n                      <div key={i} className=\"h-16 bg-gray-100 rounded-lg animate-pulse\"></div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\" key={forceRender}>\n                    {staffMembers && staffMembers.length > 0 ? (\n                      staffMembers.map((staff) => (\n                          <Card key={`${staff.id}-${forceRender}`} className=\"p-4\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center gap-4\">\n                                <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${\n                                  staff.role === 'doctor' ? 'bg-green-100' :\n                                  staff.role === 'nurse' ? 'bg-purple-100' :\n                                  staff.role === 'admin' ? 'bg-blue-100' : 'bg-gray-100'\n                                }`}>\n                                  {staff.role === 'doctor' ? (\n                                    <Stethoscope className=\"w-6 h-6 text-green-600\" />\n                                  ) : staff.role === 'nurse' ? (\n                                    <User className=\"w-6 h-6 text-purple-600\" />\n                                  ) : staff.role === 'admin' ? (\n                                    <Shield className=\"w-6 h-6 text-blue-600\" />\n                                  ) : (\n                                    <User className=\"w-6 h-6 text-gray-600\" />\n                                  )}\n                                </div>\n                                <div>\n                                  <h3 className=\"font-semibold\">\n                                    {staff.firstName} {staff.lastName}\n                                  </h3>\n                                  <p className=\"text-sm text-gray-600\">\n                                    {staff.phoneNumber}\n                                  </p>\n                                  <div className=\"flex items-center gap-2 mt-1\">\n                                    <Badge className={\n                                      staff.role === 'doctor' ? 'bg-green-100 text-green-800' :\n                                      staff.role === 'nurse' ? 'bg-purple-100 text-purple-800' :\n                                      staff.role === 'admin' ? 'bg-blue-100 text-blue-800' :\n                                      'bg-gray-100 text-gray-800'\n                                    }>\n                                      {staff.role.charAt(0).toUpperCase() + staff.role.slice(1)}\n                                    </Badge>\n                                    {(() => {\n                                      const presence = staffPresence.find(p => p.staffId === staff.id);\n                                      return (\n                                        <Badge className={presence?.isPresent \n                                          ? 'bg-green-100 text-green-800' \n                                          : 'bg-red-100 text-red-800'\n                                        }>\n                                          {presence?.isPresent ? 'Present' : 'Absent'}\n                                        </Badge>\n                                      );\n                                    })()}\n                                    <span className=\"text-xs text-gray-500\">\n                                      ID: {staff.id.slice(0, 8)}...\n                                    </span>\n                                  </div>\n                                </div>\n                              </div>\n                              <div className=\"flex items-center gap-4\">\n                                <div className=\"text-right\">\n                                  <Badge className={\n                                    staff.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\n                                  }>\n                                    {staff.isActive ? 'Active' : 'Inactive'}\n                                  </Badge>\n                                  {!staff.isApproved && (\n                                    <Badge className=\"bg-yellow-100 text-yellow-800 ml-2\">\n                                      Pending Approval\n                                    </Badge>\n                                  )}\n                                  <p className=\"text-xs text-gray-500 mt-1\">\n                                    Joined: {new Date(staff.createdAt).toLocaleDateString()}\n                                  </p>\n                                </div>\n                                <div className=\"flex gap-2\">\n                                  {(() => {\n                                    const presence = staffPresence.find(p => p.staffId === staff.id);\n                                    return (\n                                      <Button\n                                        size=\"sm\"\n                                        variant={presence?.isPresent ? \"destructive\" : \"default\"}\n                                        onClick={() => {\n                                          const currentStatus = presence?.isPresent || false;\n                                          toggleStaffPresenceMutation.mutate({ \n                                            userId: staff.id, \n                                            isPresent: !currentStatus \n                                          });\n                                        }}\n                                        disabled={toggleStaffPresenceMutation.isPending}\n                                        data-testid={`button-toggle-presence-${staff.id}`}\n                                      >\n                                        {presence?.isPresent ? 'Mark Absent' : 'Mark Present'}\n                                      </Button>\n                                    );\n                                  })()}\n                                  <Dialog>\n                                    <DialogTrigger asChild>\n                                      <Button \n                                        size=\"sm\" \n                                        variant=\"outline\"\n                                        data-testid={`button-view-details-${staff.id}`}\n                                      >\n                                        View Details\n                                      </Button>\n                                    </DialogTrigger>\n                                    <DialogContent className=\"max-w-lg\">\n                                      <DialogHeader>\n                                        <DialogTitle>Staff Member Details</DialogTitle>\n                                      </DialogHeader>\n                                      <div className=\"space-y-4\">\n                                        <div className=\"flex items-center gap-4 p-4 bg-gray-50 rounded-lg\">\n                                          <div className={`w-16 h-16 rounded-full flex items-center justify-center ${\n                                            staff.role === 'doctor' ? 'bg-green-100' :\n                                            staff.role === 'nurse' ? 'bg-purple-100' :\n                                            staff.role === 'admin' ? 'bg-blue-100' : 'bg-gray-100'\n                                          }`}>\n                                            {staff.role === 'doctor' ? (\n                                              <Stethoscope className=\"w-8 h-8 text-green-600\" />\n                                            ) : staff.role === 'nurse' ? (\n                                              <User className=\"w-8 h-8 text-purple-600\" />\n                                            ) : staff.role === 'admin' ? (\n                                              <Shield className=\"w-8 h-8 text-blue-600\" />\n                                            ) : (\n                                              <User className=\"w-8 h-8 text-gray-600\" />\n                                            )}\n                                          </div>\n                                          <div>\n                                            <h3 className=\"font-semibold text-lg\">{staff.firstName} {staff.lastName}</h3>\n                                            <p className=\"text-sm text-gray-600\">{staff.role.charAt(0).toUpperCase() + staff.role.slice(1)}</p>\n                                            <p className=\"text-xs text-gray-500\">{staff.email || 'No email on file'}</p>\n                                          </div>\n                                        </div>\n                                        \n                                        <div className=\"grid grid-cols-2 gap-4\">\n                                          <div>\n                                            <h4 className=\"font-medium mb-2\">Contact Information</h4>\n                                            <div className=\"space-y-1 text-sm\">\n                                              <p><span className=\"text-gray-600\">Phone:</span> {staff.phoneNumber}</p>\n                                              <p><span className=\"text-gray-600\">Email:</span> {staff.email || 'Not provided'}</p>\n                                              <p><span className=\"text-gray-600\">Address:</span> {staff.address || 'Not provided'}</p>\n                                            </div>\n                                          </div>\n                                          \n                                          <div>\n                                            <h4 className=\"font-medium mb-2\">Work Information</h4>\n                                            <div className=\"space-y-1 text-sm\">\n                                              <p><span className=\"text-gray-600\">Department:</span> {staff.role === 'doctor' ? 'Medical' : staff.role === 'nurse' ? 'Nursing' : 'Administration'}</p>\n                                              <p><span className=\"text-gray-600\">Status:</span> {staff.isActive ? 'Active' : 'Inactive'}</p>\n                                              <p><span className=\"text-gray-600\">Approved:</span> {staff.isApproved ? 'Yes' : 'Pending'}</p>\n                                            </div>\n                                          </div>\n                                        </div>\n                                        \n                                        <div>\n                                          <h4 className=\"font-medium mb-2\">Recent Activity</h4>\n                                          <div className=\"space-y-2\">\n                                            <div className=\"p-2 bg-blue-50 rounded text-sm\">\n                                              <span className=\"text-blue-800\">Last login:</span> Today at 9:30 AM\n                                            </div>\n                                            <div className=\"p-2 bg-green-50 rounded text-sm\">\n                                              <span className=\"text-green-800\">Patients seen today:</span> {staff.role === 'doctor' ? '12' : staff.role === 'nurse' ? '8' : 'N/A'}\n                                            </div>\n                                          </div>\n                                        </div>\n                                      </div>\n                                    </DialogContent>\n                                  </Dialog>\n                                  \n                                  {!staff.isApproved && (\n                                    <Button \n                                      size=\"sm\" \n                                      className=\"bg-green-600 hover:bg-green-700\"\n                                      onClick={() => handleApproveUser(staff.id)}\n                                      disabled={approveUser.isPending}\n                                      data-testid={`button-approve-${staff.id}`}\n                                    >\n                                      {approveUser.isPending ? 'Approving...' : 'Approve'}\n                                    </Button>\n                                  )}\n                                  \n                                  {staff.isActive ? (\n                                    <Button \n                                      size=\"sm\" \n                                      variant=\"destructive\"\n                                      onClick={() => handleDeactivateUser(staff.id)}\n                                      disabled={updateUserStatus.isPending}\n                                      data-testid={`button-deactivate-${staff.id}`}\n                                    >\n                                      {updateUserStatus.isPending ? 'Deactivating...' : 'Deactivate'}\n                                    </Button>\n                                  ) : (\n                                    <Button \n                                      size=\"sm\" \n                                      className=\"bg-blue-600 hover:bg-blue-700\"\n                                      onClick={() => handleActivateUser(staff.id)}\n                                      disabled={updateUserStatus.isPending}\n                                      data-testid={`button-activate-${staff.id}`}\n                                    >\n                                      {updateUserStatus.isPending ? 'Activating...' : 'Activate'}\n                                    </Button>\n                                  )}\n                                </div>\n                              </div>\n                            </div>\n                          </Card>\n                        ))\n                    ) : (\n                      <Card className=\"p-8 text-center\">\n                        <Stethoscope className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Staff Members</h3>\n                        <p className=\"text-gray-600\">No staff members found in the system.</p>\n                        <Button className=\"mt-4\">\n                          <UserPlus className=\"w-4 h-4 mr-2\" />\n                          Add First Staff Member\n                        </Button>\n                      </Card>\n                    )}\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"feedback\" className=\"mt-0\">\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-gray-900 flex items-center gap-2\">\n                      <MessageCircle className=\"w-6 h-6 text-orange-500\" />\n                      Patient Feedback\n                    </h2>\n                    <p className=\"text-gray-600 mt-1\">View and manage patient feedback responses</p>\n                  </div>\n                </div>\n\n                {feedbackLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n                    <p className=\"text-gray-600 mt-2\">Loading feedback...</p>\n                  </div>\n                ) : feedback.filter((item: any) => !item.isRead).length === 0 ? (\n                  <Card>\n                    <CardContent className=\"text-center py-12\">\n                      <MessageCircle className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Feedback Yet</h3>\n                      <p className=\"text-gray-600\">Patient feedback will appear here once submitted.</p>\n                    </CardContent>\n                  </Card>\n                ) : (\n                  <div className=\"grid gap-6\">\n                    {feedback.filter((item: any) => !item.isRead).map((item: any) => (\n                      <Card key={item.id} className=\"hover:shadow-lg transition-shadow\">\n                        <CardHeader className=\"pb-4\">\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex items-center gap-3\">\n                              <div className=\"flex items-center\">\n                                {Array.from({ length: 5 }, (_, index) => (\n                                  <Star\n                                    key={index}\n                                    className={`w-5 h-5 ${\n                                      index < item.rating\n                                        ? \"text-yellow-400 fill-current\"\n                                        : \"text-gray-300\"\n                                    }`}\n                                  />\n                                ))}\n                                <span className=\"ml-2 text-lg font-semibold text-gray-900\">\n                                  {item.rating}/5\n                                </span>\n                              </div>\n                              <Badge\n                                variant=\"outline\"\n                                className={\n                                  item.rating >= 4\n                                    ? \"border-green-200 text-green-700 bg-green-50\"\n                                    : item.rating >= 3\n                                    ? \"border-yellow-200 text-yellow-700 bg-yellow-50\"\n                                    : \"border-red-200 text-red-700 bg-red-50\"\n                                }\n                              >\n                                {item.rating >= 4 ? \"Positive\" : item.rating >= 3 ? \"Neutral\" : \"Negative\"}\n                              </Badge>\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              {new Date(item.createdAt).toLocaleDateString('en-US', {\n                                year: 'numeric',\n                                month: 'short',\n                                day: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit'\n                              })}\n                            </div>\n                          </div>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                            <div>\n                              <span className=\"font-medium text-gray-700\">Categories:</span>\n                              <span className=\"ml-2 capitalize\">\n                                {item.categories ? item.categories.map((cat: string) => cat.replace('_', ' ')).join(', ') : 'N/A'}\n                              </span>\n                            </div>\n                            <div>\n                              <span className=\"font-medium text-gray-700\">Submitted by:</span>\n                              <span className=\"ml-2\">\n                                {item.isAnonymous ? \"Anonymous Patient\" : `${item.patient?.firstName || 'Patient'} ${item.patient?.lastName || ''}`}\n                              </span>\n                            </div>\n                            {item.appointmentId && (\n                              <div>\n                                <span className=\"font-medium text-gray-700\">Related Appointment:</span>\n                                <span className=\"ml-2 text-blue-600\">#{item.appointmentId.slice(-6)}</span>\n                              </div>\n                            )}\n                          </div>\n                          \n                          <div className=\"border-t pt-4\">\n                            <h4 className=\"font-medium text-gray-900 mb-2\">Comments:</h4>\n                            <p className=\"text-gray-700 bg-gray-50 p-3 rounded-lg\">\n                              \"{item.comment}\"\n                            </p>\n                          </div>\n\n                          <div className=\"flex items-center gap-2 pt-2\">\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              className=\"flex items-center gap-1\"\n                              onClick={() => handleMarkAsRead(item.id)}\n                              disabled={markAsReadMutation.isPending}\n                              data-testid={`button-mark-read-${item.id}`}\n                            >\n                              <Eye className=\"w-4 h-4\" />\n                              {markAsReadMutation.isPending ? 'Marking...' : 'Mark as Read'}\n                            </Button>\n                            {!item.isAnonymous && (\n                              <Button \n                                variant=\"outline\" \n                                size=\"sm\" \n                                className=\"text-blue-600\"\n                                onClick={() => handleContactPatient(item)}\n                                data-testid={`button-contact-patient-${item.id}`}\n                              >\n                                Contact Patient\n                              </Button>\n                            )}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"reports\">\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <div>\n                    <h2 className=\"text-2xl font-bold\">Reports & Analytics</h2>\n                    <p className=\"text-gray-600\">View comprehensive reports and analytics</p>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button \n                      className=\"bg-blue-600 hover:bg-blue-700\"\n                      onClick={handleGenerateReport}\n                      disabled={generateReport.isPending}\n                    >\n                      <BarChart3 className=\"w-4 h-4 mr-2\" />\n                      {generateReport.isPending ? 'Generating...' : 'Generate Report'}\n                    </Button>\n                    {reportData && (\n                      <Button \n                        className=\"bg-green-600 hover:bg-green-700\"\n                        onClick={() => generatePDFReport(reportData)}\n                      >\n                        <Download className=\"w-4 h-4 mr-2\" />\n                        Download PDF\n                      </Button>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* Daily Summary */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <BarChart3 className=\"w-5 h-5 text-blue-500\" />\n                        Daily Summary\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600\">Total Patients</span>\n                          <span className=\"font-semibold\">{reportData?.summary?.totalPatients || stats?.patientsToday || 0}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600\">Completed Appointments</span>\n                          <span className=\"font-semibold\">{reportData?.summary?.completedAppointments || stats?.completedAppointments || 0}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600\">Revenue</span>\n                          <span className=\"font-semibold\">${reportData?.summary?.revenue || stats?.revenue || 0}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600\">Active Staff</span>\n                          <span className=\"font-semibold\">{reportData?.summary?.activeStaff || stats?.activeStaff || 0}</span>\n                        </div>\n                        {reportData && (\n                          <>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-sm text-gray-600\">Queue Processed</span>\n                              <span className=\"font-semibold\">{reportData.summary.queueProcessed}</span>\n                            </div>\n                            <div className=\"flex justify-between items-center\">\n                              <span className=\"text-sm text-gray-600\">Completion Rate</span>\n                              <span className=\"font-semibold\">{reportData.appointments.completionRate}%</span>\n                            </div>\n                          </>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Enhanced Report Display */}\n                  {reportData && (\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center gap-2\">\n                          <FileText className=\"w-5 h-5 text-purple-500\" />\n                          Generated Report Details\n                        </CardTitle>\n                        <p className=\"text-sm text-gray-500\">\n                          Generated on {new Date(reportData.generatedAt).toLocaleString()} by {reportData.generatedBy}\n                        </p>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"space-y-2\">\n                            <h4 className=\"font-medium text-gray-700\">Appointments</h4>\n                            <div className=\"text-sm space-y-1\">\n                              <div className=\"flex justify-between\">\n                                <span>Total:</span>\n                                <span className=\"font-medium\">{reportData.appointments.total}</span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span>Completed:</span>\n                                <span className=\"font-medium text-green-600\">{reportData.appointments.completed}</span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span>Cancelled:</span>\n                                <span className=\"font-medium text-red-600\">{reportData.appointments.cancelled}</span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span>Completion Rate:</span>\n                                <span className=\"font-medium\">{reportData.appointments.completionRate}%</span>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"space-y-2\">\n                            <h4 className=\"font-medium text-gray-700\">Financial</h4>\n                            <div className=\"text-sm space-y-1\">\n                              <div className=\"flex justify-between\">\n                                <span>Gross Revenue:</span>\n                                <span className=\"font-medium text-green-600\">${reportData.financial.grossRevenue}</span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span>Consultation Fees:</span>\n                                <span className=\"font-medium\">${reportData.financial.consultationFees}</span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span>Avg per Patient:</span>\n                                <span className=\"font-medium\">${reportData.financial.averageRevenuePerPatient}</span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n\n                  {/* Patient Flow */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <TrendingUp className=\"w-5 h-5 text-green-500\" />\n                        Patient Flow\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Average Wait Time</span>\n                          <span className=\"font-semibold dark:text-gray-200\">\n                            {queueTokens && queueTokens.length > 0 \n                              ? `${Math.round(queueTokens.reduce((sum, token) => sum + (token.estimatedWaitTime || 0), 0) / queueTokens.length)} min`\n                              : '0 min'\n                            }\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Queue Length</span>\n                          <span className=\"font-semibold dark:text-gray-200\">{queueTokens?.length || 0}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Cancelled Appointments</span>\n                          <span className=\"font-semibold dark:text-gray-200\">\n                            {appointments?.filter(appt => {\n                              const today = new Date();\n                              const apptDate = new Date(appt.appointmentDate);\n                              return apptDate.toDateString() === today.toDateString() && appt.status === 'cancelled';\n                            }).length || 0}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600 dark:text-gray-400\">No-Shows</span>\n                          <span className=\"font-semibold dark:text-gray-200\">\n                            {appointments?.filter(appt => {\n                              const today = new Date();\n                              const apptDate = new Date(appt.appointmentDate);\n                              return apptDate.toDateString() === today.toDateString() && appt.status === 'no-show';\n                            }).length || 0}\n                          </span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Popular Services */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Activity className=\"w-5 h-5 text-purple-500\" />\n                        Popular Services\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        {(() => {\n                          const todayAppts = appointments?.filter(appt => {\n                            const today = new Date();\n                            const apptDate = new Date(appt.appointmentDate);\n                            return apptDate.toDateString() === today.toDateString();\n                          }) || [];\n                          \n                          const serviceTypes = todayAppts.reduce((acc, appt) => {\n                            const type = appt.type === 'home' ? 'Home Visits' : 'Clinic Visits';\n                            acc[type] = (acc[type] || 0) + 1;\n                            return acc;\n                          }, {} as Record<string, number>);\n                          \n                          const total = todayAppts.length;\n                          \n                          return Object.entries(serviceTypes).length > 0 ? \n                            Object.entries(serviceTypes).map(([service, count]) => (\n                              <div key={service} className=\"flex justify-between items-center\">\n                                <span className=\"text-sm text-gray-600 dark:text-gray-400\">{service}</span>\n                                <span className=\"font-semibold dark:text-gray-200\">\n                                  {total > 0 ? Math.round((count / total) * 100) : 0}%\n                                </span>\n                              </div>\n                            )) : (\n                              <div className=\"text-sm text-gray-500 dark:text-gray-400 text-center py-4\">\n                                No service data for today\n                              </div>\n                            );\n                        })()}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* System Status */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Settings className=\"w-5 h-5 text-gray-500\" />\n                        System Status\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Database</span>\n                          <Badge className={`${\n                            appointments ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-300' : \n                            'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-300'\n                          }`}>\n                            {appointments ? 'Online' : 'Offline'}\n                          </Badge>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600 dark:text-gray-400\">SMS Service</span>\n                          <Badge className=\"bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-300\">Active</Badge>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Queue System</span>\n                          <Badge className={`${\n                            queueConnected ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-300' : \n                            'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-300'\n                          }`}>\n                            {queueConnected ? 'Connected' : 'Disconnected'}\n                          </Badge>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Staff Online</span>\n                          <Badge className={`${\n                            presentStaff > 0 ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-300' : \n                            'bg-orange-100 dark:bg-orange-900 text-orange-800 dark:text-orange-300'\n                          }`}>\n                            {presentStaff}/{totalStaff}\n                          </Badge>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            </TabsContent>\n\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Patient History Modal */}\n      <Dialog open={showHistoryModal} onOpenChange={setShowHistoryModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Patient Medical History</DialogTitle>\n          </DialogHeader>\n          {selectedPatient && (\n            <div className=\"space-y-6\">\n              <div className=\"border-b pb-4\">\n                <h3 className=\"text-lg font-semibold\">\n                  {selectedPatient.firstName} {selectedPatient.lastName}\n                </h3>\n                <p className=\"text-gray-600\">{selectedPatient.phoneNumber}</p>\n                <p className=\"text-sm text-gray-500\">\n                  Patient ID: {selectedPatient.id.slice(0, 8)}...\n                </p>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium mb-3\">Recent Appointments</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"p-3 bg-gray-50 rounded-lg\">\n                      <div className=\"font-medium\">Consultation</div>\n                      <div className=\"text-sm text-gray-600\">Dr. Smith • Jan 15, 2024</div>\n                      <div className=\"text-sm\">Routine checkup completed</div>\n                    </div>\n                    <div className=\"p-3 bg-gray-50 rounded-lg\">\n                      <div className=\"font-medium\">Blood Test</div>\n                      <div className=\"text-sm text-gray-600\">Dr. Johnson • Dec 28, 2023</div>\n                      <div className=\"text-sm\">Annual health screening</div>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"font-medium mb-3\">Medical History</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"p-3 bg-blue-50 rounded-lg\">\n                      <div className=\"font-medium text-blue-800\">Hypertension</div>\n                      <div className=\"text-sm text-blue-600\">Diagnosed 2020 • Managed with medication</div>\n                    </div>\n                    <div className=\"p-3 bg-green-50 rounded-lg\">\n                      <div className=\"font-medium text-green-800\">Allergies</div>\n                      <div className=\"text-sm text-green-600\">Penicillin, Peanuts</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium mb-3\">Current Medications</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center p-3 border rounded-lg\">\n                    <div>\n                      <div className=\"font-medium\">Lisinopril 10mg</div>\n                      <div className=\"text-sm text-gray-600\">Once daily - Blood pressure</div>\n                    </div>\n                    <Badge variant=\"outline\">Active</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 border rounded-lg\">\n                    <div>\n                      <div className=\"font-medium\">Metformin 500mg</div>\n                      <div className=\"text-sm text-gray-600\">Twice daily - Diabetes</div>\n                    </div>\n                    <Badge variant=\"outline\">Active</Badge>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Emergency Alert Details Modal */}\n      <Dialog open={showAlertModal} onOpenChange={setShowAlertModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Emergency Alert Details</DialogTitle>\n          </DialogHeader>\n          {selectedAlert && (\n            <div className=\"space-y-4\">\n              <div className={`p-4 rounded-lg border-l-4 ${\n                selectedAlert.priority === 'high' ? 'border-red-500 bg-red-50' :\n                selectedAlert.priority === 'medium' ? 'border-yellow-500 bg-yellow-50' :\n                'border-blue-500 bg-blue-50'\n              }`}>\n                <div className=\"flex items-start justify-between\">\n                  <div>\n                    <h3 className=\"font-semibold text-lg\">{selectedAlert.title}</h3>\n                    <p className=\"text-gray-600 mt-1\">{selectedAlert.message}</p>\n                    <div className=\"flex items-center gap-4 mt-3 text-sm text-gray-500\">\n                      <span>Alert ID: {selectedAlert.id.slice(0, 8)}</span>\n                      <span>Priority: {selectedAlert.priority}</span>\n                      <span>Time: {selectedAlert.timestamp}</span>\n                    </div>\n                  </div>\n                  <Badge className={`${\n                    selectedAlert.priority === 'high' ? 'bg-red-100 text-red-800' :\n                    selectedAlert.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                    'bg-blue-100 text-blue-800'\n                  }`}>\n                    {selectedAlert.priority}\n                  </Badge>\n                </div>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium\">Recommended Actions:</h4>\n                <ul className=\"list-disc list-inside space-y-1 text-sm text-gray-600\">\n                  {selectedAlert.type === 'appointment_delay' && (\n                    <>\n                      <li>Contact affected patients to inform about delays</li>\n                      <li>Adjust appointment schedule if possible</li>\n                      <li>Consider additional staff if pattern continues</li>\n                    </>\n                  )}\n                  {selectedAlert.type === 'staff_missing' && (\n                    <>\n                      <li>Contact missing staff member immediately</li>\n                      <li>Arrange coverage if needed</li>\n                      <li>Update patient schedules if necessary</li>\n                    </>\n                  )}\n                  {selectedAlert.type === 'medicine_low' && (\n                    <>\n                      <li>Order additional stock immediately</li>\n                      <li>Check with other suppliers if primary is unavailable</li>\n                      <li>Inform doctors about current stock levels</li>\n                    </>\n                  )}\n                  {selectedAlert.type === 'high_volume' && (\n                    <>\n                      <li>Add extra staff if available</li>\n                      <li>Extend clinic hours if possible</li>\n                      <li>Set up additional waiting areas</li>\n                    </>\n                  )}\n                  {selectedAlert.type === 'queue_overload' && (\n                    <>\n                      <li>Reduce appointment duration if safe</li>\n                      <li>Add emergency consultation slots</li>\n                      <li>Consider referring non-urgent cases</li>\n                    </>\n                  )}\n                </ul>\n              </div>\n              \n              <div className=\"pt-4 border-t\">\n                <Button\n                  onClick={() => resolveAlert(selectedAlert.id)}\n                  className=\"w-full\"\n                  data-testid={`button-resolve-alert-${selectedAlert.id}`}\n                >\n                  Mark as Resolved\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Add Medicine Dialog */}\n      <Dialog open={isAddMedicineOpen} onOpenChange={setIsAddMedicineOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Add New Medicine</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"medicineName\">Medicine Name *</Label>\n              <Input\n                id=\"medicineName\"\n                value={newMedicine.name}\n                onChange={(e) => setNewMedicine({...newMedicine, name: e.target.value})}\n                placeholder=\"e.g., Paracetamol\"\n                data-testid=\"input-medicine-name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"medicineStrength\">Strength *</Label>\n              <Input\n                id=\"medicineStrength\"\n                value={newMedicine.strength}\n                onChange={(e) => setNewMedicine({...newMedicine, strength: e.target.value})}\n                placeholder=\"e.g., 500mg\"\n                data-testid=\"input-medicine-strength\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"medicineDosageForm\">Dosage Form *</Label>\n              <Select value={newMedicine.dosageForm} onValueChange={(value) => setNewMedicine({...newMedicine, dosageForm: value})}>\n                <SelectTrigger data-testid=\"select-dosage-form\">\n                  <SelectValue placeholder=\"Select dosage form\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Tablet\">Tablet</SelectItem>\n                  <SelectItem value=\"Capsule\">Capsule</SelectItem>\n                  <SelectItem value=\"Syrup\">Syrup</SelectItem>\n                  <SelectItem value=\"Injection\">Injection</SelectItem>\n                  <SelectItem value=\"Cream\">Cream</SelectItem>\n                  <SelectItem value=\"Drops\">Drops</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"medicineManufacturer\">Manufacturer *</Label>\n              <Input\n                id=\"medicineManufacturer\"\n                value={newMedicine.manufacturer}\n                onChange={(e) => setNewMedicine({...newMedicine, manufacturer: e.target.value})}\n                placeholder=\"e.g., MediLabs\"\n                data-testid=\"input-medicine-manufacturer\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"medicineStock\">Initial Stock</Label>\n              <Input\n                id=\"medicineStock\"\n                type=\"number\"\n                min=\"0\"\n                value={newMedicine.stock}\n                onChange={(e) => setNewMedicine({...newMedicine, stock: parseInt(e.target.value) || 0})}\n                placeholder=\"0\"\n                data-testid=\"input-medicine-stock\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"medicineDescription\">Description</Label>\n              <Textarea\n                id=\"medicineDescription\"\n                value={newMedicine.description}\n                onChange={(e) => setNewMedicine({...newMedicine, description: e.target.value})}\n                placeholder=\"Brief description of the medicine\"\n                data-testid=\"textarea-medicine-description\"\n                rows={3}\n              />\n            </div>\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                onClick={handleAddMedicine} \n                className=\"flex-1\"\n                disabled={addMedicineMutation.isPending}\n                data-testid=\"button-submit-add-medicine\"\n              >\n                {addMedicineMutation.isPending ? 'Adding...' : 'Add Medicine'}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setIsAddMedicineOpen(false)}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-add-medicine\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Medicine Dialog */}\n      <Dialog open={isEditMedicineOpen} onOpenChange={setIsEditMedicineOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Medicine</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"editMedicineName\">Medicine Name *</Label>\n              <Input\n                id=\"editMedicineName\"\n                value={newMedicine.name}\n                onChange={(e) => setNewMedicine({...newMedicine, name: e.target.value})}\n                placeholder=\"e.g., Paracetamol\"\n                data-testid=\"input-edit-medicine-name\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"editMedicineStrength\">Strength *</Label>\n              <Input\n                id=\"editMedicineStrength\"\n                value={newMedicine.strength}\n                onChange={(e) => setNewMedicine({...newMedicine, strength: e.target.value})}\n                placeholder=\"e.g., 500mg\"\n                data-testid=\"input-edit-medicine-strength\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"editMedicineDosageForm\">Dosage Form *</Label>\n              <Select value={newMedicine.dosageForm} onValueChange={(value) => setNewMedicine({...newMedicine, dosageForm: value})}>\n                <SelectTrigger data-testid=\"select-edit-dosage-form\">\n                  <SelectValue placeholder=\"Select dosage form\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Tablet\">Tablet</SelectItem>\n                  <SelectItem value=\"Capsule\">Capsule</SelectItem>\n                  <SelectItem value=\"Syrup\">Syrup</SelectItem>\n                  <SelectItem value=\"Injection\">Injection</SelectItem>\n                  <SelectItem value=\"Cream\">Cream</SelectItem>\n                  <SelectItem value=\"Drops\">Drops</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"editMedicineManufacturer\">Manufacturer *</Label>\n              <Input\n                id=\"editMedicineManufacturer\"\n                value={newMedicine.manufacturer}\n                onChange={(e) => setNewMedicine({...newMedicine, manufacturer: e.target.value})}\n                placeholder=\"e.g., MediLabs\"\n                data-testid=\"input-edit-medicine-manufacturer\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"editMedicineStock\">Current Stock</Label>\n              <Input\n                id=\"editMedicineStock\"\n                type=\"number\"\n                min=\"0\"\n                value={newMedicine.stock}\n                onChange={(e) => setNewMedicine({...newMedicine, stock: parseInt(e.target.value) || 0})}\n                placeholder=\"0\"\n                data-testid=\"input-edit-medicine-stock\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"editMedicineDescription\">Description</Label>\n              <Textarea\n                id=\"editMedicineDescription\"\n                value={newMedicine.description}\n                onChange={(e) => setNewMedicine({...newMedicine, description: e.target.value})}\n                placeholder=\"Brief description of the medicine\"\n                data-testid=\"textarea-edit-medicine-description\"\n                rows={3}\n              />\n            </div>\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                onClick={handleUpdateMedicine} \n                className=\"flex-1\"\n                disabled={updateMedicineMutation.isPending}\n                data-testid=\"button-submit-edit-medicine\"\n              >\n                {updateMedicineMutation.isPending ? 'Updating...' : 'Update Medicine'}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setIsEditMedicineOpen(false)}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-edit-medicine\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Restock Medicine Dialog */}\n      <Dialog open={isRestockOpen} onOpenChange={setIsRestockOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Restock Medicine</DialogTitle>\n          </DialogHeader>\n          {selectedMedicine && (\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-gray-50 rounded-lg\">\n                <h3 className=\"font-semibold\">{selectedMedicine.name}</h3>\n                <p className=\"text-sm text-gray-600\">\n                  {selectedMedicine.strength} - {selectedMedicine.dosageForm}\n                </p>\n                <p className=\"text-sm text-gray-500\">\n                  Current Stock: <span className=\"font-medium\">{selectedMedicine.stock || 0} units</span>\n                </p>\n              </div>\n              <div>\n                <Label htmlFor=\"restockAmount\">Restock Amount *</Label>\n                <Input\n                  id=\"restockAmount\"\n                  type=\"number\"\n                  min=\"1\"\n                  value={restockAmount}\n                  onChange={(e) => setRestockAmount(parseInt(e.target.value) || 0)}\n                  placeholder=\"Enter amount to add\"\n                  data-testid=\"input-restock-amount\"\n                />\n                <p className=\"text-sm text-gray-500 mt-1\">\n                  New total will be: {(selectedMedicine.stock || 0) + restockAmount} units\n                </p>\n              </div>\n              <div className=\"flex gap-2 pt-4\">\n                <Button \n                  onClick={handleRestock} \n                  className=\"flex-1\"\n                  disabled={restockMedicineMutation.isPending || restockAmount <= 0}\n                  data-testid=\"button-submit-restock\"\n                >\n                  {restockMedicineMutation.isPending ? 'Restocking...' : 'Restock Medicine'}\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setIsRestockOpen(false)}\n                  className=\"flex-1\"\n                  data-testid=\"button-cancel-restock\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* New Appointment Modal */}\n      <Dialog open={showAppointmentModal} onOpenChange={setShowAppointmentModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Schedule New Appointment</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"newAppointmentPatient\">Patient Name *</Label>\n                <Input\n                  id=\"newAppointmentPatient\"\n                  type=\"text\"\n                  value={appointmentForm.patientName}\n                  onChange={(e) => setAppointmentForm({...appointmentForm, patientName: e.target.value})}\n                  placeholder=\"Enter patient full name\"\n                  data-testid=\"input-new-appointment-patient\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"newAppointmentDoctor\">Select Doctor *</Label>\n                <Select value={appointmentForm.doctorId} onValueChange={(value) => setAppointmentForm({...appointmentForm, doctorId: value})}>\n                  <SelectTrigger data-testid=\"select-new-appointment-doctor\">\n                    <SelectValue placeholder=\"Choose a doctor\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {availableDoctors.map((doctor) => (\n                      <SelectItem key={doctor.id} value={doctor.id}>\n                        {doctor.firstName} {doctor.lastName}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"newAppointmentDate\">Date *</Label>\n                <Input\n                  id=\"newAppointmentDate\"\n                  type=\"date\"\n                  value={appointmentForm.appointmentDate}\n                  onChange={(e) => setAppointmentForm({...appointmentForm, appointmentDate: e.target.value})}\n                  data-testid=\"input-new-appointment-date\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"newAppointmentTime\">Time *</Label>\n                <Input\n                  id=\"newAppointmentTime\"\n                  type=\"time\"\n                  value={appointmentForm.appointmentTime}\n                  onChange={(e) => setAppointmentForm({...appointmentForm, appointmentTime: e.target.value})}\n                  data-testid=\"input-new-appointment-time\"\n                />\n              </div>\n            </div>\n            <div>\n              <Label htmlFor=\"newAppointmentType\">Consultation Type</Label>\n              <Select value={appointmentForm.consultationType} onValueChange={(value) => setAppointmentForm({...appointmentForm, consultationType: value})}>\n                <SelectTrigger data-testid=\"select-new-appointment-type\">\n                  <SelectValue placeholder=\"Select consultation type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"regular\">Regular</SelectItem>\n                  <SelectItem value=\"video-call\">Video Call</SelectItem>\n                  <SelectItem value=\"home-visit\">Home Visit</SelectItem>\n                  <SelectItem value=\"emergency\">Emergency</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"newAppointmentSymptoms\">Symptoms/Notes</Label>\n              <Textarea\n                id=\"newAppointmentSymptoms\"\n                value={appointmentForm.symptoms}\n                onChange={(e) => setAppointmentForm({...appointmentForm, symptoms: e.target.value})}\n                placeholder=\"Describe symptoms or appointment purpose\"\n                data-testid=\"textarea-new-appointment-symptoms\"\n                rows={3}\n              />\n            </div>\n            <div className=\"flex gap-2 pt-4\">\n              <Button \n                onClick={handleAppointmentSubmit} \n                className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                data-testid=\"button-submit-new-appointment\"\n              >\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                Schedule Appointment\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowAppointmentModal(false)}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-new-appointment\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n","size_bytes":259079},"client/src/pages/staff-checkin.tsx":{"content":"'use client'\n\nimport { useState, useEffect } from 'react'\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Badge } from '@/components/ui/badge'\nimport { Separator } from '@/components/ui/separator'\nimport { useToast } from '@/hooks/use-toast'\nimport { MapPin, Clock, CheckCircle, XCircle, Loader2, Navigation } from 'lucide-react'\nimport { apiRequest } from '@/lib/queryClient'\n\ninterface StaffVerification {\n  id: string\n  staffId: string\n  latitude: number\n  longitude: number\n  checkedInAt: string\n  checkedOutAt: string | null\n  workLocation: string\n  isValid: boolean\n}\n\nconst CLINIC_LOCATIONS = [\n  { name: 'Bangalore Central Clinic', description: 'Primary Bangalore healthcare facility' },\n  { name: 'Whitefield Branch', description: 'Eastern Bangalore location' },\n  { name: 'Koramangala Clinic', description: 'South Bangalore branch' },\n  { name: 'Electronic City Clinic', description: 'IT hub location in South Bangalore' },\n  { name: 'Local Test Clinic', description: 'Test clinic near your location' }\n]\n\nexport default function StaffCheckinPage() {\n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n  \n  const [selectedLocation, setSelectedLocation] = useState('')\n  const [currentPosition, setCurrentPosition] = useState<{ lat: number; lng: number } | null>(null)\n  const [locationStatus, setLocationStatus] = useState<'idle' | 'requesting' | 'granted' | 'denied'>('idle')\n  \n  // Get current user\n  const { data: user } = useQuery({\n    queryKey: ['/api/users/me'],\n  })\n\n  // Get staff verifications (check-in history)\n  const { data: verifications, isLoading: verificationsLoading } = useQuery({\n    queryKey: ['/api/staff/verifications'],\n  })\n\n  // Get active verification (currently checked in)\n  const activeVerification = Array.isArray(verifications) ? verifications.find((v: StaffVerification) => !v.checkedOutAt) : null\n\n  // Check-in mutation\n  const checkinMutation = useMutation({\n    mutationFn: async (data: { latitude: number; longitude: number; workLocation: string }) => {\n      const response = await fetch('/api/staff/checkin', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n        },\n        body: JSON.stringify(data)\n      })\n      \n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(error.message || 'Check-in failed')\n      }\n      \n      return response.json()\n    },\n    onSuccess: () => {\n      toast({\n        title: \"✅ Checked In Successfully\",\n        description: \"Your location has been verified and recorded.\"\n      })\n      queryClient.invalidateQueries({ queryKey: ['/api/staff/verifications'] })\n      setSelectedLocation('')\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"❌ Check-in Failed\",\n        description: error.message || \"Unable to verify your location. Please try again.\",\n        variant: \"destructive\"\n      })\n    }\n  })\n\n  // Check-out mutation\n  const checkoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/staff/checkout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n        }\n      })\n      \n      if (!response.ok) {\n        const error = await response.json()\n        throw new Error(error.message || 'Check-out failed')\n      }\n      \n      return response.json()\n    },\n    onSuccess: () => {\n      toast({\n        title: \"✅ Checked Out Successfully\",\n        description: \"Your work session has ended.\"\n      })\n      queryClient.invalidateQueries({ queryKey: ['/api/staff/verifications'] })\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"❌ Check-out Failed\",\n        description: error.message || \"Unable to process check-out. Please try again.\",\n        variant: \"destructive\"\n      })\n    }\n  })\n\n  // Request location permission and get current position\n  const requestLocation = () => {\n    if (!navigator.geolocation) {\n      toast({\n        title: \"❌ Location Not Supported\",\n        description: \"Your browser doesn't support location services.\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    setLocationStatus('requesting')\n    \n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setCurrentPosition({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        })\n        setLocationStatus('granted')\n        toast({\n          title: \"📍 Location Accessed\",\n          description: `Coordinates: ${position.coords.latitude.toFixed(6)}, ${position.coords.longitude.toFixed(6)}`\n        })\n      },\n      (error) => {\n        setLocationStatus('denied')\n        let message = \"Unable to get your location.\"\n        \n        switch(error.code) {\n          case error.PERMISSION_DENIED:\n            message = \"Location access denied. Please enable location permissions.\"\n            break\n          case error.POSITION_UNAVAILABLE:\n            message = \"Location information unavailable.\"\n            break\n          case error.TIMEOUT:\n            message = \"Location request timed out.\"\n            break\n        }\n        \n        toast({\n          title: \"❌ Location Error\",\n          description: message,\n          variant: \"destructive\"\n        })\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 60000\n      }\n    )\n  }\n\n  // Handle check-in\n  const handleCheckin = () => {\n    if (!currentPosition || !selectedLocation) {\n      toast({\n        title: \"❌ Missing Information\",\n        description: \"Please select a work location and grant location access.\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    checkinMutation.mutate({\n      latitude: currentPosition.lat,\n      longitude: currentPosition.lng,\n      workLocation: selectedLocation\n    })\n  }\n\n  // Handle check-out\n  const handleCheckout = () => {\n    checkoutMutation.mutate()\n  }\n\n  // Auto-request location on page load if staff member\n  useEffect(() => {\n    if (user && ((user as any).role === 'staff' || (user as any).role === 'doctor') && locationStatus === 'idle') {\n      // Small delay to ensure UI is rendered\n      setTimeout(() => {\n        requestLocation()\n      }, 1000)\n    }\n  }, [user, locationStatus])\n\n  if (!user || ((user as any).role !== 'staff' && (user as any).role !== 'doctor')) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <XCircle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n            <CardTitle>Access Denied</CardTitle>\n            <CardDescription>\n              Staff check-in is only available for doctors and staff members.\n            </CardDescription>\n          </CardHeader>\n        </Card>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-4xl mx-auto space-y-6\">\n        \n        {/* Header */}\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">Staff Check-In</h1>\n          <p className=\"text-gray-600 mt-2\">\n            GPS-verified workplace attendance for {(user as any).firstName} {(user as any).lastName}\n          </p>\n        </div>\n\n        {/* Current Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"w-5 h-5\" />\n              Current Status\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {activeVerification ? (\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                    ✅ Checked In\n                  </Badge>\n                  <div>\n                    <p className=\"font-medium\">{activeVerification.workLocation}</p>\n                    <p className=\"text-sm text-gray-600\">\n                      Since {new Date(activeVerification.checkedInAt).toLocaleTimeString()}\n                    </p>\n                  </div>\n                </div>\n                <Button \n                  onClick={handleCheckout}\n                  disabled={checkoutMutation.isPending}\n                  variant=\"outline\"\n                >\n                  {checkoutMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                      Checking Out...\n                    </>\n                  ) : (\n                    'Check Out'\n                  )}\n                </Button>\n              </div>\n            ) : (\n              <div className=\"flex items-center gap-3\">\n                <Badge variant=\"secondary\" className=\"bg-gray-100\">\n                  ⭕ Not Checked In\n                </Badge>\n                <p className=\"text-gray-600\">Ready to start your work session</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Check-in Form (only show if not already checked in) */}\n        {!activeVerification && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"w-5 h-5\" />\n                Check In to Work Location\n              </CardTitle>\n              <CardDescription>\n                Select your work location and verify your GPS coordinates\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              \n              {/* Location Access Status */}\n              <div className=\"p-4 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center gap-3 mb-3\">\n                  <Navigation className=\"w-5 h-5\" />\n                  <span className=\"font-medium\">Location Access</span>\n                </div>\n                \n                {locationStatus === 'idle' && (\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-600\">Click to request location access</span>\n                    <Button onClick={requestLocation} variant=\"outline\" size=\"sm\">\n                      <MapPin className=\"w-4 h-4 mr-2\" />\n                      Get Location\n                    </Button>\n                  </div>\n                )}\n                \n                {locationStatus === 'requesting' && (\n                  <div className=\"flex items-center gap-2\">\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    <span className=\"text-blue-600\">Requesting location access...</span>\n                  </div>\n                )}\n                \n                {locationStatus === 'granted' && currentPosition && (\n                  <div className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"w-4 h-4 text-green-600\" />\n                    <span className=\"text-green-600\">\n                      Location obtained: {currentPosition.lat.toFixed(4)}, {currentPosition.lng.toFixed(4)}\n                    </span>\n                  </div>\n                )}\n                \n                {locationStatus === 'denied' && (\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <XCircle className=\"w-4 h-4 text-red-600\" />\n                      <span className=\"text-red-600\">Location access denied</span>\n                    </div>\n                    <Button onClick={requestLocation} variant=\"outline\" size=\"sm\">\n                      Try Again\n                    </Button>\n                  </div>\n                )}\n              </div>\n\n              {/* Work Location Selection */}\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">Select Work Location</label>\n                <Select value={selectedLocation} onValueChange={setSelectedLocation}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Choose your work location\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {CLINIC_LOCATIONS.map((location) => (\n                      <SelectItem key={location.name} value={location.name}>\n                        <div>\n                          <div className=\"font-medium\">{location.name}</div>\n                          <div className=\"text-sm text-gray-500\">{location.description}</div>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Check-in Button */}\n              <Button \n                onClick={handleCheckin}\n                disabled={!currentPosition || !selectedLocation || checkinMutation.isPending}\n                className=\"w-full\"\n                size=\"lg\"\n              >\n                {checkinMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Verifying Location...\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle className=\"w-4 h-4 mr-2\" />\n                    Check In\n                  </>\n                )}\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Check-in History */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Check-ins</CardTitle>\n            <CardDescription>Your GPS-verified work sessions</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {verificationsLoading ? (\n              <div className=\"space-y-3\">\n                {[1, 2, 3].map(i => (\n                  <div key={i} className=\"h-16 bg-gray-100 rounded animate-pulse\"></div>\n                ))}\n              </div>\n            ) : Array.isArray(verifications) && verifications.length > 0 ? (\n              <div className=\"space-y-3\">\n                {verifications.slice(0, 10).map((verification: StaffVerification) => (\n                  <div key={verification.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`w-3 h-3 rounded-full ${verification.isValid ? 'bg-green-500' : 'bg-red-500'}`}></div>\n                      <div>\n                        <p className=\"font-medium\">{verification.workLocation}</p>\n                        <p className=\"text-sm text-gray-600\">\n                          {new Date(verification.checkedInAt).toLocaleDateString()} at {' '}\n                          {new Date(verification.checkedInAt).toLocaleTimeString()}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={verification.checkedOutAt ? \"secondary\" : \"default\"}>\n                        {verification.checkedOutAt ? 'Completed' : 'Active'}\n                      </Badge>\n                      {verification.checkedOutAt && (\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          Checked out: {new Date(verification.checkedOutAt).toLocaleTimeString()}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-6 text-gray-500\">\n                <MapPin className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                <p>No check-in history yet</p>\n                <p className=\"text-sm\">Your verified work sessions will appear here</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n      </div>\n    </div>\n  )\n}","size_bytes":16346},"client/src/pages/patient-booking.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Calendar, Clock, User, MapPin, Video, Home, Stethoscope, Phone, CheckCircle, LogOut } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\n\ninterface Doctor {\n  id: string;\n  firstName: string;\n  lastName: string;\n  phoneNumber: string;\n  specialization?: string;\n  isActive: boolean;\n}\n\nexport default function PatientBooking() {\n  const [step, setStep] = useState(1);\n  const [bookingData, setBookingData] = useState({\n    symptoms: '',\n    appointmentType: '',\n    doctorId: '',\n    preferredDate: '',\n    preferredTime: '',\n    urgency: 'normal',\n    notes: ''\n  });\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const { toast } = useToast();\n\n  // Check authentication and redirect if not logged in\n  useEffect(() => {\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n      window.location.href = '/login';\n      return;\n    }\n  }, []);\n\n  // Get current patient info\n  const { data: currentPatient, isLoading: patientLoading } = useQuery<any>({\n    queryKey: ['/api/users/me'],\n    retry: (failureCount, error) => {\n      if (error && typeof error === 'object' && 'status' in error && error.status === 401) {\n        localStorage.removeItem('auth_token');\n        window.location.href = '/login';\n        return false;\n      }\n      return failureCount < 2;\n    }\n  });\n\n  // Redirect non-patients\n  useEffect(() => {\n    if (currentPatient && currentPatient.role !== 'patient') {\n      if (currentPatient.role === 'admin') {\n        window.location.href = '/admin-dashboard';\n      } else {\n        window.location.href = '/dashboard';\n      }\n    }\n  }, [currentPatient]);\n\n  // Fetch available doctors\n  const { data: doctors = [], isLoading: doctorsLoading } = useQuery<Doctor[]>({\n    queryKey: ['/api/doctors'],\n    enabled: step >= 2\n  });\n\n  // Submit appointment request mutation\n  const submitAppointment = useMutation({\n    mutationFn: async (data: typeof bookingData) => {\n      return apiRequest('/api/appointments/patient-request', {\n        method: 'POST',\n        body: JSON.stringify({\n          doctorId: data.doctorId,\n          type: data.appointmentType,\n          symptoms: data.symptoms,\n          preferredDate: `${data.preferredDate}T${data.preferredTime}:00.000Z`,\n          urgency: data.urgency,\n          notes: data.notes\n        })\n      });\n    },\n    onSuccess: () => {\n      setIsSubmitted(true);\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] });\n      toast({\n        title: \"Appointment Request Submitted!\",\n        description: \"Your appointment request has been sent to the clinic for approval. You'll receive an SMS notification once it's reviewed.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit appointment request. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleLogout = () => {\n    localStorage.removeItem('auth_token');\n    window.location.href = '/login';\n  };\n\n  if (patientLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentPatient) {\n    return null; // Will redirect in useEffect\n  }\n\n  const handleNext = () => {\n    if (step === 1) {\n      // Validate symptoms\n      if (!bookingData.symptoms) {\n        toast({\n          title: \"Required Fields Missing\",\n          description: \"Please describe your symptoms.\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n    }\n    setStep(step + 1);\n  };\n\n  const handleSubmit = () => {\n    if (!bookingData.doctorId || !bookingData.appointmentType || !bookingData.preferredDate || !bookingData.preferredTime) {\n      toast({\n        title: \"Required Fields Missing\",\n        description: \"Please complete all appointment details.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    submitAppointment.mutate(bookingData);\n  };\n\n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"text-center py-8\">\n            <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-green-700 mb-2\">Request Submitted!</h2>\n            <p className=\"text-gray-600 mb-4\">\n              Your appointment request has been sent to the clinic administration for review.\n            </p>\n            <div className=\"bg-blue-50 p-4 rounded-lg mb-4\">\n              <p className=\"text-sm text-blue-700\">\n                <strong>What happens next?</strong><br />\n                • Admin will review your request<br />\n                • You'll get SMS notification when approved<br />\n                • Appointment will be confirmed with date/time\n              </p>\n            </div>\n            <Button onClick={() => {\n              setIsSubmitted(false);\n              setStep(1);\n              setBookingData({\n                patientFirstName: '',\n                patientLastName: '',\n                patientPhone: '',\n                patientEmail: '',\n                dateOfBirth: '',\n                symptoms: '',\n                appointmentType: '',\n                doctorId: '',\n                preferredDate: '',\n                preferredTime: '',\n                urgency: 'normal',\n                notes: ''\n              });\n            }} className=\"w-full\">\n              Book Another Appointment\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Book an Appointment</h1>\n          <p className=\"text-gray-600\">Complete the form below to request an appointment with our healthcare professionals</p>\n        </div>\n\n        {/* Progress Steps */}\n        <div className=\"flex items-center justify-center mb-8\">\n          <div className=\"flex items-center\">\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n              step >= 1 ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-500'\n            }`}>\n              1\n            </div>\n            <div className=\"text-xs ml-2 text-gray-600\">Patient Info</div>\n          </div>\n          <div className={`w-16 h-1 mx-4 ${step >= 2 ? 'bg-blue-600' : 'bg-gray-200'}`}></div>\n          <div className=\"flex items-center\">\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n              step >= 2 ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-500'\n            }`}>\n              2\n            </div>\n            <div className=\"text-xs ml-2 text-gray-600\">Appointment</div>\n          </div>\n          <div className={`w-16 h-1 mx-4 ${step >= 3 ? 'bg-blue-600' : 'bg-gray-200'}`}></div>\n          <div className=\"flex items-center\">\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n              step >= 3 ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-500'\n            }`}>\n              3\n            </div>\n            <div className=\"text-xs ml-2 text-gray-600\">Review</div>\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              {step === 1 && <><User className=\"w-5 h-5\" /> Patient Information</>}\n              {step === 2 && <><Calendar className=\"w-5 h-5\" /> Appointment Details</>}\n              {step === 3 && <><CheckCircle className=\"w-5 h-5\" /> Review & Submit</>}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Step 1: Patient Information */}\n            {step === 1 && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"firstName\">First Name *</Label>\n                    <Input\n                      id=\"firstName\"\n                      value={bookingData.patientFirstName}\n                      onChange={(e) => setBookingData({...bookingData, patientFirstName: e.target.value})}\n                      placeholder=\"Enter your first name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Last Name *</Label>\n                    <Input\n                      id=\"lastName\"\n                      value={bookingData.patientLastName}\n                      onChange={(e) => setBookingData({...bookingData, patientLastName: e.target.value})}\n                      placeholder=\"Enter your last name\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\">Phone Number *</Label>\n                  <Input\n                    id=\"phone\"\n                    value={bookingData.patientPhone}\n                    onChange={(e) => setBookingData({...bookingData, patientPhone: e.target.value})}\n                    placeholder=\"+1234567890\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email (Optional)</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={bookingData.patientEmail}\n                    onChange={(e) => setBookingData({...bookingData, patientEmail: e.target.value})}\n                    placeholder=\"your.email@example.com\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"dob\">Date of Birth (Optional)</Label>\n                  <Input\n                    id=\"dob\"\n                    type=\"date\"\n                    value={bookingData.dateOfBirth}\n                    onChange={(e) => setBookingData({...bookingData, dateOfBirth: e.target.value})}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"symptoms\">Describe Your Symptoms</Label>\n                  <Textarea\n                    id=\"symptoms\"\n                    value={bookingData.symptoms}\n                    onChange={(e) => setBookingData({...bookingData, symptoms: e.target.value})}\n                    placeholder=\"Please describe your symptoms or reason for the appointment...\"\n                    rows={3}\n                  />\n                </div>\n              </div>\n            )}\n\n            {/* Step 2: Appointment Details */}\n            {step === 2 && (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Appointment Type *</Label>\n                  <div className=\"grid grid-cols-3 gap-4 mt-2\">\n                    <div \n                      onClick={() => setBookingData({...bookingData, appointmentType: 'clinic'})}\n                      className={`p-4 border rounded-lg cursor-pointer text-center ${\n                        bookingData.appointmentType === 'clinic' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\n                      }`}\n                    >\n                      <Stethoscope className=\"w-8 h-8 mx-auto mb-2 text-blue-600\" />\n                      <div className=\"font-medium\">In-Clinic</div>\n                      <div className=\"text-xs text-gray-500\">Visit our clinic</div>\n                    </div>\n                    <div \n                      onClick={() => setBookingData({...bookingData, appointmentType: 'home'})}\n                      className={`p-4 border rounded-lg cursor-pointer text-center ${\n                        bookingData.appointmentType === 'home' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\n                      }`}\n                    >\n                      <Home className=\"w-8 h-8 mx-auto mb-2 text-green-600\" />\n                      <div className=\"font-medium\">Home Visit</div>\n                      <div className=\"text-xs text-gray-500\">Doctor visits you</div>\n                    </div>\n                    <div \n                      onClick={() => setBookingData({...bookingData, appointmentType: 'video'})}\n                      className={`p-4 border rounded-lg cursor-pointer text-center ${\n                        bookingData.appointmentType === 'video' ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\n                      }`}\n                    >\n                      <Video className=\"w-8 h-8 mx-auto mb-2 text-purple-600\" />\n                      <div className=\"font-medium\">Video Call</div>\n                      <div className=\"text-xs text-gray-500\">Online consultation</div>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <Label>Select Doctor *</Label>\n                  {doctorsLoading ? (\n                    <div className=\"text-center py-4\">Loading doctors...</div>\n                  ) : (\n                    <div className=\"grid gap-3 mt-2\">\n                      {doctors.map((doctor) => (\n                        <div\n                          key={doctor.id}\n                          onClick={() => setBookingData({...bookingData, doctorId: doctor.id})}\n                          className={`p-4 border rounded-lg cursor-pointer ${\n                            bookingData.doctorId === doctor.id ? 'border-blue-500 bg-blue-50' : 'border-gray-200'\n                          }`}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <div className=\"font-medium\">{doctor.firstName?.startsWith('Dr. ') ? `${doctor.firstName} ${doctor.lastName}` : `Dr. ${doctor.firstName} ${doctor.lastName}`}</div>\n                              <div className=\"text-sm text-gray-500\">{doctor.phoneNumber}</div>\n                              {doctor.specialization && (\n                                <Badge variant=\"outline\" className=\"mt-1\">{doctor.specialization}</Badge>\n                              )}\n                            </div>\n                            {doctor.isActive && (\n                              <Badge className=\"bg-green-100 text-green-800\">Available</Badge>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"date\">Preferred Date *</Label>\n                    <Input\n                      id=\"date\"\n                      type=\"date\"\n                      value={bookingData.preferredDate}\n                      onChange={(e) => setBookingData({...bookingData, preferredDate: e.target.value})}\n                      min={new Date().toISOString().split('T')[0]}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"time\">Preferred Time *</Label>\n                    <Input\n                      id=\"time\"\n                      type=\"time\"\n                      value={bookingData.preferredTime}\n                      onChange={(e) => setBookingData({...bookingData, preferredTime: e.target.value})}\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label>Urgency Level</Label>\n                  <Select value={bookingData.urgency} onValueChange={(value) => setBookingData({...bookingData, urgency: value})}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low - Routine checkup</SelectItem>\n                      <SelectItem value=\"normal\">Normal - Standard appointment</SelectItem>\n                      <SelectItem value=\"high\">High - Need attention soon</SelectItem>\n                      <SelectItem value=\"urgent\">Urgent - Emergency situation</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"notes\">Additional Notes (Optional)</Label>\n                  <Textarea\n                    id=\"notes\"\n                    value={bookingData.notes}\n                    onChange={(e) => setBookingData({...bookingData, notes: e.target.value})}\n                    placeholder=\"Any additional information for the doctor...\"\n                    rows={2}\n                  />\n                </div>\n              </div>\n            )}\n\n            {/* Step 3: Review */}\n            {step === 3 && (\n              <div className=\"space-y-4\">\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <h3 className=\"font-medium mb-3\">Patient Information</h3>\n                  <div className=\"text-sm space-y-1\">\n                    <div><strong>Name:</strong> {bookingData.patientFirstName} {bookingData.patientLastName}</div>\n                    <div><strong>Phone:</strong> {bookingData.patientPhone}</div>\n                    {bookingData.patientEmail && <div><strong>Email:</strong> {bookingData.patientEmail}</div>}\n                    {bookingData.dateOfBirth && <div><strong>Date of Birth:</strong> {bookingData.dateOfBirth}</div>}\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-50 p-4 rounded-lg\">\n                  <h3 className=\"font-medium mb-3\">Appointment Details</h3>\n                  <div className=\"text-sm space-y-1\">\n                    <div><strong>Type:</strong> {bookingData.appointmentType}</div>\n                    <div><strong>Doctor:</strong> Dr. {doctors.find(d => d.id === bookingData.doctorId)?.firstName} {doctors.find(d => d.id === bookingData.doctorId)?.lastName}</div>\n                    <div><strong>Preferred Date:</strong> {bookingData.preferredDate}</div>\n                    <div><strong>Preferred Time:</strong> {bookingData.preferredTime}</div>\n                    <div><strong>Urgency:</strong> {bookingData.urgency}</div>\n                  </div>\n                </div>\n\n                {bookingData.symptoms && (\n                  <div className=\"bg-gray-50 p-4 rounded-lg\">\n                    <h3 className=\"font-medium mb-2\">Symptoms</h3>\n                    <p className=\"text-sm\">{bookingData.symptoms}</p>\n                  </div>\n                )}\n\n                {bookingData.notes && (\n                  <div className=\"bg-gray-50 p-4 rounded-lg\">\n                    <h3 className=\"font-medium mb-2\">Additional Notes</h3>\n                    <p className=\"text-sm\">{bookingData.notes}</p>\n                  </div>\n                )}\n\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <p className=\"text-sm text-blue-700\">\n                    <strong>Important:</strong> This is a request for an appointment. The clinic administration will review your request and contact you to confirm the appointment details.\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {/* Navigation Buttons */}\n            <div className=\"flex gap-4 pt-4\">\n              {step > 1 && (\n                <Button variant=\"outline\" onClick={() => setStep(step - 1)} className=\"flex-1\">\n                  Previous\n                </Button>\n              )}\n              {step < 3 ? (\n                <Button onClick={handleNext} className=\"flex-1\">\n                  Next\n                </Button>\n              ) : (\n                <Button \n                  onClick={handleSubmit} \n                  className=\"flex-1\"\n                  disabled={submitAppointment.isPending}\n                >\n                  {submitAppointment.isPending ? 'Submitting...' : 'Submit Request'}\n                </Button>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":21001},"client/src/pages/patient-login.tsx":{"content":"import React, { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { signInWithGoogle, signInWithEmail } from '@/lib/firebase';\nimport { Mail, Lock, Chrome, LogIn } from 'lucide-react';\n\nexport default function PatientLogin() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const loginWithFirebaseMutation = useMutation({\n    mutationFn: async (firebaseUser: any) => {\n      const response = await apiRequest('POST', '/api/auth/firebase-login', {\n        firebaseUid: firebaseUser.uid,\n        email: firebaseUser.email,\n        name: firebaseUser.displayName || firebaseUser.email?.split('@')[0] || 'Patient'\n      });\n      return await response.json();\n    },\n    onSuccess: (data: any) => {\n      if (data.token && data.user) {\n        localStorage.setItem('auth_token', data.token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        toast({\n          title: \"Login Successful!\",\n          description: \"Welcome back to SmartClinic.\",\n        });\n        \n        // Redirect based on user role\n        if (data.user.role === 'admin') {\n          window.location.href = '/admin-dashboard';\n        } else if (data.user.role === 'staff' || data.user.role === 'doctor') {\n          window.location.href = '/dashboard';\n        } else {\n          window.location.href = '/dashboard';\n        }\n      }\n    },\n    onError: (error: any) => {\n      console.error(\"Firebase login mutation failed:\", error);\n      setIsLoading(false);\n      \n      let errorMessage = \"Authentication failed. Please try again.\";\n      \n      // Check if it's a response error with detailed message\n      if (error.response?.data?.emailNotFound) {\n        errorMessage = \"No account found with this email. Please create an account first, then try logging in with Google.\";\n      } else if (error.response?.data?.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      toast({\n        title: \"Google Login Failed\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleGoogleLogin = async () => {\n    setIsLoading(true);\n    try {\n      const user = await signInWithGoogle();\n      await loginWithFirebaseMutation.mutateAsync(user);\n    } catch (error: any) {\n      let errorMessage = \"Failed to login with Google. Please try again.\";\n      \n      if (error.message?.includes('domain')) {\n        errorMessage = \"Google sign-in is not configured for this domain. Please use email login instead.\";\n      } else if (error.message?.includes('popup')) {\n        errorMessage = \"Popup was blocked. Please allow popups or use email login.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      toast({\n        title: \"Google Login Failed\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleEmailLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!email || !password) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter both email and password.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      // First try Firebase authentication\n      const user = await signInWithEmail(email, password);\n      await loginWithFirebaseMutation.mutateAsync(user);\n    } catch (firebaseError: any) {\n      console.log(\"Firebase login failed, trying database authentication...\");\n      \n      // If Firebase fails, try direct database authentication\n      try {\n        const response = await apiRequest('POST', '/api/auth/login-email', {\n          email,\n          password\n        });\n        const data = await response.json();\n        \n        if (data.token && data.user) {\n          localStorage.setItem('auth_token', data.token);\n          localStorage.setItem('user', JSON.stringify(data.user));\n          toast({\n            title: \"Login Successful!\",\n            description: \"Welcome back to SmartClinic.\",\n          });\n          \n          // Redirect based on user role\n          if (data.user.role === 'admin') {\n            window.location.href = '/admin-dashboard';\n          } else {\n            window.location.href = '/dashboard';\n          }\n        }\n      } catch (dbError: any) {\n        let errorResponse = {};\n        try {\n          if (dbError.response) {\n            errorResponse = await dbError.response.json();\n          }\n        } catch (e) {\n          // If parsing fails, use the error message directly\n        }\n        \n        if (errorResponse.needsPasswordSetup) {\n          toast({\n            title: \"Password Setup Required\",\n            description: \"Your account was created with phone verification. Please set up a password first.\",\n            variant: \"destructive\"\n          });\n          \n          // Show password setup form\n          const newPassword = prompt(\"Set a new password for email login (minimum 6 characters):\");\n          if (newPassword && newPassword.length >= 6) {\n            try {\n              const response = await apiRequest('POST', '/api/auth/set-password', {\n                email,\n                newPassword\n              });\n              \n              toast({\n                title: \"Password Set Successfully!\",\n                description: \"You can now login with your email and password.\",\n              });\n              \n              // Retry login with new password\n              setTimeout(() => {\n                setPassword(newPassword);\n              }, 1000);\n              \n            } catch (setPasswordError: any) {\n              toast({\n                title: \"Failed to Set Password\",\n                description: \"Please try again or contact support.\",\n                variant: \"destructive\"\n              });\n            }\n          }\n        } else {\n          toast({\n            title: \"Login Failed\",\n            description: firebaseError.message || \"Invalid email or password. Please try again.\",\n            variant: \"destructive\"\n          });\n        }\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-xl border-0 bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm\">\n          <CardHeader className=\"text-center pb-4\">\n            <div className=\"mx-auto bg-blue-100 dark:bg-blue-900 w-16 h-16 rounded-full flex items-center justify-center mb-4\">\n              <LogIn className=\"w-8 h-8 text-blue-600 dark:text-blue-400\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-gray-900 dark:text-white\">Patient Login</CardTitle>\n            <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Access your healthcare dashboard</p>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            {/* Google Login Button */}\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"w-full py-3 border-2 hover:bg-gray-50 dark:hover:bg-gray-800\"\n              onClick={handleGoogleLogin}\n              disabled={isLoading}\n              data-testid=\"button-google-login\"\n            >\n              <Chrome className=\"w-5 h-5 mr-2\" />\n              Continue with Google\n            </Button>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t border-gray-300 dark:border-gray-600\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-white dark:bg-gray-900 px-2 text-gray-500\">Or login with email</span>\n              </div>\n            </div>\n\n            {/* Email Login Form */}\n            <form onSubmit={handleEmailLogin} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\">Email Address</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email address\"\n                    className=\"pl-10\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter your password\"\n                    className=\"pl-10\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    required\n                    data-testid=\"input-password\"\n                  />\n                </div>\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full py-3 bg-blue-600 hover:bg-blue-700 text-white\"\n                disabled={isLoading || loginWithFirebaseMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {isLoading || loginWithFirebaseMutation.isPending ? \"Signing In...\" : \"Sign In\"}\n              </Button>\n            </form>\n            \n            <div className=\"text-center pt-4\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Don't have an account?{' '}\n                <a href=\"/patient-signup\" className=\"text-blue-600 hover:text-blue-500 font-medium\">\n                  Create account\n                </a>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":10751},"server/services/email.ts":{"content":"// Email service for sending OTP via email using multiple providers\nimport nodemailer from 'nodemailer';\nimport { Resend } from 'resend';\n\nclass EmailService {\n  private transporter: nodemailer.Transporter | null = null;\n  private resend: Resend | null = null;\n\n  constructor() {\n    this.initializeServices();\n  }\n\n  private async initializeServices() {\n    try {\n      // Try Gmail SMTP first if credentials are available\n      if (process.env.GMAIL_USER && process.env.GMAIL_APP_PASSWORD) {\n        this.transporter = nodemailer.createTransport({\n          service: 'gmail',\n          auth: {\n            user: process.env.GMAIL_USER,\n            pass: process.env.GMAIL_APP_PASSWORD,\n          },\n        });\n        console.log('🔥 EMAIL SERVICE - Initialized with Gmail SMTP (real email delivery to any address)');\n        return;\n      }\n\n      // Try to initialize Resend if API key is available (limited to verified email only)\n      if (process.env.RESEND_API_KEY) {\n        this.resend = new Resend(process.env.RESEND_API_KEY);\n        console.log('🔥 EMAIL SERVICE - Initialized with Resend (limited to 44441100sf@gmail.com only)');\n        return;\n      }\n\n      // Fallback to Ethereal Email for testing\n      const testAccount = await nodemailer.createTestAccount();\n      \n      this.transporter = nodemailer.createTransport({\n        host: 'smtp.ethereal.email',\n        port: 587,\n        secure: false,\n        auth: {\n          user: testAccount.user,\n          pass: testAccount.pass,\n        },\n      });\n\n      console.log('🔥 EMAIL SERVICE - Initialized with Ethereal test account (preview only)');\n    } catch (error) {\n      console.error('🔥 EMAIL SERVICE - Failed to initialize:', error);\n    }\n  }\n\n  async sendOtp(email: string, otp: string): Promise<{ success: boolean; otp?: string; error?: string; previewUrl?: string }> {\n    const emailContent = {\n      subject: 'Your SmartClinic Login Code',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #2563eb; margin: 0;\">SmartClinic</h1>\n            <p style=\"color: #666; margin: 5px 0;\">Healthcare Management System</p>\n          </div>\n          \n          <div style=\"background: #f8fafc; border-radius: 8px; padding: 30px; text-align: center; margin-bottom: 20px;\">\n            <h2 style=\"color: #1e293b; margin-bottom: 20px;\">Your Login Code</h2>\n            <div style=\"background: white; border: 2px solid #e2e8f0; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n              <div style=\"font-size: 32px; font-weight: bold; color: #2563eb; letter-spacing: 8px;\">${otp}</div>\n            </div>\n            <p style=\"color: #64748b; margin: 15px 0;\">Enter this code to complete your login</p>\n            <p style=\"color: #ef4444; font-size: 14px; margin: 10px 0;\">This code expires in 5 minutes</p>\n          </div>\n          \n          <div style=\"border-top: 1px solid #e2e8f0; padding-top: 20px; text-align: center;\">\n            <p style=\"color: #94a3b8; font-size: 12px; margin: 5px 0;\">\n              If you didn't request this code, please ignore this email.\n            </p>\n            <p style=\"color: #94a3b8; font-size: 12px; margin: 5px 0;\">\n              SmartClinic - Your trusted healthcare partner\n            </p>\n          </div>\n        </div>\n      `,\n      text: `Your SmartClinic login code is: ${otp}\\n\\nThis code expires in 5 minutes.\\n\\nIf you didn't request this code, please ignore this email.\\n\\nSmartClinic - Your trusted healthcare partner`\n    };\n\n    try {\n      // Try Gmail SMTP first (works with any email address)\n      if (this.transporter && process.env.GMAIL_USER) {\n        const mailOptions = {\n          from: `\"SmartClinic\" <${process.env.GMAIL_USER}>`,\n          to: email,\n          subject: emailContent.subject,\n          html: emailContent.html,\n          text: emailContent.text\n        };\n\n        const info = await this.transporter.sendMail(mailOptions);\n        console.log(`🔥 EMAIL OTP SERVICE - Gmail SMTP response:`, info);\n        console.log(`🔥 EMAIL OTP SERVICE - Real email sent to ${email} via Gmail SMTP`);\n        console.log(`🔥 EMAIL OTP CODE for ${email}: ${otp}`);\n        return { success: true };\n      }\n\n      // Try Resend (limited to verified email only)\n      if (this.resend && email === '44441100sf@gmail.com') {\n        const { data, error } = await this.resend.emails.send({\n          from: 'SmartClinic <onboarding@resend.dev>',\n          to: [email],\n          subject: emailContent.subject,\n          html: emailContent.html,\n          text: emailContent.text,\n        });\n\n        if (error) {\n          console.error('🔥 RESEND ERROR:', error);\n          throw new Error('Resend failed');\n        }\n\n        console.log(`🔥 EMAIL OTP SERVICE - Real email sent to ${email} via Resend`);\n        return { success: true };\n      }\n\n      // Fallback to Ethereal Email (testing only)\n      if (!this.transporter) {\n        await this.initializeServices();\n      }\n\n      if (!this.transporter) {\n        throw new Error('No email service available');\n      }\n\n      const mailOptions = {\n        from: '\"SmartClinic\" <noreply@smartclinic.com>',\n        to: email,\n        subject: emailContent.subject,\n        html: emailContent.html,\n        text: emailContent.text\n      };\n\n      const info = await this.transporter.sendMail(mailOptions);\n      const previewUrl = nodemailer.getTestMessageUrl(info);\n      \n      console.log(`🔥 EMAIL OTP SERVICE - Test email sent to ${email}`);\n      console.log(`🔥 EMAIL PREVIEW URL: ${previewUrl}`);\n      \n      return { \n        success: true, \n        otp,\n        previewUrl: previewUrl || undefined\n      };\n    } catch (error) {\n      console.error('🔥 EMAIL SERVICE ERROR:', error);\n      \n      // Final fallback: console logging for development\n      console.log(`🔥 EMAIL FALLBACK - OTP for ${email}: ${otp}`);\n      return { \n        success: true, \n        otp,\n        error: 'Email service unavailable, check console for OTP'\n      };\n    }\n  }\n\n  async sendAppointmentApproved(\n    email: string,\n    details: { doctorName: string; appointmentDate: string; appointmentTime: string; clinic?: string }\n  ): Promise<{ success: boolean; error?: string }> {\n    const emailContent = {\n      subject: '✅ Appointment Confirmed - SmartClinic',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #16a34a; margin: 0;\">✅ Appointment Confirmed</h1>\n            <p style=\"color: #666; margin: 5px 0;\">SmartClinic Healthcare Management</p>\n          </div>\n          \n          <div style=\"background: #f0fdf4; border-radius: 8px; padding: 30px; margin-bottom: 20px;\">\n            <h2 style=\"color: #166534; margin-bottom: 20px;\">Your appointment has been confirmed!</h2>\n            <div style=\"color: #15803d; line-height: 1.6;\">\n              <p><strong>Doctor:</strong> ${details.doctorName}</p>\n              <p><strong>Date:</strong> ${details.appointmentDate}</p>\n              <p><strong>Time:</strong> ${details.appointmentTime}</p>\n              ${details.clinic ? `<p><strong>Location:</strong> ${details.clinic}</p>` : ''}\n            </div>\n          </div>\n          \n          <div style=\"background: #fef3c7; border-radius: 8px; padding: 20px; margin-bottom: 20px;\">\n            <p style=\"color: #92400e; margin: 0; font-weight: bold;\">📋 Please bring:</p>\n            <ul style=\"color: #92400e; margin: 10px 0;\">\n              <li>Valid ID or insurance card</li>\n              <li>List of current medications</li>\n              <li>Any relevant medical records</li>\n            </ul>\n          </div>\n          \n          <div style=\"border-top: 1px solid #e2e8f0; padding-top: 20px; text-align: center;\">\n            <p style=\"color: #94a3b8; font-size: 12px;\">SmartClinic - Your trusted healthcare partner</p>\n          </div>\n        </div>\n      `,\n      text: `Appointment Confirmed!\\n\\nYour appointment has been confirmed:\\nDoctor: ${details.doctorName}\\nDate: ${details.appointmentDate}\\nTime: ${details.appointmentTime}\\n\\nPlease bring valid ID and current medications list.\\n\\nSmartClinic - Your trusted healthcare partner`\n    };\n\n    return await this.sendNotificationEmail(email, emailContent);\n  }\n\n  async sendAppointmentRejected(\n    email: string,\n    details: { doctorName: string; reason: string; appointmentId: string }\n  ): Promise<{ success: boolean; error?: string }> {\n    const emailContent = {\n      subject: '❌ Appointment Request Update - SmartClinic',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #dc2626; margin: 0;\">❌ Appointment Request Update</h1>\n            <p style=\"color: #666; margin: 5px 0;\">SmartClinic Healthcare Management</p>\n          </div>\n          \n          <div style=\"background: #fef2f2; border-radius: 8px; padding: 30px; margin-bottom: 20px;\">\n            <h2 style=\"color: #991b1b; margin-bottom: 20px;\">Appointment Request Status</h2>\n            <div style=\"color: #dc2626; line-height: 1.6;\">\n              <p>We regret to inform you that your appointment request with <strong>${details.doctorName}</strong> could not be confirmed at this time.</p>\n              <p><strong>Reason:</strong> ${details.reason}</p>\n            </div>\n          </div>\n          \n          <div style=\"background: #f0f9ff; border-radius: 8px; padding: 20px; margin-bottom: 20px;\">\n            <p style=\"color: #0369a1; margin: 0; font-weight: bold;\">💡 Next Steps:</p>\n            <ul style=\"color: #0369a1; margin: 10px 0;\">\n              <li>Try booking a different time slot</li>\n              <li>Contact us directly for assistance</li>\n              <li>Check for alternative appointment times</li>\n            </ul>\n          </div>\n          \n          <div style=\"border-top: 1px solid #e2e8f0; padding-top: 20px; text-align: center;\">\n            <p style=\"color: #94a3b8; font-size: 12px;\">SmartClinic - Your trusted healthcare partner</p>\n          </div>\n        </div>\n      `,\n      text: `Appointment Request Update\\n\\nWe regret to inform you that your appointment request with ${details.doctorName} could not be confirmed.\\nReason: ${details.reason}\\n\\nPlease try booking a different time slot or contact us directly.\\n\\nSmartClinic - Your trusted healthcare partner`\n    };\n\n    return await this.sendNotificationEmail(email, emailContent);\n  }\n\n  async sendMedicineReminder(\n    email: string,\n    medicineName: string,\n    dosage: string,\n    time: string\n  ): Promise<{ success: boolean; error?: string }> {\n    const emailContent = {\n      subject: '💊 Medicine Reminder - SmartClinic',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #059669; margin: 0;\">💊 Medicine Reminder</h1>\n            <p style=\"color: #666; margin: 5px 0;\">SmartClinic Healthcare Management</p>\n          </div>\n          \n          <div style=\"background: #ecfdf5; border-radius: 8px; padding: 30px; text-align: center; margin-bottom: 20px;\">\n            <h2 style=\"color: #065f46; margin-bottom: 20px;\">Time to take your medicine!</h2>\n            <div style=\"background: white; border: 2px solid #10b981; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n              <div style=\"font-size: 24px; font-weight: bold; color: #059669; margin-bottom: 10px;\">${medicineName}</div>\n              <div style=\"font-size: 16px; color: #047857;\">Dosage: ${dosage}</div>\n              <div style=\"font-size: 14px; color: #065f46; margin-top: 5px;\">Scheduled time: ${time}</div>\n            </div>\n          </div>\n          \n          <div style=\"background: #fef3c7; border-radius: 8px; padding: 20px; margin-bottom: 20px;\">\n            <p style=\"color: #92400e; margin: 0; font-weight: bold;\">⚠️ Important:</p>\n            <p style=\"color: #92400e; margin: 10px 0;\">Take your medicine as prescribed by your doctor. If you have any concerns, please contact your healthcare provider.</p>\n          </div>\n          \n          <div style=\"border-top: 1px solid #e2e8f0; padding-top: 20px; text-align: center;\">\n            <p style=\"color: #94a3b8; font-size: 12px;\">SmartClinic - Your trusted healthcare partner</p>\n          </div>\n        </div>\n      `,\n      text: `Medicine Reminder\\n\\nTime to take your medicine!\\n\\nMedicine: ${medicineName}\\nDosage: ${dosage}\\nScheduled time: ${time}\\n\\nTake your medicine as prescribed. Contact your healthcare provider if you have any concerns.\\n\\nSmartClinic - Your trusted healthcare partner`\n    };\n\n    return await this.sendNotificationEmail(email, emailContent);\n  }\n\n  async sendAppointmentReminder(\n    email: string,\n    doctorName: string,\n    appointmentTime: string,\n    location?: string\n  ): Promise<{ success: boolean; error?: string }> {\n    const emailContent = {\n      subject: '⏰ Upcoming Appointment Reminder - SmartClinic',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #2563eb; margin: 0;\">⏰ Appointment Reminder</h1>\n            <p style=\"color: #666; margin: 5px 0;\">SmartClinic Healthcare Management</p>\n          </div>\n          \n          <div style=\"background: #eff6ff; border-radius: 8px; padding: 30px; margin-bottom: 20px;\">\n            <h2 style=\"color: #1e40af; margin-bottom: 20px;\">You have an upcoming appointment!</h2>\n            <div style=\"color: #1d4ed8; line-height: 1.6;\">\n              <p><strong>Doctor:</strong> ${doctorName}</p>\n              <p><strong>Date & Time:</strong> ${appointmentTime}</p>\n              ${location ? `<p><strong>Location:</strong> ${location}</p>` : ''}\n            </div>\n          </div>\n          \n          <div style=\"background: #fef3c7; border-radius: 8px; padding: 20px; margin-bottom: 20px;\">\n            <p style=\"color: #92400e; margin: 0; font-weight: bold;\">📋 Reminder:</p>\n            <ul style=\"color: #92400e; margin: 10px 0;\">\n              <li>Arrive 15 minutes early</li>\n              <li>Bring valid ID and insurance card</li>\n              <li>Bring list of current medications</li>\n            </ul>\n          </div>\n          \n          <div style=\"border-top: 1px solid #e2e8f0; padding-top: 20px; text-align: center;\">\n            <p style=\"color: #94a3b8; font-size: 12px;\">SmartClinic - Your trusted healthcare partner</p>\n          </div>\n        </div>\n      `,\n      text: `Appointment Reminder\\n\\nYou have an upcoming appointment!\\n\\nDoctor: ${doctorName}\\nDate & Time: ${appointmentTime}\\n${location ? `Location: ${location}\\n` : ''}\\nReminder: Arrive 15 minutes early and bring valid ID.\\n\\nSmartClinic - Your trusted healthcare partner`\n    };\n\n    return await this.sendNotificationEmail(email, emailContent);\n  }\n\n  async sendDelayNotification(\n    email: string,\n    delayMinutes: number,\n    reason?: string\n  ): Promise<{ success: boolean; error?: string }> {\n    const emailContent = {\n      subject: '⏱️ Appointment Delay Notification - SmartClinic',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #f59e0b; margin: 0;\">⏱️ Appointment Delay</h1>\n            <p style=\"color: #666; margin: 5px 0;\">SmartClinic Healthcare Management</p>\n          </div>\n          \n          <div style=\"background: #fef3c7; border-radius: 8px; padding: 30px; margin-bottom: 20px;\">\n            <h2 style=\"color: #92400e; margin-bottom: 20px;\">Your appointment is running late</h2>\n            <div style=\"color: #92400e; line-height: 1.6;\">\n              <p><strong>Expected delay:</strong> ${delayMinutes} minutes</p>\n              ${reason ? `<p><strong>Reason:</strong> ${reason}</p>` : ''}\n              <p>We apologize for any inconvenience and appreciate your patience.</p>\n            </div>\n          </div>\n          \n          <div style=\"background: #f0f9ff; border-radius: 8px; padding: 20px; margin-bottom: 20px;\">\n            <p style=\"color: #0369a1; margin: 0; font-weight: bold;\">💡 What you can do:</p>\n            <ul style=\"color: #0369a1; margin: 10px 0;\">\n              <li>Stay in the waiting area</li>\n              <li>Contact reception if you need to reschedule</li>\n              <li>Use this time to relax or catch up on reading</li>\n            </ul>\n          </div>\n          \n          <div style=\"border-top: 1px solid #e2e8f0; padding-top: 20px; text-align: center;\">\n            <p style=\"color: #94a3b8; font-size: 12px;\">SmartClinic - Your trusted healthcare partner</p>\n          </div>\n        </div>\n      `,\n      text: `Appointment Delay Notification\\n\\nYour appointment is running late by approximately ${delayMinutes} minutes.\\n${reason ? `Reason: ${reason}\\n` : ''}\\nWe apologize for the inconvenience and appreciate your patience.\\n\\nSmartClinic - Your trusted healthcare partner`\n    };\n\n    return await this.sendNotificationEmail(email, emailContent);\n  }\n\n  async sendClinicRegistrationNotification(\n    clinicData: any, \n    adminData: any\n  ): Promise<{ success: boolean; error?: string }> {\n    const emailContent = {\n      subject: '🏥 New Clinic Registration - SmartClinic',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #2563eb; margin: 0;\">🏥 New Clinic Registration</h1>\n            <p style=\"color: #666; margin: 5px 0;\">SmartClinic Healthcare Management</p>\n          </div>\n          \n          <div style=\"background: #f8fafc; border-radius: 8px; padding: 30px; margin-bottom: 20px;\">\n            <h2 style=\"color: #1e293b; margin-bottom: 20px;\">Clinic Details</h2>\n            <div style=\"color: #374151; line-height: 1.6;\">\n              <p><strong>Clinic Name:</strong> ${clinicData.name}</p>\n              <p><strong>Address:</strong> ${clinicData.address}</p>\n              <p><strong>Phone:</strong> ${clinicData.phoneNumber}</p>\n              <p><strong>Email:</strong> ${clinicData.email}</p>\n              <p><strong>Registration Time:</strong> ${new Date().toLocaleString()}</p>\n            </div>\n          </div>\n          \n          <div style=\"background: #fef3c7; border-radius: 8px; padding: 30px; margin-bottom: 20px;\">\n            <h2 style=\"color: #92400e; margin-bottom: 20px;\">Admin Contact Details</h2>\n            <div style=\"color: #92400e; line-height: 1.6;\">\n              <p><strong>Name:</strong> ${adminData.firstName} ${adminData.lastName}</p>\n              <p><strong>Phone:</strong> ${adminData.phoneNumber}</p>\n              <p><strong>Email:</strong> ${adminData.email}</p>\n            </div>\n          </div>\n          \n          <div style=\"border-top: 1px solid #e2e8f0; padding-top: 20px; text-align: center;\">\n            <p style=\"color: #94a3b8; font-size: 12px;\">Please review and approve this clinic registration in the admin dashboard.</p>\n          </div>\n        </div>\n      `,\n      text: `New Clinic Registration!\\n\\nClinic Details:\\nName: ${clinicData.name}\\nAddress: ${clinicData.address}\\nPhone: ${clinicData.phoneNumber}\\nEmail: ${clinicData.email}\\nRegistration Time: ${new Date().toLocaleString()}\\n\\nAdmin Contact:\\nName: ${adminData.firstName} ${adminData.lastName}\\nPhone: ${adminData.phoneNumber}\\nEmail: ${adminData.email}\\n\\nPlease review and approve this clinic registration in the admin dashboard.`\n    };\n\n    return await this.sendNotificationEmail('44441100sf@gmail.com', emailContent);\n  }\n\n  private async sendNotificationEmail(\n    email: string,\n    emailContent: { subject: string; html: string; text: string }\n  ): Promise<{ success: boolean; error?: string }> {\n    try {\n      // Try Gmail SMTP first (works with any email address)\n      if (this.transporter && process.env.GMAIL_USER) {\n        const mailOptions = {\n          from: `\"SmartClinic\" <${process.env.GMAIL_USER}>`,\n          to: email,\n          subject: emailContent.subject,\n          html: emailContent.html,\n          text: emailContent.text\n        };\n\n        const info = await this.transporter.sendMail(mailOptions);\n        console.log(`🔥 EMAIL NOTIFICATION - Real email sent to ${email} via Gmail SMTP`);\n        return { success: true };\n      }\n\n      // Try Resend (limited to verified email only)\n      if (this.resend && email === '44441100sf@gmail.com') {\n        const { data, error } = await this.resend.emails.send({\n          from: 'SmartClinic <onboarding@resend.dev>',\n          to: [email],\n          subject: emailContent.subject,\n          html: emailContent.html,\n          text: emailContent.text,\n        });\n\n        if (error) {\n          console.error('🔥 RESEND ERROR:', error);\n          throw new Error('Resend failed');\n        }\n\n        console.log(`🔥 EMAIL NOTIFICATION - Real email sent to ${email} via Resend`);\n        return { success: true };\n      }\n\n      // Fallback to Ethereal Email (testing only)\n      if (!this.transporter) {\n        await this.initializeServices();\n      }\n\n      if (!this.transporter) {\n        throw new Error('No email service available');\n      }\n\n      const mailOptions = {\n        from: '\"SmartClinic\" <noreply@smartclinic.com>',\n        to: email,\n        subject: emailContent.subject,\n        html: emailContent.html,\n        text: emailContent.text\n      };\n\n      const info = await this.transporter.sendMail(mailOptions);\n      const previewUrl = nodemailer.getTestMessageUrl(info);\n      \n      console.log(`🔥 EMAIL NOTIFICATION - Test email sent to ${email}`);\n      console.log(`🔥 EMAIL PREVIEW URL: ${previewUrl}`);\n      \n      return { success: true };\n    } catch (error) {\n      console.error('🔥 EMAIL NOTIFICATION ERROR:', error);\n      \n      // Final fallback: console logging for development\n      console.log(`🔥 EMAIL FALLBACK - Notification for ${email}: ${emailContent.subject}`);\n      return { \n        success: true,\n        error: 'Email service unavailable, check console for notification'\n      };\n    }\n  }\n\n  async sendAppointmentRescheduled(\n    email: string,\n    details: {\n      doctorName: string;\n      originalDate: string;\n      originalTime: string;\n      newDate: string;\n      newTime: string;\n      clinic?: string;\n    }\n  ): Promise<{ success: boolean; error?: string }> {\n    const emailContent = {\n      subject: '📅 Appointment Rescheduled - SmartClinic',\n      html: `<div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"text-align: center; margin-bottom: 30px;\">\n          <h1 style=\"color: #f59e0b; margin: 0;\">📅 Appointment Rescheduled</h1>\n          <p style=\"color: #6b7280; margin: 10px 0;\">Your appointment has been moved to a new time</p>\n        </div>\n        \n        <div style=\"background-color: #fff7ed; border: 1px solid #fed7aa; border-radius: 8px; padding: 20px; margin-bottom: 20px;\">\n          <h2 style=\"color: #ea580c; margin: 0 0 15px 0; font-size: 18px;\">Rescheduled Appointment Details</h2>\n          \n          <div style=\"margin-bottom: 20px;\">\n            <h3 style=\"color: #dc2626; margin: 0 0 10px 0; font-size: 16px;\">❌ Previous Appointment (Cancelled)</h3>\n            <div style=\"background-color: #fee2e2; padding: 15px; border-radius: 6px; border-left: 4px solid #dc2626;\">\n              <p style=\"margin: 5px 0;\"><strong>Doctor:</strong> ${details.doctorName}</p>\n              <p style=\"margin: 5px 0;\"><strong>Date:</strong> ${details.originalDate}</p>\n              <p style=\"margin: 5px 0;\"><strong>Time:</strong> ${details.originalTime}</p>\n              <p style=\"margin: 5px 0;\"><strong>Location:</strong> ${details.clinic || 'SmartClinic'}</p>\n            </div>\n          </div>\n          \n          <div>\n            <h3 style=\"color: #16a34a; margin: 0 0 10px 0; font-size: 16px;\">✅ New Appointment Details</h3>\n            <div style=\"background-color: #dcfce7; padding: 15px; border-radius: 6px; border-left: 4px solid #16a34a;\">\n              <p style=\"margin: 5px 0;\"><strong>Doctor:</strong> ${details.doctorName}</p>\n              <p style=\"margin: 5px 0;\"><strong>New Date:</strong> ${details.newDate}</p>\n              <p style=\"margin: 5px 0;\"><strong>New Time:</strong> ${details.newTime}</p>\n              <p style=\"margin: 5px 0;\"><strong>Location:</strong> ${details.clinic || 'SmartClinic'}</p>\n            </div>\n          </div>\n        </div>\n        \n        <div style=\"background-color: #eff6ff; border: 1px solid #bfdbfe; border-radius: 8px; padding: 20px; margin-bottom: 20px;\">\n          <h3 style=\"color: #1d4ed8; margin: 0 0 10px 0;\">📋 Important Notes:</h3>\n          <ul style=\"color: #374151; margin: 0; padding-left: 20px;\">\n            <li>Please arrive 15 minutes before your new appointment time</li>\n            <li>Bring your ID and any relevant medical documents</li>\n            <li>If you need to reschedule again, please contact us at least 24 hours in advance</li>\n            <li>Contact reception if you have any questions about this change</li>\n          </ul>\n        </div>\n        \n        <div style=\"text-align: center; padding: 20px; background-color: #f9fafb; border-radius: 8px;\">\n          <p style=\"color: #6b7280; margin: 0; font-size: 14px;\">Thank you for your understanding!</p>\n          <p style=\"color: #6b7280; margin: 5px 0 0 0; font-size: 14px;\">— SmartClinic Team</p>\n        </div>\n      </div>`,\n      text: `Appointment Rescheduled - SmartClinic\\n\\nYour appointment has been moved to a new time:\\n\\nPrevious Appointment (Cancelled):\\nDoctor: ${details.doctorName}\\nDate: ${details.originalDate}\\nTime: ${details.originalTime}\\nLocation: ${details.clinic || 'SmartClinic'}\\n\\nNew Appointment Details:\\nDoctor: ${details.doctorName}\\nNew Date: ${details.newDate}\\nNew Time: ${details.newTime}\\nLocation: ${details.clinic || 'SmartClinic'}\\n\\nImportant Notes:\\n- Please arrive 15 minutes before your new appointment time\\n- Bring your ID and any relevant medical documents\\n- If you need to reschedule again, please contact us at least 24 hours in advance\\n- Contact reception if you have any questions about this change\\n\\nThank you for your understanding!\\n— SmartClinic Team`\n    };\n\n    return await this.sendNotificationEmail(email, emailContent);\n  }\n}\n\nexport const emailService = new EmailService();","size_bytes":26961},"client/src/pages/patient-booking-new.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Calendar, Clock, User, MapPin, Video, Home, Stethoscope, Phone, CheckCircle, LogOut } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\n\ninterface Doctor {\n  id: string;\n  firstName: string;\n  lastName: string;\n  phoneNumber: string;\n  specialization?: string;\n  isActive: boolean;\n}\n\nexport default function PatientBooking() {\n  const [step, setStep] = useState(1);\n  const [bookingData, setBookingData] = useState({\n    symptoms: '',\n    appointmentType: '',\n    doctorId: '',\n    preferredDate: '',\n    preferredTime: '',\n    urgency: 'normal',\n    notes: ''\n  });\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const { toast } = useToast();\n\n  // Check authentication and redirect if not logged in\n  useEffect(() => {\n    const token = localStorage.getItem('auth_token');\n    if (!token) {\n      window.location.href = '/login';\n      return;\n    }\n  }, []);\n\n  // Get current patient info\n  const { data: currentPatient, isLoading: patientLoading } = useQuery<any>({\n    queryKey: ['/api/users/me'],\n    retry: (failureCount, error) => {\n      if (error && typeof error === 'object' && 'status' in error && error.status === 401) {\n        localStorage.removeItem('auth_token');\n        window.location.href = '/login';\n        return false;\n      }\n      return failureCount < 2;\n    }\n  });\n\n  // Redirect non-patients\n  useEffect(() => {\n    if (currentPatient && currentPatient.role !== 'patient') {\n      if (currentPatient.role === 'admin') {\n        window.location.href = '/admin-dashboard';\n      } else {\n        window.location.href = '/dashboard';\n      }\n    }\n  }, [currentPatient]);\n\n  // Fetch available doctors\n  const { data: doctors = [], isLoading: doctorsLoading } = useQuery<Doctor[]>({\n    queryKey: ['/api/doctors'],\n    enabled: step >= 2\n  });\n\n  // Submit appointment request mutation\n  const submitAppointment = useMutation({\n    mutationFn: async (data: typeof bookingData) => {\n      return apiRequest('POST', '/api/appointments/patient-request', {\n        doctorId: data.doctorId,\n        type: data.appointmentType,\n        symptoms: data.symptoms,\n        preferredDate: `${data.preferredDate}T${data.preferredTime}:00.000Z`,\n        urgency: data.urgency,\n        notes: data.notes\n      });\n    },\n    onSuccess: () => {\n      setIsSubmitted(true);\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] });\n      toast({\n        title: \"Appointment Request Submitted!\",\n        description: \"Your appointment request has been submitted for admin approval. You'll receive an SMS notification once reviewed.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to submit appointment request. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleLogout = () => {\n    localStorage.removeItem('auth_token');\n    window.location.href = '/login';\n  };\n\n  if (patientLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentPatient) {\n    return null; // Will redirect in useEffect\n  }\n\n  const handleNext = () => {\n    if (step === 1) {\n      // Validate symptoms\n      if (!bookingData.symptoms) {\n        toast({\n          title: \"Required Fields Missing\",\n          description: \"Please describe your symptoms.\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n    }\n    setStep(step + 1);\n  };\n\n  const handleSubmit = () => {\n    if (!bookingData.doctorId || !bookingData.appointmentType || !bookingData.preferredDate || !bookingData.preferredTime) {\n      toast({\n        title: \"Required Fields Missing\",\n        description: \"Please complete all appointment details.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    submitAppointment.mutate(bookingData);\n  };\n\n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"text-center py-8\">\n            <CheckCircle className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n            <h2 className=\"text-2xl font-bold text-green-700 mb-2\">Request Submitted!</h2>\n            <p className=\"text-gray-600 mb-4\">\n              Your appointment request has been sent to the clinic administration for review.\n            </p>\n            <div className=\"bg-blue-50 p-4 rounded-lg mb-4\">\n              <p className=\"text-sm text-blue-700\">\n                <strong>What happens next?</strong><br />\n                • Admin will review your request<br />\n                • You'll get SMS notification when approved<br />\n                • Appointment will be confirmed with date/time\n              </p>\n            </div>\n            <Button onClick={() => {\n              setIsSubmitted(false);\n              setStep(1);\n              setBookingData({\n                symptoms: '',\n                appointmentType: '',\n                doctorId: '',\n                preferredDate: '',\n                preferredTime: '',\n                urgency: 'normal',\n                notes: ''\n              });\n            }} className=\"w-full\">\n              Book Another Appointment\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header with Patient Info & Logout */}\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Book Your Appointment</h1>\n            <p className=\"text-gray-600\">Welcome, {currentPatient.firstName} {currentPatient.lastName}</p>\n          </div>\n          <Button variant=\"outline\" onClick={handleLogout} className=\"flex items-center gap-2\">\n            <LogOut className=\"w-4 h-4\" />\n            Logout\n          </Button>\n        </div>\n\n        {/* Progress Steps */}\n        <div className=\"flex justify-center mb-8\">\n          <div className=\"flex items-center space-x-4\">\n            {[1, 2, 3].map((stepNum) => (\n              <div key={stepNum} className=\"flex items-center\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                  step >= stepNum \n                    ? 'bg-blue-600 text-white' \n                    : 'bg-gray-200 text-gray-600'\n                }`}>\n                  {stepNum}\n                </div>\n                {stepNum < 3 && (\n                  <div className={`w-16 h-1 mx-2 ${\n                    step > stepNum ? 'bg-blue-600' : 'bg-gray-200'\n                  }`} />\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <Card className=\"max-w-2xl mx-auto\">\n          <CardHeader>\n            <CardTitle>\n              {step === 1 && \"Tell us your symptoms\"}\n              {step === 2 && \"Choose your doctor\"}\n              {step === 3 && \"Select appointment details\"}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {step === 1 && (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"symptoms\">Describe your symptoms *</Label>\n                  <Textarea\n                    id=\"symptoms\"\n                    placeholder=\"Please describe what symptoms you're experiencing...\"\n                    value={bookingData.symptoms}\n                    onChange={(e) => setBookingData({...bookingData, symptoms: e.target.value})}\n                    rows={4}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"urgency\">Urgency Level</Label>\n                  <Select value={bookingData.urgency} onValueChange={(value) => setBookingData({...bookingData, urgency: value})}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"low\">Low - Routine check-up</SelectItem>\n                      <SelectItem value=\"normal\">Normal - General concern</SelectItem>\n                      <SelectItem value=\"high\">High - Urgent care needed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <Button onClick={handleNext} className=\"w-full\">\n                  Continue to Doctor Selection\n                </Button>\n              </div>\n            )}\n\n            {step === 2 && (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Select Your Doctor</Label>\n                  {doctorsLoading ? (\n                    <div className=\"text-center py-4\">Loading doctors...</div>\n                  ) : (\n                    <div className=\"grid gap-3 mt-2\">\n                      {doctors.map((doctor) => (\n                        <div\n                          key={doctor.id}\n                          className={`p-4 border rounded-lg cursor-pointer transition-all ${\n                            bookingData.doctorId === doctor.id\n                              ? 'border-blue-500 bg-blue-50'\n                              : 'border-gray-200 hover:border-gray-300'\n                          }`}\n                          onClick={() => setBookingData({...bookingData, doctorId: doctor.id})}\n                        >\n                          <div className=\"flex items-center gap-3\">\n                            <Stethoscope className=\"w-5 h-5 text-blue-500\" />\n                            <div>\n                              <p className=\"font-medium\">{doctor.firstName?.startsWith('Dr. ') ? `${doctor.firstName} ${doctor.lastName}` : `Dr. ${doctor.firstName} ${doctor.lastName}`}</p>\n                              <p className=\"text-sm text-gray-600\">{doctor.specialization || 'General Practitioner'}</p>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n                <div className=\"flex gap-3\">\n                  <Button variant=\"outline\" onClick={() => setStep(1)} className=\"flex-1\">\n                    Back\n                  </Button>\n                  <Button onClick={handleNext} disabled={!bookingData.doctorId} className=\"flex-1\">\n                    Continue to Details\n                  </Button>\n                </div>\n              </div>\n            )}\n\n            {step === 3 && (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Appointment Type</Label>\n                  <div className=\"grid grid-cols-3 gap-3 mt-2\">\n                    {[\n                      { value: 'clinic', label: 'Clinic Visit', icon: MapPin },\n                      { value: 'home_visit', label: 'Home Visit', icon: Home },\n                      { value: 'telehealth', label: 'Video Call', icon: Video }\n                    ].map(({ value, label, icon: Icon }) => (\n                      <div\n                        key={value}\n                        className={`p-4 border rounded-lg cursor-pointer text-center transition-all ${\n                          bookingData.appointmentType === value\n                            ? 'border-blue-500 bg-blue-50'\n                            : 'border-gray-200 hover:border-gray-300'\n                        }`}\n                        onClick={() => setBookingData({...bookingData, appointmentType: value})}\n                      >\n                        <Icon className=\"w-6 h-6 mx-auto mb-2 text-blue-500\" />\n                        <p className=\"text-sm font-medium\">{label}</p>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"preferredDate\">Preferred Date</Label>\n                    <Input\n                      id=\"preferredDate\"\n                      type=\"date\"\n                      value={bookingData.preferredDate}\n                      onChange={(e) => setBookingData({...bookingData, preferredDate: e.target.value})}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"preferredTime\">Preferred Time</Label>\n                    <Input\n                      id=\"preferredTime\"\n                      type=\"time\"\n                      value={bookingData.preferredTime}\n                      onChange={(e) => setBookingData({...bookingData, preferredTime: e.target.value})}\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"notes\">Additional Notes (Optional)</Label>\n                  <Textarea\n                    id=\"notes\"\n                    placeholder=\"Any additional information or special requests...\"\n                    value={bookingData.notes}\n                    onChange={(e) => setBookingData({...bookingData, notes: e.target.value})}\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button variant=\"outline\" onClick={() => setStep(2)} className=\"flex-1\">\n                    Back\n                  </Button>\n                  <Button \n                    onClick={handleSubmit} \n                    disabled={submitAppointment.isPending}\n                    className=\"flex-1\"\n                  >\n                    {submitAppointment.isPending ? 'Submitting...' : 'Submit Request'}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":14757},"client/src/pages/live-queue.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQueueSocket } from \"@/hooks/useQueueSocket\";\nimport { \n  Activity, \n  Clock, \n  ArrowLeft, \n  Users, \n  AlertCircle,\n  RefreshCw\n} from \"lucide-react\";\n\nexport default function LiveQueueTracker() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [user, setUser] = useState<any>(null);\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"auth_token\");\n    const userData = localStorage.getItem(\"user\");\n    \n    if (!token || !userData) {\n      setLocation(\"/login\");\n      return;\n    }\n    \n    setUser(JSON.parse(userData));\n  }, [setLocation]);\n\n  // Update current time every second for real-time calculations\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  // Calculate dynamic wait time based on creation time and position\n  const calculateDynamicWaitTime = (queueToken: any, position: number): number => {\n    if (!queueToken?.createdAt) return 0;\n    \n    const createdAt = new Date(queueToken.createdAt);\n    const elapsedMinutes = Math.floor((currentTime.getTime() - createdAt.getTime()) / (1000 * 60));\n    \n    // Average consultation time per patient (15 minutes)\n    const averageConsultationTime = 15;\n    \n    // Calculate initial wait time based on queue position\n    const baseWaitTime = (position - 1) * averageConsultationTime;\n    \n    // Subtract elapsed time to get remaining wait time\n    const remainingWaitTime = Math.max(0, baseWaitTime - elapsedMinutes);\n    \n    return remainingWaitTime;\n  };\n\n  // Get patient's queue position\n  const { data: currentQueuePosition } = useQuery({\n    queryKey: [\"/api/queue/position\"],\n    enabled: !!user && (user.role === \"patient\" || user.role === \"admin\"),\n    refetchInterval: 3000,\n  });\n\n  // Get admin queue data for full queue view\n  const { data: adminQueue = [] } = useQuery({\n    queryKey: [\"/api/queue/admin\"], \n    refetchInterval: 3000,\n    retry: false,\n  });\n\n  // Use WebSocket for real-time queue updates\n  const { queuePosition: liveQueuePosition, isConnected: queueConnected } = useQueueSocket(\n    user?.id,\n    false // Not admin mode for this view\n  );\n\n  // Use live queue position if available, otherwise fallback to API data\n  const queuePosition = liveQueuePosition || currentQueuePosition || null;\n\n  // Remove duplicates and filter queue data\n  const queueArray = Array.isArray(adminQueue) ? \n    adminQueue.filter((token: any, index: number, array: any[]) => \n      array.findIndex(t => t.id === token.id) === index\n    ) : [];\n    \n  // Find the first patient in queue (lowest token number) as currently serving\n  const sortedQueue = queueArray.filter((token: any) => token.status === 'waiting' || token.status === 'called' || token.status === 'in_progress')\n    .sort((a: any, b: any) => a.tokenNumber - b.tokenNumber);\n  const currentlyServing = sortedQueue[0]; // First patient is being served\n  const waitingQueue = sortedQueue.slice(1); // Rest are waiting\n\n  // Real-time countdown state\n  const [countdown, setCountdown] = useState(0);\n\n  // Calculate the current user's queue position for dynamic wait time\n  const currentUserPosition = queuePosition?.tokenNumber ? \n    waitingQueue.findIndex((token: any) => token.tokenNumber === queuePosition.tokenNumber) + 1 : 0;\n  \n  // Use server's calculated wait time as primary source\n  const serverWaitTime = queuePosition?.estimatedWaitTime || 0;\n  \n  // If we have valid queue position data, use server time, otherwise try to calculate\n  const baseWaitTime = serverWaitTime > 0 ? \n    serverWaitTime : \n    (queuePosition?.createdAt && currentUserPosition > 0 ? \n      calculateDynamicWaitTime(queuePosition, currentUserPosition) : 0);\n\n  // Real-time countdown effect\n  useEffect(() => {\n    if (baseWaitTime > 0) {\n      setCountdown(baseWaitTime);\n      \n      const interval = setInterval(() => {\n        setCountdown(prev => {\n          const newValue = Math.max(0, prev - (1/60)); // Decrease by 1 second (1/60 minute)\n          return Math.round(newValue * 10) / 10; // Round to 1 decimal place\n        });\n      }, 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [baseWaitTime]);\n\n  const dynamicWaitTime = Math.ceil(countdown); // Round up for display\n\n  const refreshQueue = () => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/queue/position\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/queue/admin\"] });\n    toast({\n      title: \"Queue Refreshed\",\n      description: \"Queue information has been updated.\",\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 dark:from-gray-900 dark:via-blue-900 dark:to-indigo-900\">\n      <div className=\"container mx-auto px-4 py-6 max-w-4xl\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center gap-3\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setLocation(\"/dashboard\")}\n              className=\"flex items-center gap-2\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              Back to Dashboard\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white flex items-center gap-2\">\n                <Activity className=\"w-6 h-6 text-blue-500\" />\n                Live Queue Tracker\n              </h1>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Real-time queue status and position tracking\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {queueConnected && (\n              <Badge className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse\"></div>\n                Live Connected\n              </Badge>\n            )}\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={refreshQueue}\n              className=\"flex items-center gap-2\"\n            >\n              <RefreshCw className=\"w-4 h-4\" />\n              Refresh\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Your Position Card */}\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"w-5 h-5 text-blue-500\" />\n                Your Queue Position\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg p-8 text-center\">\n                <div className=\"text-sm mb-2 opacity-90\">\n                  Queue Position\n                  {queueConnected && <span className=\"ml-2 text-green-300\">● Live</span>}\n                </div>\n                <div className=\"text-5xl font-bold mb-2\">\n                  #{queuePosition?.tokenNumber || 'N/A'}\n                </div>\n                <div className=\"text-lg mb-4 opacity-90\">\n                  Estimated wait: {dynamicWaitTime > 0 ? `${dynamicWaitTime} minutes` : 'Your turn soon'}\n                  {dynamicWaitTime > 0 && (\n                    <div className=\"text-sm opacity-75 mt-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                        Counting down live • {countdown.toFixed(1)}min\n                      </div>\n                    </div>\n                  )}\n                </div>\n                {queuePosition && queuePosition.status === 'called' && (\n                  <Badge className=\"bg-green-600 text-white text-lg px-4 py-2\">\n                    <AlertCircle className=\"w-4 h-4 mr-2\" />\n                    You're being called! Please proceed to the doctor.\n                  </Badge>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Now Serving */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Activity className=\"w-5 h-5 text-green-500\" />\n                Now Serving\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"bg-green-500 text-white rounded-lg p-6 text-center\">\n                <div className=\"text-sm mb-2\">Currently with Doctor</div>\n                <div className=\"text-3xl font-bold mb-1\">\n                  #{currentlyServing?.tokenNumber || '--'}\n                </div>\n                <div className=\"text-sm\">\n                  {currentlyServing?.patient ? \n                    `${currentlyServing.patient.firstName} ${currentlyServing.patient.lastName}` : \n                    'No patient currently'\n                  }\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Queue Status */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Clock className=\"w-5 h-5 text-orange-500\" />\n                Queue Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg\">\n                  <div>\n                    <div className=\"font-medium text-orange-800 dark:text-orange-200\">Patients Waiting</div>\n                    <div className=\"text-sm text-orange-600 dark:text-orange-300\">In queue ahead of you</div>\n                  </div>\n                  <div className=\"text-2xl font-bold text-orange-600\">\n                    {waitingQueue.length}\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                  <div>\n                    <div className=\"font-medium text-blue-800 dark:text-blue-200\">Average Wait</div>\n                    <div className=\"text-sm text-blue-600 dark:text-blue-300\">Per patient</div>\n                  </div>\n                  <div className=\"text-2xl font-bold text-blue-600\">\n                    ~15min\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Upcoming Queue */}\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"w-5 h-5 text-gray-600\" />\n                Upcoming Queue ({waitingQueue.length} patients waiting)\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {waitingQueue.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {waitingQueue.slice(0, 8).map((token: any, index: number) => {\n                    const isCurrentUser = token.patientId === user?.id;\n                    const isNext = index === 0;\n                    const bgColor = isCurrentUser ? 'bg-blue-100 dark:bg-blue-900/30 border-blue-300' : \n                                   isNext ? 'bg-green-50 dark:bg-green-900/20 border-green-200' : \n                                   'bg-gray-50 dark:bg-gray-800';\n                    const borderColor = isCurrentUser ? 'border-l-4 border-l-blue-500' : \n                                       isNext ? 'border-l-4 border-l-green-500' : '';\n                    \n                    // Calculate dynamic wait time for this token\n                    const tokenPosition = index + 1;\n                    const tokenDynamicWaitTime = token.estimatedWaitTime || Math.max(0, (tokenPosition - 1) * 15);\n                    \n                    return (\n                      <div key={token.id} className={`flex items-center justify-between p-4 rounded-lg ${bgColor} ${borderColor}`}>\n                        <div className=\"flex items-center gap-3\">\n                          <Badge className={`${isCurrentUser ? 'bg-blue-500' : isNext ? 'bg-green-500' : 'bg-gray-500'} text-white`}>\n                            #{token.tokenNumber}\n                          </Badge>\n                          <div>\n                            <div className=\"font-medium\">\n                              {isCurrentUser ? 'You' : `${token.patient?.firstName || 'Patient'} ${token.patient?.lastName || ''}`}\n                              {isNext && <span className=\"ml-2 text-green-600 font-semibold\">- Next</span>}\n                              {isCurrentUser && <span className=\"ml-2 text-blue-600 font-semibold\">- Your Turn</span>}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              Est. time: {tokenDynamicWaitTime > 0 ? \n                                new Date(Date.now() + tokenDynamicWaitTime * 60000).toLocaleTimeString('en-IN', {\n                                  hour: '2-digit', \n                                  minute: '2-digit',\n                                  timeZone: 'Asia/Kolkata'\n                                }) : 'Soon'\n                              }\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-medium\">\n                            {tokenDynamicWaitTime === 0 ? 'Now' : `~${tokenDynamicWaitTime}min`}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">wait time</div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <Users className=\"w-12 h-12 text-gray-300 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No Queue Currently</h3>\n                  <p className=\"text-gray-600 dark:text-gray-400\">The queue is empty at the moment</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Footer Actions */}\n        <div className=\"mt-8 flex justify-center\">\n          <Button \n            onClick={() => setLocation(\"/dashboard\")}\n            className=\"bg-blue-500 hover:bg-blue-600 text-white px-6 py-2\"\n          >\n            Return to Dashboard\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15272},"client/src/pages/clinic-admin-dashboard.tsx":{"content":"\"use client\"\n\nimport React, { useState, useEffect } from \"react\"\nimport { useRoute } from \"wouter\"\nimport {\n  Bell,\n  Calendar,\n  Clock,\n  Users,\n  DollarSign,\n  AlertTriangle,\n  Activity,\n  UserPlus,\n  FileText,\n  LogOut,\n  Settings,\n  BarChart3,\n  Stethoscope,\n  User,\n  TrendingUp,\n  X,\n  Plus,\n  UserCheck,\n  Shield,\n  Database,\n  Download,\n  MessageCircle,\n  Star,\n  Eye,\n  Mail,\n  PhoneCall,\n  Pill,\n  Building2,\n  MapPin\n} from \"lucide-react\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\"\nimport { apiRequest } from \"@/lib/queryClient\"\nimport { useToast } from \"@/hooks/use-toast\"\nimport { useQueueSocket } from \"@/hooks/useQueueSocket\"\n\ninterface User {\n  id: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  phoneNumber: string;\n  email?: string;\n  address?: string;\n  isActive: boolean;\n  isApproved: boolean;\n  createdAt: string;\n  clinicId: string;\n}\n\ninterface Clinic {\n  id: string;\n  name: string;\n  address: string;\n  phoneNumber?: string;\n  email?: string;\n  status: string;\n  capacity?: number;\n  description?: string;\n  workingHours?: any;\n  createdAt: string;\n}\n\ninterface Appointment {\n  id: string;\n  patientId: string;\n  doctorId: string;\n  clinicId: string;\n  appointmentDate: string;\n  duration: number;\n  type: string;\n  status: string;\n  location?: string;\n  notes?: string;\n  symptoms?: string;\n  patient: User;\n  doctor: User;\n}\n\ninterface QueueToken {\n  id: string;\n  tokenNumber: number;\n  patientId: string;\n  doctorId: string;\n  appointmentId: string;\n  status: string;\n  estimatedWaitTime: number;\n  patient: User;\n  doctor: User;\n}\n\nexport default function ClinicAdminDashboard() {\n  const [, params] = useRoute(\"/clinic-admin/:clinicId\")\n  const clinicId = params?.clinicId\n  const [activeTab, setActiveTab] = useState(\"overview\")\n  const [selectedPatient, setSelectedPatient] = useState<User | null>(null)\n  const [showHistoryModal, setShowHistoryModal] = useState(false)\n  const { toast } = useToast()\n  const queryClient = useQueryClient()\n\n  // Fetch clinic information\n  const { data: clinic, isLoading: clinicLoading } = useQuery<Clinic>({\n    queryKey: ['/api/clinics', clinicId],\n    enabled: !!clinicId\n  })\n\n  // Fetch clinic-specific appointments\n  const { data: appointments = [], isLoading: appointmentsLoading } = useQuery<Appointment[]>({\n    queryKey: ['/api/appointments/clinic', clinicId],\n    enabled: !!clinicId\n  })\n\n  // Fetch clinic-specific staff\n  const { data: staff = [], isLoading: staffLoading } = useQuery<User[]>({\n    queryKey: ['/api/users/clinic', clinicId],\n    enabled: !!clinicId\n  })\n\n  // Fetch clinic-specific patients\n  const { data: patients = [], isLoading: patientsLoading } = useQuery<User[]>({\n    queryKey: ['/api/patients/clinic', clinicId],\n    enabled: !!clinicId\n  })\n\n  // Fetch clinic-specific queue\n  const { data: queue = [], isLoading: queueLoading } = useQuery<QueueToken[]>({\n    queryKey: ['/api/queue/clinic', clinicId],\n    enabled: !!clinicId\n  })\n\n  // Fetch clinic dashboard stats\n  const { data: stats } = useQuery<{\n    patientsToday: number;\n    completedAppointments: number;\n    revenue: number;\n    activeStaff: number;\n  }>({\n    queryKey: ['/api/clinic/dashboard-stats', clinicId],\n    enabled: !!clinicId\n  })\n\n  // WebSocket for real-time updates\n  const { queueTokens, isConnected } = useQueueSocket(\"admin\")\n\n  if (!clinicId) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-red-600 mb-4\">Invalid Clinic</h1>\n          <p className=\"text-gray-600\">Clinic ID not found in URL</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (clinicLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading clinic dashboard...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-6\">\n            <div className=\"flex items-center\">\n              <Building2 className=\"h-8 w-8 text-blue-600 mr-3\" />\n              <div>\n                <h1 className=\"text-2xl font-bold text-gray-900\">{clinic?.name || 'Clinic'} Dashboard</h1>\n                <p className=\"text-sm text-gray-600 flex items-center mt-1\">\n                  <MapPin className=\"h-4 w-4 mr-1\" />\n                  {clinic?.address}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Badge variant=\"outline\" className=\"bg-green-50 text-green-700 border-green-200\">\n                {clinic?.status || 'Active'}\n              </Badge>\n              <Button variant=\"outline\" size=\"sm\">\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Clinic Settings\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-6\">\n            <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n              <BarChart3 className=\"w-4 h-4\" />\n              Overview\n            </TabsTrigger>\n            <TabsTrigger value=\"appointments\" className=\"flex items-center gap-2\">\n              <Calendar className=\"w-4 h-4\" />\n              Appointments\n            </TabsTrigger>\n            <TabsTrigger value=\"queue\" className=\"flex items-center gap-2\">\n              <Clock className=\"w-4 h-4\" />\n              Queue\n            </TabsTrigger>\n            <TabsTrigger value=\"patients\" className=\"flex items-center gap-2\">\n              <Users className=\"w-4 h-4\" />\n              Patients\n            </TabsTrigger>\n            <TabsTrigger value=\"staff\" className=\"flex items-center gap-2\">\n              <UserCheck className=\"w-4 h-4\" />\n              Staff\n            </TabsTrigger>\n            <TabsTrigger value=\"reports\" className=\"flex items-center gap-2\">\n              <FileText className=\"w-4 h-4\" />\n              Reports\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"mt-0\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              {/* Stats Cards */}\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Today's Patients</CardTitle>\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats?.patientsToday || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    +12% from yesterday\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Completed</CardTitle>\n                  <UserCheck className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats?.completedAppointments || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    +8% from yesterday\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Revenue</CardTitle>\n                  <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">${stats?.revenue || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    +15% from yesterday\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Active Staff</CardTitle>\n                  <Activity className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\">{stats?.activeStaff || 0}</div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    All staff present\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Quick Actions and Current Queue */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Clock className=\"w-5 h-5 text-blue-500\" />\n                    Current Queue\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {queue.slice(0, 5).map((token: QueueToken) => (\n                      <div key={token.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            #{token.tokenNumber}\n                          </Badge>\n                          <div>\n                            <p className=\"font-medium text-sm\">\n                              {token.patient.firstName} {token.patient.lastName}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              Dr. {token.doctor.firstName} {token.doctor.lastName}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge \n                            className={\n                              token.status === 'waiting' ? 'bg-yellow-100 text-yellow-800' :\n                              token.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :\n                              'bg-green-100 text-green-800'\n                            }\n                          >\n                            {token.status}\n                          </Badge>\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            ~{Math.round(token.estimatedWaitTime / 60)}min\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"w-5 h-5 text-green-500\" />\n                    Quick Actions\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <UserPlus className=\"w-4 h-4 mr-2\" />\n                      Add New Patient\n                    </Button>\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      Schedule Appointment\n                    </Button>\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <FileText className=\"w-4 h-4 mr-2\" />\n                      Generate Report\n                    </Button>\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <Settings className=\"w-4 h-4 mr-2\" />\n                      Clinic Settings\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Appointments Tab */}\n          <TabsContent value=\"appointments\" className=\"mt-0\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center gap-2\">\n                    <Calendar className=\"w-5 h-5 text-blue-500\" />\n                    Clinic Appointments\n                  </span>\n                  <Button size=\"sm\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    New Appointment\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {appointments.map((appointment: Appointment) => (\n                    <div key={appointment.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <User className=\"w-6 h-6 text-blue-600\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-medium\">\n                            {appointment.patient.firstName} {appointment.patient.lastName}\n                          </h3>\n                          <p className=\"text-sm text-gray-500\">\n                            Dr. {appointment.doctor.firstName} {appointment.doctor.lastName}\n                          </p>\n                          <p className=\"text-xs text-gray-400\">\n                            {new Date(appointment.appointmentDate).toLocaleString()}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge \n                          className={\n                            appointment.status === 'scheduled' ? 'bg-blue-100 text-blue-800' :\n                            appointment.status === 'completed' ? 'bg-green-100 text-green-800' :\n                            appointment.status === 'cancelled' ? 'bg-red-100 text-red-800' :\n                            'bg-yellow-100 text-yellow-800'\n                          }\n                        >\n                          {appointment.status}\n                        </Badge>\n                        <Button variant=\"outline\" size=\"sm\">\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Queue Tab */}\n          <TabsContent value=\"queue\" className=\"mt-0\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"w-5 h-5 text-blue-500\" />\n                  Live Queue Management\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {queue.map((token: QueueToken) => (\n                    <div key={token.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <Badge variant=\"outline\" className=\"text-lg px-3 py-1\">\n                          #{token.tokenNumber}\n                        </Badge>\n                        <div>\n                          <h3 className=\"font-medium\">\n                            {token.patient.firstName} {token.patient.lastName}\n                          </h3>\n                          <p className=\"text-sm text-gray-500\">\n                            Dr. {token.doctor.firstName} {token.doctor.lastName}\n                          </p>\n                          <p className=\"text-xs text-gray-400\">\n                            Wait time: ~{Math.round(token.estimatedWaitTime / 60)} minutes\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge \n                          className={\n                            token.status === 'waiting' ? 'bg-yellow-100 text-yellow-800' :\n                            token.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :\n                            'bg-green-100 text-green-800'\n                          }\n                        >\n                          {token.status}\n                        </Badge>\n                        {token.status === 'waiting' && (\n                          <Button size=\"sm\">\n                            Call Patient\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Patients Tab */}\n          <TabsContent value=\"patients\" className=\"mt-0\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center gap-2\">\n                    <Users className=\"w-5 h-5 text-blue-500\" />\n                    Clinic Patients\n                  </span>\n                  <Button size=\"sm\">\n                    <UserPlus className=\"w-4 h-4 mr-2\" />\n                    Add Patient\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {patients.map((patient: User) => (\n                    <div key={patient.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center\">\n                          <User className=\"w-6 h-6 text-gray-600\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-medium\">{patient.firstName} {patient.lastName}</h3>\n                          <p className=\"text-sm text-gray-500\">{patient.phoneNumber}</p>\n                          <p className=\"text-xs text-gray-400\">{patient.email}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge className={patient.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>\n                          {patient.isActive ? 'Active' : 'Inactive'}\n                        </Badge>\n                        <Button variant=\"outline\" size=\"sm\" onClick={() => {\n                          setSelectedPatient(patient)\n                          setShowHistoryModal(true)\n                        }}>\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Staff Tab */}\n          <TabsContent value=\"staff\" className=\"mt-0\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center gap-2\">\n                    <UserCheck className=\"w-5 h-5 text-blue-500\" />\n                    Clinic Staff\n                  </span>\n                  <Button size=\"sm\">\n                    <UserPlus className=\"w-4 h-4 mr-2\" />\n                    Add Staff\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {staff.map((member: User) => (\n                    <div key={member.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <Stethoscope className=\"w-6 h-6 text-blue-600\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-medium\">{member.firstName} {member.lastName}</h3>\n                          <p className=\"text-sm text-gray-500\">{member.role}</p>\n                          <p className=\"text-xs text-gray-400\">{member.phoneNumber}</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge className={member.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>\n                          {member.isActive ? 'Active' : 'Inactive'}\n                        </Badge>\n                        <Badge variant=\"outline\">\n                          {member.role}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Reports Tab */}\n          <TabsContent value=\"reports\" className=\"mt-0\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"w-5 h-5 text-blue-500\" />\n                    Performance Metrics\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span>Patient Satisfaction</span>\n                        <span>95%</span>\n                      </div>\n                      <Progress value={95} className=\"h-2\" />\n                    </div>\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span>Appointment Completion</span>\n                        <span>88%</span>\n                      </div>\n                      <Progress value={88} className=\"h-2\" />\n                    </div>\n                    <div>\n                      <div className=\"flex justify-between text-sm mb-1\">\n                        <span>Staff Utilization</span>\n                        <span>92%</span>\n                      </div>\n                      <Progress value={92} className=\"h-2\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <FileText className=\"w-5 h-5 text-green-500\" />\n                    Generate Reports\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Monthly Performance Report\n                    </Button>\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Patient Demographics\n                    </Button>\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Revenue Analysis\n                    </Button>\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Staff Performance\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Patient History Modal */}\n      <Dialog open={showHistoryModal} onOpenChange={setShowHistoryModal}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Patient Medical History</DialogTitle>\n          </DialogHeader>\n          {selectedPatient && (\n            <div className=\"space-y-6\">\n              <div className=\"border-b pb-4\">\n                <h3 className=\"text-lg font-semibold\">\n                  {selectedPatient.firstName} {selectedPatient.lastName}\n                </h3>\n                <p className=\"text-gray-600\">{selectedPatient.phoneNumber}</p>\n                <p className=\"text-sm text-gray-500\">\n                  Patient ID: {selectedPatient.id.slice(0, 8)}...\n                </p>\n              </div>\n              <p className=\"text-gray-600\">Patient history details would be displayed here...</p>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  )\n}","size_bytes":26599},"client/src/pages/homepage.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertClinicSchema } from \"@shared/schema\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { z } from \"zod\";\nimport { \n  Building2, \n  UserCheck, \n  Calendar, \n  Shield, \n  Users, \n  Clock, \n  Phone,\n  MapPin,\n  CheckCircle,\n  ArrowRight,\n  Heart,\n  Activity,\n  Moon,\n  Sun,\n  Stethoscope\n} from \"lucide-react\";\n\nconst clinicRegistrationSchema = insertClinicSchema.extend({\n  adminName: z.string().min(2, \"Admin name is required\"),\n  adminPhone: z.string().min(10, \"Valid phone number is required\"),\n  adminEmail: z.string().email(\"Valid email is required\")\n});\n\ntype ClinicRegistrationForm = z.infer<typeof clinicRegistrationSchema>;\n\nexport default function Homepage() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [isRegistering, setIsRegistering] = useState(false);\n  const queryClient = useQueryClient();\n  const { theme, toggleTheme } = useTheme();\n\n  // Simple test to ensure the component renders\n  console.log('🔥 Homepage component rendering...');\n\n  const form = useForm<ClinicRegistrationForm>({\n    resolver: zodResolver(clinicRegistrationSchema),\n    defaultValues: {\n      name: \"\",\n      address: \"\",\n      phoneNumber: \"\",\n      email: \"\",\n      adminName: \"\",\n      adminPhone: \"\",\n      adminEmail: \"\"\n    }\n  });\n\n  const registerClinicMutation = useMutation({\n    mutationFn: async (data: ClinicRegistrationForm) => {\n      const { adminName, adminPhone, adminEmail, ...clinicData } = data;\n      \n      const response = await fetch('/api/clinics/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          clinicData,\n          adminData: {\n            phoneNumber: adminPhone,\n            firstName: adminName.split(' ')[0],\n            lastName: adminName.split(' ').slice(1).join(' ') || '',\n            email: adminEmail\n          }\n        })\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to register clinic');\n      }\n\n      return response.json();\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Application Submitted Successfully!\",\n        description: `Thank you for registering ${result.clinic.name}! We will review your application and update you within 48 hours.`\n      });\n      \n      // Reset form and close dialog\n      form.reset();\n      setIsRegistering(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to register clinic\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const onSubmit = (data: ClinicRegistrationForm) => {\n    registerClinicMutation.mutate(data);\n  };\n\n  const features = [\n    {\n      icon: Calendar,\n      title: \"Smart Scheduling\",\n      description: \"AI-powered appointment scheduling with real-time queue management\"\n    },\n    {\n      icon: Users,\n      title: \"Multi-Role Access\",\n      description: \"Dedicated interfaces for patients, doctors, staff, and administrators\"\n    },\n    {\n      icon: Clock,\n      title: \"Real-Time Updates\",\n      description: \"Live queue tracking and instant notifications for all users\"\n    },\n    {\n      icon: Shield,\n      title: \"Secure & Compliant\",\n      description: \"HIPAA-compliant data handling with advanced security measures\"\n    },\n    {\n      icon: Phone,\n      title: \"SMS Integration\",\n      description: \"Automated appointment reminders and status updates via SMS\"\n    },\n    {\n      icon: Activity,\n      title: \"Analytics Dashboard\",\n      description: \"Comprehensive insights into clinic operations and performance\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      {/* Header */}\n      <header className=\"border-b border-gray-200 dark:border-gray-700 bg-white/80 dark:bg-gray-900/80 backdrop-blur-sm\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-blue-600 rounded-xl\">\n                <Stethoscope className=\"h-6 w-6 text-white\" />\n              </div>\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">SmartClinic</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={toggleTheme}\n                className=\"h-9 w-9 p-0\"\n                data-testid=\"button-theme-toggle\"\n              >\n                {theme === \"dark\" ? (\n                  <Sun className=\"h-4 w-4 text-yellow-500\" />\n                ) : (\n                  <Moon className=\"h-4 w-4 text-gray-600\" />\n                )}\n              </Button>\n              <Badge variant=\"secondary\" className=\"hidden sm:inline-flex\">\n                Trusted by 500+ Clinics\n              </Badge>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <div className=\"inline-flex items-center space-x-2 bg-blue-100 dark:bg-blue-900/30 px-4 py-2 rounded-full mb-6\">\n            <CheckCircle className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n            <span className=\"text-blue-800 dark:text-blue-300 font-medium\">Next-Generation Healthcare Management</span>\n          </div>\n          \n          <h1 className=\"text-5xl sm:text-6xl font-bold text-gray-900 dark:text-white mb-6\">\n            Streamline Your{\" \"}\n            <span className=\"text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-green-600\">\n              Healthcare Operations\n            </span>\n          </h1>\n          \n          <p className=\"text-xl text-gray-600 dark:text-gray-300 mb-12 max-w-3xl mx-auto\">\n            Comprehensive clinic management system with real-time queue tracking, smart scheduling, \n            and seamless patient experience. Built for modern healthcare providers.\n          </p>\n\n          {/* Action Cards */}\n          <div className=\"grid md:grid-cols-3 gap-6 max-w-4xl mx-auto mb-16\">\n            {/* Patient Login */}\n            <Card className=\"hover:shadow-lg transition-all duration-200 border-2 hover:border-blue-200 dark:hover:border-blue-700\" data-testid=\"card-patient-login\">\n              <CardHeader className=\"text-center\">\n                <div className=\"mx-auto w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center mb-4\">\n                  <Users className=\"h-6 w-6 text-green-600 dark:text-green-400\" />\n                </div>\n                <CardTitle className=\"text-xl\">I'm a Patient</CardTitle>\n                <CardDescription>\n                  Book appointments, track queue status, and manage your healthcare\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Link href=\"/patient-login\" data-testid=\"link-patient-login\">\n                  <Button className=\"w-full\" size=\"lg\">\n                    Patient Portal\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Staff/Admin Login */}\n            <Card className=\"hover:shadow-lg transition-all duration-200 border-2 hover:border-blue-200 dark:hover:border-blue-700\" data-testid=\"card-staff-login\">\n              <CardHeader className=\"text-center\">\n                <div className=\"mx-auto w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-full flex items-center justify-center mb-4\">\n                  <Shield className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                </div>\n                <CardTitle className=\"text-xl\">Staff & Admin</CardTitle>\n                <CardDescription>\n                  Access clinic dashboard, manage appointments, and oversee operations\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Link href=\"/login\" data-testid=\"link-staff-login\">\n                  <Button variant=\"outline\" className=\"w-full\" size=\"lg\">\n                    Staff Portal\n                    <ArrowRight className=\"ml-2 h-4 w-4\" />\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Clinic Registration */}\n            <Card className=\"hover:shadow-lg transition-all duration-200 border-2 border-purple-200 hover:border-purple-300 dark:border-purple-700 dark:hover:border-purple-600 bg-gradient-to-br from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20\" data-testid=\"card-clinic-registration\">\n              <CardHeader className=\"text-center\">\n                <div className=\"mx-auto w-12 h-12 bg-purple-100 dark:bg-purple-900/30 rounded-full flex items-center justify-center mb-4\">\n                  <Building2 className=\"h-6 w-6 text-purple-600 dark:text-purple-400\" />\n                </div>\n                <CardTitle className=\"text-xl\">Register Your Clinic</CardTitle>\n                <CardDescription>\n                  Join our platform and start managing your clinic efficiently\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <Dialog open={isRegistering} onOpenChange={setIsRegistering}>\n                  <DialogTrigger asChild>\n                    <Button \n                      className=\"w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700\" \n                      size=\"lg\"\n                      data-testid=\"button-register-clinic\"\n                    >\n                      Get Started\n                      <ArrowRight className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-clinic-registration\">\n                    <DialogHeader>\n                      <DialogTitle className=\"text-2xl\">Register Your Clinic</DialogTitle>\n                      <DialogDescription>\n                        Fill out the information below to register your clinic and create an admin account.\n                      </DialogDescription>\n                    </DialogHeader>\n                    \n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                        {/* Clinic Information */}\n                        <div className=\"space-y-4\">\n                          <h3 className=\"text-lg font-semibold\">Clinic Information</h3>\n                          \n                          <FormField\n                            control={form.control}\n                            name=\"name\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Clinic Name</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"SmartClinic Downtown\" {...field} data-testid=\"input-clinic-name\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"address\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Address</FormLabel>\n                                <FormControl>\n                                  <Textarea placeholder=\"123 Healthcare Avenue, Medical District\" {...field} data-testid=\"input-clinic-address\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <FormField\n                              control={form.control}\n                              name=\"phoneNumber\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Phone Number</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"+1234567890\" {...field} value={field.value || \"\"} data-testid=\"input-clinic-phone\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            <FormField\n                              control={form.control}\n                              name=\"email\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Email</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"contact@smartclinic.com\" {...field} value={field.value || \"\"} data-testid=\"input-clinic-email\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n                        </div>\n\n                        {/* Admin Information */}\n                        <div className=\"space-y-4\">\n                          <h3 className=\"text-lg font-semibold\">Administrator Information</h3>\n                          \n                          <FormField\n                            control={form.control}\n                            name=\"adminName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Full Name</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"Dr. John Smith\" {...field} data-testid=\"input-admin-name\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <FormField\n                              control={form.control}\n                              name=\"adminPhone\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Phone Number</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"+1234567890\" {...field} data-testid=\"input-admin-phone\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            <FormField\n                              control={form.control}\n                              name=\"adminEmail\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Email</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"admin@smartclinic.com\" {...field} data-testid=\"input-admin-email\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"flex justify-end space-x-4 pt-6\">\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\" \n                            onClick={() => setIsRegistering(false)}\n                            data-testid=\"button-cancel-registration\"\n                          >\n                            Cancel\n                          </Button>\n                          <Button \n                            type=\"submit\" \n                            disabled={registerClinicMutation.isPending}\n                            data-testid=\"button-submit-registration\"\n                          >\n                            {registerClinicMutation.isPending ? \"Registering...\" : \"Register Clinic\"}\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 bg-white dark:bg-gray-900\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 dark:text-white mb-4\">\n              Everything You Need to Run Your Clinic\n            </h2>\n            <p className=\"text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto\">\n              Comprehensive features designed to streamline operations and enhance patient care\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card key={index} className=\"hover:shadow-lg transition-shadow duration-200\" data-testid={`feature-card-${index}`}>\n                <CardHeader>\n                  <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center mb-4\">\n                    <feature.icon className=\"h-6 w-6 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                  <CardTitle className=\"text-xl\">{feature.title}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <CardDescription className=\"text-base\">{feature.description}</CardDescription>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-50 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-3 mb-4\">\n              <div className=\"p-2 bg-blue-600 rounded-xl\">\n                <Stethoscope className=\"h-6 w-6 text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white\">SmartClinic</h3>\n            </div>\n            <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n              Empowering healthcare providers with intelligent technology\n            </p>\n            <div className=\"flex justify-center space-x-6 text-sm text-gray-500 dark:text-gray-400\">\n              <span>© 2025 SmartClinic. All rights reserved.</span>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":20569},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged, User } from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\n// Check if Firebase configuration is valid before initializing\nconst isFirebaseConfigured = firebaseConfig.apiKey && \n  firebaseConfig.authDomain &&\n  firebaseConfig.projectId && \n  firebaseConfig.appId &&\n  firebaseConfig.apiKey !== 'undefined' && \n  firebaseConfig.authDomain !== 'undefined' &&\n  firebaseConfig.projectId !== 'undefined' &&\n  firebaseConfig.appId !== 'undefined';\n\nlet app: any = null;\nlet auth: any = null;\nlet googleProvider: any = null;\n\nif (isFirebaseConfigured) {\n  try {\n    app = initializeApp(firebaseConfig);\n    auth = getAuth(app);\n    googleProvider = new GoogleAuthProvider();\n    \n    // Configure Google provider\n    googleProvider.addScope('email');\n    googleProvider.addScope('profile');\n    \n    console.log('✅ Firebase initialized successfully');\n  } catch (error) {\n    console.error('❌ Firebase initialization failed:', error);\n    console.log('Firebase authentication will be disabled');\n  }\n} else {\n  console.log('⚠️ Firebase configuration incomplete - authentication features disabled');\n  console.log('Debug Firebase config:', {\n    apiKey: firebaseConfig.apiKey ? 'present' : 'missing',\n    authDomain: firebaseConfig.authDomain ? 'present' : 'missing',\n    projectId: firebaseConfig.projectId ? 'present' : 'missing',\n    appId: firebaseConfig.appId ? 'present' : 'missing'\n  });\n}\n\nexport { auth, googleProvider };\n\n// Auth helper functions\nexport const signInWithGoogle = async () => {\n  if (!auth || !googleProvider) {\n    throw new Error('Firebase authentication is not configured. Please contact system administrator.');\n  }\n  \n  try {\n    console.log('Attempting Google sign-in with popup...');\n    const result = await signInWithPopup(auth, googleProvider);\n    console.log('Google sign-in successful:', result.user.email);\n    return result.user;\n  } catch (error: any) {\n    console.error('Google sign-in error details:', error);\n    console.error('Error code:', error.code);\n    console.error('Error message:', error.message);\n    \n    // If popup is blocked or fails, try redirect as fallback\n    if (error.code === 'auth/popup-blocked' || error.code === 'auth/popup-closed-by-user') {\n      console.log('Popup blocked, trying redirect...');\n      try {\n        await signInWithRedirect(auth, googleProvider);\n        // Note: redirect will reload the page, so we won't reach this return\n        return null;\n      } catch (redirectError: any) {\n        console.error('Redirect also failed:', redirectError);\n        throw new Error('Google sign-in failed. Please try email authentication instead.');\n      }\n    }\n    \n    // If domain not authorized, provide helpful message\n    if (error.code === 'auth/unauthorized-domain') {\n      throw new Error('This domain is not authorized for Google sign-in. Domain configuration may need time to propagate.');\n    }\n    \n    // For iframe errors, suggest email alternative\n    if (error.message?.includes('iframe') || error.message?.includes('url')) {\n      throw new Error('Google sign-in configuration issue. Please use email signup for now.');\n    }\n    \n    // Generic error with user-friendly message\n    throw new Error(`Google sign-in failed: ${error.message || 'Please try email login instead.'}`);\n  }\n};\n\nexport const createUserAccount = async (email: string, password: string) => {\n  if (!auth) {\n    throw new Error('Firebase authentication is not configured. Please contact system administrator.');\n  }\n  \n  try {\n    const result = await createUserWithEmailAndPassword(auth, email, password);\n    return result.user;\n  } catch (error: any) {\n    console.error('Email sign-up error:', error);\n    throw error;\n  }\n};\n\nexport const signInWithEmail = async (email: string, password: string) => {\n  if (!auth) {\n    throw new Error('Firebase authentication is not configured. Please contact system administrator.');\n  }\n  \n  try {\n    const result = await signInWithEmailAndPassword(auth, email, password);\n    return result.user;\n  } catch (error: any) {\n    console.error('Email sign-in error:', error);\n    \n    // If user not found in Firebase, provide helpful error\n    if (error.code === 'auth/user-not-found') {\n      throw new Error('Account not found. Please check your email or create a new account.');\n    }\n    \n    // If wrong password\n    if (error.code === 'auth/wrong-password' || error.code === 'auth/invalid-credential') {\n      throw new Error('Incorrect password. Please check your password and try again.');\n    }\n    \n    // If email format is invalid\n    if (error.code === 'auth/invalid-email') {\n      throw new Error('Invalid email format. Please enter a valid email address.');\n    }\n    \n    // If too many failed attempts\n    if (error.code === 'auth/too-many-requests') {\n      throw new Error('Too many failed login attempts. Please try again later.');\n    }\n    \n    // Generic error for other cases\n    throw new Error('Login failed. Please check your credentials and try again.');\n  }\n};\n\nexport const logOut = async () => {\n  if (!auth) {\n    console.log('Firebase not configured - logout not needed');\n    return;\n  }\n  \n  try {\n    await signOut(auth);\n  } catch (error: any) {\n    console.error('Sign-out error:', error);\n    throw error;\n  }\n};\n\nexport const onAuthChange = (callback: (user: User | null) => void) => {\n  if (!auth) {\n    // Call callback with null to indicate no user when Firebase is not configured\n    callback(null);\n    return () => {}; // Return empty unsubscribe function\n  }\n  \n  return onAuthStateChanged(auth, callback);\n};","size_bytes":6072},"client/src/pages/patient-portal.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { signInWithGoogle, handleRedirectResult, signOutUser } from \"@/lib/firebase\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { \n  User, \n  Calendar, \n  Settings, \n  LogOut, \n  UserCircle,\n  Mail,\n  Phone,\n  MapPin,\n  AlertCircle\n} from \"lucide-react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\nconst patientProfileSchema = insertUserSchema.pick({\n  firstName: true,\n  lastName: true,\n  email: true,\n  phoneNumber: true,\n  dateOfBirth: true,\n  address: true,\n  emergencyContact: true\n}).extend({\n  firstName: z.string().min(2, \"First name is required\"),\n  lastName: z.string().min(2, \"Last name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  phoneNumber: z.string().min(10, \"Valid phone number is required\").optional(),\n  dateOfBirth: z.string().optional(),\n  address: z.string().optional(),\n  emergencyContact: z.string().optional()\n});\n\ntype PatientProfileForm = z.infer<typeof patientProfileSchema>;\n\nexport default function PatientPortal() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [user, setUser] = useState<any>(null);\n  const [loading, setLoading] = useState(true);\n  const [showProfileForm, setShowProfileForm] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const queryClient = useQueryClient();\n\n  const form = useForm<PatientProfileForm>({\n    resolver: zodResolver(patientProfileSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phoneNumber: \"\",\n      dateOfBirth: \"\",\n      address: \"\",\n      emergencyContact: \"\"\n    }\n  });\n\n  // Handle Google authentication redirect result\n  useEffect(() => {\n    const checkAuthResult = async () => {\n      try {\n        const result = await handleRedirectResult();\n        if (result?.user) {\n          // Send user info to backend for registration/login\n          const googleUser = result.user;\n          const response = await fetch('/api/auth/google', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              googleId: googleUser.uid,\n              email: googleUser.email,\n              firstName: googleUser.displayName?.split(' ')[0] || '',\n              lastName: googleUser.displayName?.split(' ').slice(1).join(' ') || '',\n              profilePicture: googleUser.photoURL\n            })\n          });\n\n          if (response.ok) {\n            const userData = await response.json();\n            localStorage.setItem(\"auth_token\", userData.token);\n            localStorage.setItem(\"user\", JSON.stringify(userData.user));\n            setUser(userData.user);\n            \n            // Show profile completion form for new users\n            if (userData.isNewUser) {\n              setShowProfileForm(true);\n              form.reset({\n                firstName: userData.user.firstName,\n                lastName: userData.user.lastName,\n                email: userData.user.email,\n                phoneNumber: userData.user.phoneNumber || \"\",\n                dateOfBirth: userData.user.dateOfBirth || \"\",\n                address: userData.user.address || \"\",\n                emergencyContact: userData.user.emergencyContact || \"\"\n              });\n            }\n\n            toast({\n              title: \"Welcome!\",\n              description: userData.isNewUser ? \n                \"Please complete your profile information.\" : \n                \"Successfully signed in with Google.\"\n            });\n          }\n        }\n      } catch (error) {\n        console.error('Auth error:', error);\n        toast({\n          title: \"Authentication Error\",\n          description: \"Please try signing in again.\",\n          variant: \"destructive\"\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Check for existing session\n    const token = localStorage.getItem(\"auth_token\");\n    const storedUser = localStorage.getItem(\"user\");\n    \n    if (token && storedUser) {\n      setUser(JSON.parse(storedUser));\n      setLoading(false);\n    } else {\n      checkAuthResult();\n    }\n  }, []);\n\n  // Fetch user profile data\n  const { data: profileData } = useQuery({\n    queryKey: ['/api/patients/profile'],\n    enabled: !!user,\n  });\n\n  // Update profile data in form when fetched\n  useEffect(() => {\n    if (profileData) {\n      form.reset({\n        firstName: profileData.firstName || \"\",\n        lastName: profileData.lastName || \"\",\n        email: profileData.email || \"\",\n        phoneNumber: profileData.phoneNumber || \"\",\n        dateOfBirth: profileData.dateOfBirth ? new Date(profileData.dateOfBirth).toISOString().split('T')[0] : \"\",\n        address: profileData.address || \"\",\n        emergencyContact: profileData.emergencyContact || \"\"\n      });\n    }\n  }, [profileData, form]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: PatientProfileForm) => {\n      const formattedData = {\n        ...data,\n        dateOfBirth: data.dateOfBirth ? new Date(data.dateOfBirth).toISOString() : null\n      };\n      \n      return await apiRequest('/api/patients/profile', {\n        method: 'PUT',\n        body: JSON.stringify(formattedData)\n      });\n    },\n    onSuccess: (result) => {\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been updated successfully.\"\n      });\n      setShowProfileForm(false);\n      setIsEditing(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/patients/profile'] });\n      \n      // Update stored user data\n      const updatedUser = { ...user, ...result };\n      localStorage.setItem(\"user\", JSON.stringify(updatedUser));\n      setUser(updatedUser);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Update Failed\",\n        description: error.message || \"Failed to update profile. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleGoogleSignIn = async () => {\n    try {\n      await signInWithGoogle();\n    } catch (error: any) {\n      if (error.message.includes('Firebase not configured')) {\n        toast({\n          title: \"Configuration Required\",\n          description: \"Google sign-in is not yet configured. Please contact support.\",\n          variant: \"destructive\"\n        });\n      } else {\n        toast({\n          title: \"Sign In Failed\",\n          description: \"Please try again.\",\n          variant: \"destructive\"\n        });\n      }\n    }\n  };\n\n  const handleSignOut = async () => {\n    try {\n      await signOutUser();\n      localStorage.removeItem(\"auth_token\");\n      localStorage.removeItem(\"user\");\n      setUser(null);\n      navigate(\"/\");\n      toast({\n        title: \"Signed Out\",\n        description: \"You have been signed out successfully.\"\n      });\n    } catch (error) {\n      console.error('Sign out error:', error);\n    }\n  };\n\n  const onSubmit = (data: PatientProfileForm) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-white flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  // Not authenticated - show sign in options\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-white flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"mx-auto mb-4 h-12 w-12 rounded-full bg-blue-100 flex items-center justify-center\">\n              <UserCircle className=\"h-6 w-6 text-blue-600\" />\n            </div>\n            <CardTitle className=\"text-2xl\">Patient Portal</CardTitle>\n            <CardDescription>\n              Sign in to manage your appointments and health records\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Button \n              onClick={handleGoogleSignIn}\n              className=\"w-full bg-white hover:bg-gray-50 text-gray-900 border border-gray-300\"\n              data-testid=\"button-google-signin\"\n            >\n              <svg className=\"mr-2 h-4 w-4\" viewBox=\"0 0 24 24\">\n                <path\n                  fill=\"currentColor\"\n                  d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                />\n                <path\n                  fill=\"currentColor\"\n                  d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                />\n              </svg>\n              Continue with Google\n            </Button>\n            \n            <div className=\"text-center text-sm text-gray-600\">\n              By signing in, you agree to our Terms of Service and Privacy Policy\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Authenticated - show patient dashboard\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-white\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center\">\n              <div className=\"h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center mr-3\">\n                <User className=\"h-4 w-4 text-blue-600\" />\n              </div>\n              <h1 className=\"text-xl font-semibold text-gray-900\">Patient Portal</h1>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                {user.profilePicture && (\n                  <img \n                    src={user.profilePicture} \n                    alt=\"Profile\" \n                    className=\"h-8 w-8 rounded-full\"\n                  />\n                )}\n                <span className=\"text-sm text-gray-700\">\n                  {user.firstName} {user.lastName}\n                </span>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleSignOut}\n                data-testid=\"button-signout\"\n              >\n                <LogOut className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {/* Profile Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <UserCircle className=\"h-5 w-5 mr-2 text-blue-600\" />\n                My Profile\n              </CardTitle>\n              <CardDescription>Manage your personal information</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex items-center\">\n                  <Mail className=\"h-4 w-4 mr-2 text-gray-400\" />\n                  <span>{user.email}</span>\n                </div>\n                {user.phoneNumber && (\n                  <div className=\"flex items-center\">\n                    <Phone className=\"h-4 w-4 mr-2 text-gray-400\" />\n                    <span>{user.phoneNumber}</span>\n                  </div>\n                )}\n                {user.address && (\n                  <div className=\"flex items-center\">\n                    <MapPin className=\"h-4 w-4 mr-2 text-gray-400\" />\n                    <span className=\"truncate\">{user.address}</span>\n                  </div>\n                )}\n              </div>\n              <Button \n                className=\"w-full mt-4\" \n                variant=\"outline\"\n                onClick={() => {\n                  setIsEditing(true);\n                  setShowProfileForm(true);\n                }}\n                data-testid=\"button-edit-profile\"\n              >\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Edit Profile\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Appointments Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Calendar className=\"h-5 w-5 mr-2 text-green-600\" />\n                Appointments\n              </CardTitle>\n              <CardDescription>View and manage your appointments</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                No upcoming appointments scheduled.\n              </p>\n              <Button className=\"w-full\" variant=\"outline\">\n                Book Appointment\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Health Records Card */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <AlertCircle className=\"h-5 w-5 mr-2 text-orange-600\" />\n                Health Records\n              </CardTitle>\n              <CardDescription>Access your medical history</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                Your health records and prescriptions.\n              </p>\n              <Button className=\"w-full\" variant=\"outline\">\n                View Records\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      {/* Profile Form Dialog */}\n      <Dialog open={showProfileForm} onOpenChange={setShowProfileForm}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>\n              {isEditing ? \"Edit Profile\" : \"Complete Your Profile\"}\n            </DialogTitle>\n            <DialogDescription>\n              {isEditing ? \"Update your personal information.\" : \"Please provide your basic information to get started.\"}\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-firstname\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-lastname\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"email\" data-testid=\"input-email\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phoneNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone Number (Optional)</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-phone\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"dateOfBirth\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date of Birth (Optional)</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"date\" data-testid=\"input-dob\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"address\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} rows={2} data-testid=\"input-address\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"emergencyContact\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Emergency Contact (Optional)</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"Name and phone number\" data-testid=\"input-emergency-contact\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex gap-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowProfileForm(false)}\n                  className=\"flex-1\"\n                  data-testid=\"button-cancel\"\n                >\n                  {isEditing ? \"Cancel\" : \"Skip\"}\n                </Button>\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1\"\n                  disabled={updateProfileMutation.isPending}\n                  data-testid=\"button-save-profile\"\n                >\n                  {updateProfileMutation.isPending ? \"Saving...\" : \"Save Profile\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":20005},"client/src/hooks/useQueueSocket.ts":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface QueuePosition {\n  tokenNumber: number | null;\n  position: number | null;\n  estimatedWaitTime: number;\n  status?: string;\n}\n\ninterface QueueUpdate {\n  type: 'queue_position' | 'admin_queue_update' | 'full_queue_update';\n  data: any;\n}\n\nexport function useQueueSocket(patientId?: string, isAdmin = false) {\n  const [queuePosition, setQueuePosition] = useState<QueuePosition | null>(null);\n  const [queueTokens, setQueueTokens] = useState<any[]>([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const wsRef = useRef<WebSocket | null>(null);\n  const { toast } = useToast();\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout>();\n\n  // Debug logging for hook parameters\n  console.log('🔥🔥🔥 useQueueSocket called with:', { patientId, isAdmin });\n\n  const connect = () => {\n    try {\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      console.log('🔥 Connecting to queue WebSocket:', wsUrl, 'isAdmin:', isAdmin);\n      wsRef.current = new WebSocket(wsUrl);\n\n      wsRef.current.onopen = () => {\n        console.log('🔥 Queue WebSocket connected, isAdmin:', isAdmin, 'patientId:', patientId);\n        setIsConnected(true);\n        \n        // Subscribe to updates based on user type\n        if (isAdmin) {\n          console.log('🔥 Client: Sending admin queue subscription (isAdmin=true)');\n          wsRef.current?.send(JSON.stringify({ type: 'subscribe_admin_queue' }));\n          console.log('🔥 Client: Admin subscription message sent successfully');\n        } else if (patientId) {\n          console.log('🔥 Client: Sending patient queue subscription for:', patientId);\n          wsRef.current?.send(JSON.stringify({ type: 'subscribe_patient_queue', patientId }));\n        } else {\n          console.log('🔥 Client: No subscription sent - not admin and no patientId');\n        }\n      };\n\n      wsRef.current.onmessage = (event) => {\n        try {\n          const update: QueueUpdate = JSON.parse(event.data);\n          console.log('🔥 Queue update received:', update);\n          \n          if (update.type === 'queue_position') {\n            setQueuePosition(update.data);\n          } else if (update.type === 'admin_queue_update') {\n            setQueueTokens(update.data);\n          } else if (update.type === 'full_queue_update') {\n            setQueueTokens(update.data);\n          }\n        } catch (error) {\n          console.error('Failed to parse queue update:', error);\n        }\n      };\n\n      wsRef.current.onclose = () => {\n        console.log('🔥 Queue WebSocket disconnected');\n        setIsConnected(false);\n        \n        // Attempt to reconnect after 3 seconds\n        reconnectTimeoutRef.current = setTimeout(() => {\n          console.log('🔥 Attempting to reconnect queue WebSocket...');\n          connect();\n        }, 3000);\n      };\n\n      wsRef.current.onerror = (error) => {\n        console.error('🔥 Queue WebSocket error:', error);\n        setIsConnected(false);\n      };\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n      setIsConnected(false);\n    }\n  };\n\n  useEffect(() => {\n    connect();\n\n    return () => {\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [patientId, isAdmin]);\n\n  const refreshQueue = () => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      if (isAdmin) {\n        wsRef.current.send(JSON.stringify({ type: 'subscribe_admin_queue' }));\n      } else if (patientId) {\n        wsRef.current.send(JSON.stringify({ type: 'subscribe_patient_queue', patientId }));\n      }\n    }\n  };\n\n  return {\n    queuePosition,\n    queueTokens,\n    isConnected,\n    refreshQueue\n  };\n}","size_bytes":3979},"client/src/pages/clinic-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Building2, Users, Calendar, Pill, Edit2, Trash2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\ninterface Clinic {\n  id: string;\n  name: string;\n  address: string;\n  phone: string;\n  email: string | null;\n  description: string | null;\n  operatingHours: any;\n  isActive: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface ClinicStats {\n  totalUsers: number;\n  totalAppointments: number;\n  totalMedicines: number;\n  activeStaff: number;\n}\n\nexport default function ClinicManagement() {\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [editingClinic, setEditingClinic] = useState<Clinic | null>(null);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    address: \"\",\n    phone: \"\",\n    email: \"\",\n    description: \"\",\n    operatingHours: {\n      monday: { open: \"09:00\", close: \"17:00\", closed: false },\n      tuesday: { open: \"09:00\", close: \"17:00\", closed: false },\n      wednesday: { open: \"09:00\", close: \"17:00\", closed: false },\n      thursday: { open: \"09:00\", close: \"17:00\", closed: false },\n      friday: { open: \"09:00\", close: \"17:00\", closed: false },\n      saturday: { open: \"09:00\", close: \"13:00\", closed: false },\n      sunday: { open: \"09:00\", close: \"13:00\", closed: true }\n    }\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: clinics, isLoading } = useQuery({\n    queryKey: [\"/api/clinics\"],\n  });\n\n  const createClinicMutation = useMutation({\n    mutationFn: (data: typeof formData) => apiRequest(\"/api/clinics\", {\n      method: \"POST\",\n      body: JSON.stringify(data),\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clinics\"] });\n      setIsCreateDialogOpen(false);\n      setFormData({\n        name: \"\",\n        address: \"\",\n        phone: \"\",\n        email: \"\",\n        description: \"\",\n        operatingHours: {\n          monday: { open: \"09:00\", close: \"17:00\", closed: false },\n          tuesday: { open: \"09:00\", close: \"17:00\", closed: false },\n          wednesday: { open: \"09:00\", close: \"17:00\", closed: false },\n          thursday: { open: \"09:00\", close: \"17:00\", closed: false },\n          friday: { open: \"09:00\", close: \"17:00\", closed: false },\n          saturday: { open: \"09:00\", close: \"13:00\", closed: false },\n          sunday: { open: \"09:00\", close: \"13:00\", closed: true }\n        }\n      });\n      toast({\n        title: \"Clinic Created\",\n        description: \"New clinic has been successfully registered.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create clinic. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateClinicMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<typeof formData> }) => \n      apiRequest(`/api/clinics/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clinics\"] });\n      setIsEditDialogOpen(false);\n      setEditingClinic(null);\n      toast({\n        title: \"Clinic Updated\",\n        description: \"Clinic information has been successfully updated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update clinic. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteClinicMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/clinics/${id}`, {\n      method: \"DELETE\",\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/clinics\"] });\n      toast({\n        title: \"Clinic Deleted\",\n        description: \"Clinic has been successfully removed.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete clinic. Please ensure no users are associated with it.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingClinic) {\n      updateClinicMutation.mutate({ id: editingClinic.id, data: formData });\n    } else {\n      createClinicMutation.mutate(formData);\n    }\n  };\n\n  const openEditDialog = (clinic: Clinic) => {\n    setEditingClinic(clinic);\n    setFormData({\n      name: clinic.name,\n      address: clinic.address,\n      phone: clinic.phone,\n      email: clinic.email || \"\",\n      description: clinic.description || \"\",\n      operatingHours: clinic.operatingHours || {\n        monday: { open: \"09:00\", close: \"17:00\", closed: false },\n        tuesday: { open: \"09:00\", close: \"17:00\", closed: false },\n        wednesday: { open: \"09:00\", close: \"17:00\", closed: false },\n        thursday: { open: \"09:00\", close: \"17:00\", closed: false },\n        friday: { open: \"09:00\", close: \"17:00\", closed: false },\n        saturday: { open: \"09:00\", close: \"13:00\", closed: false },\n        sunday: { open: \"09:00\", close: \"13:00\", closed: true }\n      }\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const ClinicCard = ({ clinic }: { clinic: Clinic }) => {\n    const { data: stats } = useQuery<ClinicStats>({\n      queryKey: [`/api/clinics/${clinic.id}/stats`],\n    });\n\n    return (\n      <Card data-testid={`clinic-card-${clinic.id}`}>\n        <CardHeader>\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Building2 className=\"h-5 w-5\" />\n                {clinic.name}\n                {clinic.isActive ? (\n                  <Badge variant=\"default\">Active</Badge>\n                ) : (\n                  <Badge variant=\"secondary\">Inactive</Badge>\n                )}\n              </CardTitle>\n              <CardDescription>{clinic.address}</CardDescription>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => openEditDialog(clinic)}\n                data-testid={`edit-clinic-${clinic.id}`}\n              >\n                <Edit2 className=\"h-4 w-4\" />\n              </Button>\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    data-testid={`delete-clinic-${clinic.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      This action cannot be undone. This will permanently delete the clinic\n                      and remove it from our servers. Make sure no users are associated with this clinic.\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction\n                      onClick={() => deleteClinicMutation.mutate(clinic.id)}\n                    >\n                      Delete\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2 text-sm text-muted-foreground\">\n            <p><strong>Phone:</strong> {clinic.phone}</p>\n            {clinic.email && <p><strong>Email:</strong> {clinic.email}</p>}\n            {clinic.description && <p><strong>Description:</strong> {clinic.description}</p>}\n          </div>\n          \n          {stats && (\n            <div className=\"mt-4 grid grid-cols-2 gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <Users className=\"h-4 w-4 text-blue-500\" />\n                <span className=\"text-sm\">{stats.totalUsers} Users</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Calendar className=\"h-4 w-4 text-green-500\" />\n                <span className=\"text-sm\">{stats.totalAppointments} Appointments</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Pill className=\"h-4 w-4 text-purple-500\" />\n                <span className=\"text-sm\">{stats.totalMedicines} Medicines</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <Users className=\"h-4 w-4 text-orange-500\" />\n                <span className=\"text-sm\">{stats.activeStaff} Active Staff</span>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-6 bg-gray-200 rounded w-3/4\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <div className=\"h-4 bg-gray-200 rounded\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-5/6\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Clinic Management</h1>\n          <p className=\"text-muted-foreground\">Register and manage multiple clinic locations</p>\n        </div>\n        \n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"create-clinic-button\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Register New Clinic\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Register New Clinic</DialogTitle>\n              <DialogDescription>\n                Add a new clinic location to your healthcare network.\n              </DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Clinic Name *</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    required\n                    data-testid=\"input-clinic-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\">Phone Number *</Label>\n                  <Input\n                    id=\"phone\"\n                    value={formData.phone}\n                    onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                    required\n                    data-testid=\"input-clinic-phone\"\n                  />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"address\">Address *</Label>\n                <Input\n                  id=\"address\"\n                  value={formData.address}\n                  onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                  required\n                  data-testid=\"input-clinic-address\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"email\">Email (Optional)</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={formData.email}\n                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                  data-testid=\"input-clinic-email\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"description\">Description (Optional)</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  rows={3}\n                  data-testid=\"input-clinic-description\"\n                />\n              </div>\n              \n              <div className=\"flex justify-end gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsCreateDialogOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createClinicMutation.isPending}\n                  data-testid=\"submit-clinic-form\"\n                >\n                  {createClinicMutation.isPending ? \"Creating...\" : \"Register Clinic\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Clinic</DialogTitle>\n            <DialogDescription>\n              Update clinic information and settings.\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"edit-name\">Clinic Name *</Label>\n                <Input\n                  id=\"edit-name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"edit-phone\">Phone Number *</Label>\n                <Input\n                  id=\"edit-phone\"\n                  value={formData.phone}\n                  onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                  required\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"edit-address\">Address *</Label>\n              <Input\n                id=\"edit-address\"\n                value={formData.address}\n                onChange={(e) => setFormData({ ...formData, address: e.target.value })}\n                required\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"edit-email\">Email (Optional)</Label>\n              <Input\n                id=\"edit-email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"edit-description\">Description (Optional)</Label>\n              <Textarea\n                id=\"edit-description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                rows={3}\n              />\n            </div>\n            \n            <div className=\"flex justify-end gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsEditDialogOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={updateClinicMutation.isPending}\n              >\n                {updateClinicMutation.isPending ? \"Updating...\" : \"Update Clinic\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Clinics Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {clinics?.map((clinic: Clinic) => (\n          <ClinicCard key={clinic.id} clinic={clinic} />\n        ))}\n      </div>\n\n      {(!clinics || clinics.length === 0) && (\n        <Card>\n          <CardContent className=\"text-center py-8\">\n            <Building2 className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Clinics Registered</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Get started by registering your first clinic location.\n            </p>\n            <Button onClick={() => setIsCreateDialogOpen(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Register First Clinic\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":18140},"client/src/pages/platform-admin-login.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function PlatformAdminLogin() {\n  const [email, setEmail] = useState('');\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      const response = await fetch('/api/auth/platform-login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email }),\n      });\n\n      const result = await response.json();\n\n      if (response.ok) {\n        // Store token and user data\n        localStorage.setItem('auth_token', result.token);\n        localStorage.setItem('user', JSON.stringify(result.user));\n        \n        toast({\n          title: \"Login Successful\",\n          description: \"Welcome to SmartClinic Platform Administration\",\n        });\n        \n        // Redirect to platform admin dashboard\n        window.location.href = '/platform-admin';\n      } else {\n        toast({\n          title: \"Login Failed\",\n          description: result.message || \"Authentication failed\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Network error. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-green-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n      <div className=\"w-full max-w-md p-6\">\n        <Card>\n          <CardHeader className=\"space-y-1 text-center\">\n            <CardTitle className=\"text-2xl font-bold text-blue-600\">\n              🏥 SmartClinic Platform\n            </CardTitle>\n            <CardDescription>\n              Platform Administration Login\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleLogin} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <label htmlFor=\"email\" className=\"text-sm font-medium\">\n                  Email Address\n                </label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  data-testid=\"input-email\"\n                />\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={loading}\n                data-testid=\"button-login\"\n              >\n                {loading ? 'Authenticating...' : 'Access Platform Admin'}\n              </Button>\n            </form>\n            \n            <div className=\"mt-6 text-center\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Only SmartClinic team members can access platform administration.\n              </p>\n              <div className=\"mt-2\">\n                <a \n                  href=\"/login\" \n                  className=\"text-sm text-blue-600 hover:underline\"\n                  data-testid=\"link-clinic-login\"\n                >\n                  Clinic Admin Login\n                </a>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":3760},"FIREBASE_SETUP.md":{"content":"# Firebase Setup Instructions - REQUIRED STEPS\n\nBoth Google and Email authentication need to be enabled in Firebase Console. Here's the complete setup:\n\n## 1. Enable Authentication Methods\n\n1. Go to [Firebase Console](https://console.firebase.google.com/)\n2. Select your project: `smart-clinic-d59c5`\n3. Go to **Authentication** → **Sign-in method**\n4. **ENABLE these providers:**\n   - **Email/Password** - Click \"Enable\" and save\n   - **Google** - Click \"Enable\" and save\n\n## 2. Add Authorized Domains\n\n1. Still in **Authentication** → **Settings** → **Authorized domains**\n2. Add this exact domain: `workspace.littledash15.replit.dev`\n\n**Current Replit Domain:** `workspace.littledash15.replit.dev`\n\n## 3. Current Issues\n\n- **Email signup failing**: `auth/operation-not-allowed` = Email/password not enabled\n- **Google signup failing**: Domain not authorized + authentication method not enabled\n\n## 4. Required Actions\n\n**YOU MUST DO BOTH:**\n1. Enable Email/Password authentication in Firebase Console\n2. Enable Google authentication in Firebase Console\n3. Add the Replit domain to authorized domains\n\n## 5. Environment Variables (Already Set)\n\n✓ `VITE_FIREBASE_API_KEY`\n✓ `VITE_FIREBASE_APP_ID` \n✓ `VITE_FIREBASE_PROJECT_ID`\n\n## 6. After Setup\n\nOnce you enable both authentication methods in Firebase Console, both email and Google signup will work immediately.","size_bytes":1376},"client/src/pages/patient-signup.tsx":{"content":"'use client'\n\nimport { useState } from 'react'\nimport { useMutation } from '@tanstack/react-query'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { useToast } from '@/hooks/use-toast'\nimport { apiRequest } from '@/lib/queryClient'\nimport { signInWithGoogle, createUserAccount } from '@/lib/firebase'\nimport { UserPlus, Mail, Lock, User, Phone, MapPin, Heart, Chrome } from 'lucide-react'\n\nexport default function PatientSignup() {\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    phoneNumber: '',\n    dateOfBirth: '',\n    address: '',\n    emergencyContact: ''\n  })\n  const [step, setStep] = useState<'signup' | 'otp'>('signup')\n  const [otp, setOtp] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const [developmentOtp, setDevelopmentOtp] = useState<string | null>(null)\n  const { toast } = useToast()\n\n  // Send email OTP for signup\n  const sendSignupOtpMutation = useMutation({\n    mutationFn: async (signupData: any) => {\n      const response = await apiRequest('POST', '/api/auth/patient-signup-otp', signupData)\n      return await response.json()\n    },\n    onSuccess: (data: any) => {\n      setStep('otp')\n      \n      // Check if development OTP is provided (when email fails)\n      if (data.developmentOtp) {\n        setDevelopmentOtp(data.developmentOtp)\n        toast({\n          title: \"Email Service Fallback - Development Mode\",\n          description: `Email delivery fallback. Your OTP is: ${data.developmentOtp}`,\n          variant: \"destructive\",\n        })\n      } else {\n        setDevelopmentOtp(null)\n        toast({\n          title: \"Verification Code Sent\",\n          description: \"Please check your email for the 6-digit verification code.\",\n        })\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Signup Failed\",\n        description: error.message || \"Failed to send verification code. Please try again.\",\n        variant: \"destructive\"\n      })\n    }\n  })\n\n  // Verify OTP and complete signup\n  const verifySignupOtpMutation = useMutation({\n    mutationFn: async ({ email, otp }: { email: string; otp: string }) => {\n      const response = await apiRequest('POST', '/api/auth/verify-signup-otp', { email, otp })\n      return await response.json()\n    },\n    onSuccess: (data: any) => {\n      if (data.token && data.user) {\n        localStorage.setItem('auth_token', data.token)\n        localStorage.setItem('user', JSON.stringify(data.user))\n        toast({\n          title: \"Welcome to SmartClinic!\",\n          description: `Account created successfully for ${data.user.firstName}. Welcome to your healthcare dashboard.`,\n        })\n        // Add small delay to ensure localStorage is written before redirect\n        setTimeout(() => {\n          window.location.href = '/dashboard'\n        }, 100)\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Invalid verification code. Please try again.\",\n        variant: \"destructive\"\n      })\n    }\n  })\n\n  // Firebase Google signup (keep existing functionality)\n  const createPatientMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const response = await apiRequest('POST', '/api/auth/patient-signup', userData)\n      return await response.json()\n    },\n    onSuccess: (data: any) => {\n      if (data.token && data.user) {\n        localStorage.setItem('auth_token', data.token)\n        localStorage.setItem('user', JSON.stringify(data.user))\n        toast({\n          title: \"Account Created!\",\n          description: \"Welcome to SmartClinic. Your patient account has been created successfully.\",\n        })\n        // Add small delay to ensure localStorage is written before redirect\n        setTimeout(() => {\n          window.location.href = '/dashboard'\n        }, 100)\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Signup Failed\",\n        description: error.message || \"Failed to create account. Please try again.\",\n        variant: \"destructive\"\n      })\n    }\n  })\n\n  const handleGoogleSignup = async () => {\n    setIsLoading(true)\n    try {\n      const user = await signInWithGoogle()\n      \n      if (!user) {\n        throw new Error(\"Google sign-in failed\")\n      }\n      \n      // Check if user already exists\n      try {\n        const checkResponse = await apiRequest('GET', `/api/auth/firebase-user?uid=${user.uid}`)\n        const existingUser = await checkResponse.json()\n        \n        if (existingUser && existingUser.id) {\n          toast({\n            title: \"Account Exists\",\n            description: \"An account with this Google account already exists. Please try logging in instead.\",\n            variant: \"destructive\"\n          })\n          return\n        }\n      } catch (error) {\n        console.log('User not found, creating new account...')\n      }\n      \n      // Create new patient account with Google data\n      await createPatientMutation.mutateAsync({\n        firstName: user.displayName?.split(' ')[0] || user.email?.split('@')[0] || 'Patient',\n        lastName: user.displayName?.split(' ').slice(1).join(' ') || 'User',\n        email: user.email,\n        phoneNumber: user.phoneNumber || '',\n        firebaseUid: user.uid,\n        authProvider: 'google'\n      })\n    } catch (error: any) {\n      let errorMessage = \"Failed to sign up with Google. Please try again.\"\n      \n      if (error.message?.includes('domain')) {\n        errorMessage = \"Google sign-in is not configured for this domain. Please use email signup instead.\"\n      } else if (error.message?.includes('popup')) {\n        errorMessage = \"Popup was blocked. Please allow popups or use email signup.\"\n      } else if (error.message) {\n        errorMessage = error.message\n      }\n      \n      toast({\n        title: \"Google Signup Failed\",\n        description: errorMessage,\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleEmailSignup = async (e: React.FormEvent) => {\n    e.preventDefault()\n    \n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"Passwords do not match. Please try again.\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        title: \"Password Too Short\",\n        description: \"Password must be at least 6 characters long.\",\n        variant: \"destructive\"\n      })\n      return\n    }\n\n    // Send OTP for email verification\n    await sendSignupOtpMutation.mutateAsync(formData)\n  }\n\n  const handleVerifyOtp = (e: React.FormEvent) => {\n    e.preventDefault()\n    if (otp.length !== 6) {\n      toast({\n        title: \"Invalid OTP\",\n        description: \"Please enter the complete 6-digit verification code.\",\n        variant: \"destructive\"\n      })\n      return\n    }\n    verifySignupOtpMutation.mutate({ email: formData.email, otp })\n  }\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }))\n  }\n\n  // OTP Verification Step\n  if (step === 'otp') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n        <div className=\"w-full max-w-md\">\n          <Card className=\"shadow-xl border-0 bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"mx-auto bg-green-100 dark:bg-green-900 w-16 h-16 rounded-full flex items-center justify-center mb-4\">\n                <Mail className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n              </div>\n              <CardTitle className=\"text-2xl font-bold text-gray-900 dark:text-white\">Verify Your Email</CardTitle>\n              <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Enter the 6-digit code sent to {formData.email}</p>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-4\">\n              {developmentOtp && (\n                <div className=\"p-3 bg-yellow-100 dark:bg-yellow-900 border border-yellow-300 dark:border-yellow-700 rounded-md\">\n                  <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                    <strong>Development Mode:</strong> Your verification code is: {developmentOtp}\n                  </p>\n                </div>\n              )}\n              \n              <form onSubmit={handleVerifyOtp} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"otp\">Verification Code</Label>\n                  <Input\n                    id=\"otp\"\n                    type=\"text\"\n                    placeholder=\"Enter 6-digit code\"\n                    value={otp}\n                    onChange={(e) => setOtp(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n                    maxLength={6}\n                    className=\"text-center text-lg tracking-widest\"\n                    data-testid=\"input-otp\"\n                  />\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full py-3 bg-green-600 hover:bg-green-700 text-white\"\n                  disabled={verifySignupOtpMutation.isPending}\n                  data-testid=\"button-verify-otp\"\n                >\n                  {verifySignupOtpMutation.isPending ? \"Verifying...\" : \"Verify & Create Account\"}\n                </Button>\n                \n                <Button \n                  type=\"button\" \n                  variant=\"outline\"\n                  className=\"w-full\"\n                  onClick={() => setStep('signup')}\n                  data-testid=\"button-back-signup\"\n                >\n                  Back to Signup\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-xl border-0 bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm\">\n          <CardHeader className=\"text-center pb-4\">\n            <div className=\"mx-auto bg-blue-100 dark:bg-blue-900 w-16 h-16 rounded-full flex items-center justify-center mb-4\">\n              <UserPlus className=\"w-8 h-8 text-blue-600 dark:text-blue-400\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-gray-900 dark:text-white\">Create Patient Account</CardTitle>\n            <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Join SmartClinic for better healthcare management</p>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            {/* Google Signup Button */}\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"w-full py-3 border-2 hover:bg-gray-50 dark:hover:bg-gray-800\"\n              onClick={handleGoogleSignup}\n              disabled={isLoading}\n              data-testid=\"button-google-signup\"\n            >\n              <Chrome className=\"w-5 h-5 mr-2\" />\n              Continue with Google\n            </Button>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t border-gray-300 dark:border-gray-600\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-white dark:bg-gray-900 px-2 text-gray-500\">Or sign up with email</span>\n              </div>\n            </div>\n\n            {/* Email Signup Form */}\n            <form onSubmit={handleEmailSignup} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                    <Input\n                      id=\"firstName\"\n                      type=\"text\"\n                      placeholder=\"First name\"\n                      className=\"pl-10\"\n                      value={formData.firstName}\n                      onChange={(e) => handleInputChange('firstName', e.target.value)}\n                      required\n                      data-testid=\"input-firstname\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input\n                    id=\"lastName\"\n                    type=\"text\"\n                    placeholder=\"Last name\"\n                    value={formData.lastName}\n                    onChange={(e) => handleInputChange('lastName', e.target.value)}\n                    required\n                    data-testid=\"input-lastname\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"email\">Email Address</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email address\"\n                    className=\"pl-10\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Create a password\"\n                    className=\"pl-10\"\n                    value={formData.password}\n                    onChange={(e) => handleInputChange('password', e.target.value)}\n                    required\n                    data-testid=\"input-password\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    placeholder=\"Confirm your password\"\n                    className=\"pl-10\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                    required\n                    data-testid=\"input-confirm-password\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"phoneNumber\">Phone Number (Optional)</Label>\n                <div className=\"relative\">\n                  <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"phoneNumber\"\n                    type=\"tel\"\n                    placeholder=\"Your phone number\"\n                    className=\"pl-10\"\n                    value={formData.phoneNumber}\n                    onChange={(e) => handleInputChange('phoneNumber', e.target.value)}\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"dateOfBirth\">Date of Birth (Optional)</Label>\n                <Input\n                  id=\"dateOfBirth\"\n                  type=\"date\"\n                  value={formData.dateOfBirth}\n                  onChange={(e) => handleInputChange('dateOfBirth', e.target.value)}\n                  data-testid=\"input-dob\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"address\">Address (Optional)</Label>\n                <div className=\"relative\">\n                  <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"address\"\n                    type=\"text\"\n                    placeholder=\"Your address\"\n                    className=\"pl-10\"\n                    value={formData.address}\n                    onChange={(e) => handleInputChange('address', e.target.value)}\n                    data-testid=\"input-address\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"emergencyContact\">Emergency Contact (Optional)</Label>\n                <div className=\"relative\">\n                  <Heart className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"emergencyContact\"\n                    type=\"text\"\n                    placeholder=\"Emergency contact information\"\n                    className=\"pl-10\"\n                    value={formData.emergencyContact}\n                    onChange={(e) => handleInputChange('emergencyContact', e.target.value)}\n                    data-testid=\"input-emergency\"\n                  />\n                </div>\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full py-3 bg-blue-600 hover:bg-blue-700 text-white\"\n                disabled={sendSignupOtpMutation.isPending}\n                data-testid=\"button-create-account\"\n              >\n                {sendSignupOtpMutation.isPending ? \"Sending Verification...\" : \"Create Account\"}\n              </Button>\n            </form>\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Already have an account?{' '}\n                <a \n                  href=\"/patient-login\" \n                  className=\"text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 font-medium\"\n                  data-testid=\"link-login\"\n                >\n                  Sign in here\n                </a>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}","size_bytes":18925},"client/src/pages/patient-signup-old.tsx":{"content":"import React, { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { signInWithGoogle, createUserAccount } from '@/lib/firebase';\nimport { UserPlus, Mail, Lock, User, Phone, MapPin, Heart, Chrome } from 'lucide-react';\n\nexport default function PatientSignup() {\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    phoneNumber: '',\n    dateOfBirth: '',\n    address: '',\n    emergencyContact: ''\n  });\n  const [step, setStep] = useState<'signup' | 'otp'>('signup');\n  const [otp, setOtp] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [developmentOtp, setDevelopmentOtp] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // Send email OTP for signup\n  const sendSignupOtpMutation = useMutation({\n    mutationFn: async (signupData: any) => {\n      const response = await apiRequest('POST', '/api/auth/patient-signup-otp', signupData);\n      return await response.json();\n    },\n    onSuccess: (data: any) => {\n      setStep('otp');\n      \n      // Check if development OTP is provided (when email fails)\n      if (data.developmentOtp) {\n        setDevelopmentOtp(data.developmentOtp);\n        toast({\n          title: \"Email Service Fallback - Development Mode\",\n          description: `Email delivery fallback. Your OTP is: ${data.developmentOtp}`,\n          variant: \"destructive\",\n        });\n      } else {\n        setDevelopmentOtp(null);\n        toast({\n          title: \"Verification Code Sent\",\n          description: \"Please check your email for the 6-digit verification code.\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Signup Failed\",\n        description: error.message || \"Failed to send verification code. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Verify OTP and complete signup\n  const verifySignupOtpMutation = useMutation({\n    mutationFn: async ({ email, otp }: { email: string; otp: string }) => {\n      const response = await apiRequest('POST', '/api/auth/verify-signup-otp', { email, otp });\n      return await response.json();\n    },\n    onSuccess: (data: any) => {\n      if (data.token && data.user) {\n        localStorage.setItem('auth_token', data.token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n        toast({\n          title: \"Welcome to SmartClinic!\",\n          description: `Account created successfully for ${data.user.firstName}. Welcome to your healthcare dashboard.`,\n        });\n        window.location.href = '/dashboard';\n      }\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Verification Failed\",\n        description: error.message || \"Invalid verification code. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleGoogleSignup = async () => {\n    setIsLoading(true);\n    try {\n      const user = await signInWithGoogle();\n      \n      // First try to login (in case user already exists)\n      try {\n        const loginResponse = await apiRequest('POST', '/api/auth/firebase-login', {\n          firebaseUid: user.uid,\n          email: user.email,\n          name: user.displayName || user.email?.split('@')[0] || 'User'\n        });\n        \n        const loginData = await loginResponse.json();\n        if (loginData.token) {\n          localStorage.setItem('auth_token', loginData.token);\n          toast({\n            title: \"Welcome Back!\",\n            description: \"Successfully signed in with Google.\",\n          });\n          window.location.href = '/dashboard';\n          return;\n        }\n      } catch (loginError) {\n        // User doesn't exist, proceed with signup\n        console.log('User not found, creating new account...');\n      }\n      \n      // Create new patient account with Google data\n      await createPatientMutation.mutateAsync({\n        firstName: user.displayName?.split(' ')[0] || user.email?.split('@')[0] || 'Patient',\n        lastName: user.displayName?.split(' ').slice(1).join(' ') || 'User',\n        email: user.email,\n        phoneNumber: user.phoneNumber || '',\n        firebaseUid: user.uid,\n        authProvider: 'google'\n      });\n    } catch (error: any) {\n      let errorMessage = \"Failed to sign up with Google. Please try again.\";\n      \n      if (error.message?.includes('domain')) {\n        errorMessage = \"Google sign-in is not configured for this domain. Please use email signup instead.\";\n      } else if (error.message?.includes('popup')) {\n        errorMessage = \"Popup was blocked. Please allow popups or use email signup.\";\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      \n      toast({\n        title: \"Google Signup Failed\",\n        description: errorMessage,\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleEmailSignup = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (formData.password !== formData.confirmPassword) {\n      toast({\n        title: \"Password Mismatch\",\n        description: \"Passwords do not match. Please try again.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (formData.password.length < 6) {\n      toast({\n        title: \"Password Too Short\",\n        description: \"Password must be at least 6 characters long.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Send OTP for email verification\n    await sendSignupOtpMutation.mutateAsync(formData);\n  };\n\n  const handleVerifyOtp = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (otp.length !== 6) {\n      toast({\n        title: \"Invalid OTP\",\n        description: \"Please enter the complete 6-digit verification code.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    verifySignupOtpMutation.mutate({ email: formData.email, otp });\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  // OTP Verification Step\n  if (step === 'otp') {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n        <div className=\"w-full max-w-md\">\n          <Card className=\"shadow-xl border-0 bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm\">\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"mx-auto bg-green-100 dark:bg-green-900 w-16 h-16 rounded-full flex items-center justify-center mb-4\">\n                <Mail className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n              </div>\n              <CardTitle className=\"text-2xl font-bold text-gray-900 dark:text-white\">Verify Your Email</CardTitle>\n              <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Enter the 6-digit code sent to {formData.email}</p>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-4\">\n              {developmentOtp && (\n                <div className=\"p-3 bg-yellow-100 dark:bg-yellow-900 border border-yellow-300 dark:border-yellow-700 rounded-md\">\n                  <p className=\"text-sm text-yellow-800 dark:text-yellow-200\">\n                    <strong>Development Mode:</strong> Your verification code is: {developmentOtp}\n                  </p>\n                </div>\n              )}\n              \n              <form onSubmit={handleVerifyOtp} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"otp\">Verification Code</Label>\n                  <Input\n                    id=\"otp\"\n                    type=\"text\"\n                    placeholder=\"Enter 6-digit code\"\n                    value={otp}\n                    onChange={(e) => setOtp(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n                    maxLength={6}\n                    className=\"text-center text-lg tracking-widest\"\n                    data-testid=\"input-otp\"\n                  />\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full py-3 bg-green-600 hover:bg-green-700 text-white\"\n                  disabled={verifySignupOtpMutation.isPending}\n                  data-testid=\"button-verify-otp\"\n                >\n                  {verifySignupOtpMutation.isPending ? \"Verifying...\" : \"Verify & Create Account\"}\n                </Button>\n                \n                <Button \n                  type=\"button\" \n                  variant=\"outline\"\n                  className=\"w-full\"\n                  onClick={() => setStep('signup')}\n                  data-testid=\"button-back-signup\"\n                >\n                  Back to Signup\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-xl border-0 bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm\">\n          <CardHeader className=\"text-center pb-4\">\n            <div className=\"mx-auto bg-blue-100 dark:bg-blue-900 w-16 h-16 rounded-full flex items-center justify-center mb-4\">\n              <UserPlus className=\"w-8 h-8 text-blue-600 dark:text-blue-400\" />\n            </div>\n            <CardTitle className=\"text-2xl font-bold text-gray-900 dark:text-white\">Create Patient Account</CardTitle>\n            <p className=\"text-gray-600 dark:text-gray-400 mt-2\">Join SmartClinic for better healthcare management</p>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            {/* Google Signup Button */}\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"w-full py-3 border-2 hover:bg-gray-50 dark:hover:bg-gray-800\"\n              onClick={handleGoogleSignup}\n              disabled={isLoading}\n              data-testid=\"button-google-signup\"\n            >\n              <Chrome className=\"w-5 h-5 mr-2\" />\n              Continue with Google\n            </Button>\n\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <span className=\"w-full border-t border-gray-300 dark:border-gray-600\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-white dark:bg-gray-900 px-2 text-gray-500\">Or sign up with email</span>\n              </div>\n            </div>\n\n            {/* Email Signup Form */}\n            <form onSubmit={handleEmailSignup} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                    <Input\n                      id=\"firstName\"\n                      type=\"text\"\n                      placeholder=\"First name\"\n                      className=\"pl-10\"\n                      value={formData.firstName}\n                      onChange={(e) => handleInputChange('firstName', e.target.value)}\n                      required\n                      data-testid=\"input-firstname\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input\n                    id=\"lastName\"\n                    type=\"text\"\n                    placeholder=\"Last name\"\n                    value={formData.lastName}\n                    onChange={(e) => handleInputChange('lastName', e.target.value)}\n                    required\n                    data-testid=\"input-lastname\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"email\">Email Address</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your email address\"\n                    className=\"pl-10\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Create a password\"\n                    className=\"pl-10\"\n                    value={formData.password}\n                    onChange={(e) => handleInputChange('password', e.target.value)}\n                    required\n                    data-testid=\"input-password\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    placeholder=\"Confirm your password\"\n                    className=\"pl-10\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                    required\n                    data-testid=\"input-confirm-password\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"phoneNumber\">Phone Number (Optional)</Label>\n                <div className=\"relative\">\n                  <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"phoneNumber\"\n                    type=\"tel\"\n                    placeholder=\"Your phone number\"\n                    className=\"pl-10\"\n                    value={formData.phoneNumber}\n                    onChange={(e) => handleInputChange('phoneNumber', e.target.value)}\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"dateOfBirth\">Date of Birth (Optional)</Label>\n                <Input\n                  id=\"dateOfBirth\"\n                  type=\"date\"\n                  value={formData.dateOfBirth}\n                  onChange={(e) => handleInputChange('dateOfBirth', e.target.value)}\n                  data-testid=\"input-dob\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"address\">Address (Optional)</Label>\n                <div className=\"relative\">\n                  <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"address\"\n                    type=\"text\"\n                    placeholder=\"Your address\"\n                    className=\"pl-10\"\n                    value={formData.address}\n                    onChange={(e) => handleInputChange('address', e.target.value)}\n                    data-testid=\"input-address\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"emergencyContact\">Emergency Contact (Optional)</Label>\n                <div className=\"relative\">\n                  <Heart className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"emergencyContact\"\n                    type=\"text\"\n                    placeholder=\"Emergency contact information\"\n                    className=\"pl-10\"\n                    value={formData.emergencyContact}\n                    onChange={(e) => handleInputChange('emergencyContact', e.target.value)}\n                    data-testid=\"input-emergency\"\n                  />\n                </div>\n              </div>\n              \n              <Button \n                type=\"submit\" \n                className=\"w-full py-3 bg-blue-600 hover:bg-blue-700 text-white\"\n                disabled={sendSignupOtpMutation.isPending}\n                data-testid=\"button-create-account\"\n              >\n                {sendSignupOtpMutation.isPending ? \"Sending Verification...\" : \"Create Account\"}\n              </Button>\n            </form>\n\n            <div className=\"text-center\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Already have an account?{' '}\n                <a \n                  href=\"/patient-login\" \n                  className=\"text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 font-medium\"\n                  data-testid=\"link-login\"\n                >\n                  Sign in here\n                </a>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n                <span className=\"bg-white dark:bg-gray-900 px-2 text-gray-500\">Or signup with email</span>\n              </div>\n            </div>\n\n            {/* Email Signup Form */}\n            <form onSubmit={handleEmailSignup} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div>\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                    <Input\n                      id=\"firstName\"\n                      type=\"text\"\n                      placeholder=\"John\"\n                      className=\"pl-10\"\n                      value={formData.firstName}\n                      onChange={(e) => handleInputChange('firstName', e.target.value)}\n                      required\n                      data-testid=\"input-first-name\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                    <Input\n                      id=\"lastName\"\n                      type=\"text\"\n                      placeholder=\"Doe\"\n                      className=\"pl-10\"\n                      value={formData.lastName}\n                      onChange={(e) => handleInputChange('lastName', e.target.value)}\n                      required\n                      data-testid=\"input-last-name\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"email\">Email Address</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"john@example.com\"\n                    className=\"pl-10\"\n                    value={formData.email}\n                    onChange={(e) => handleInputChange('email', e.target.value)}\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"phoneNumber\">Phone Number</Label>\n                <div className=\"relative\">\n                  <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"phoneNumber\"\n                    type=\"tel\"\n                    placeholder=\"+1 (555) 123-4567\"\n                    className=\"pl-10\"\n                    value={formData.phoneNumber}\n                    onChange={(e) => handleInputChange('phoneNumber', e.target.value)}\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"dateOfBirth\">Date of Birth</Label>\n                <Input\n                  id=\"dateOfBirth\"\n                  type=\"date\"\n                  value={formData.dateOfBirth}\n                  onChange={(e) => handleInputChange('dateOfBirth', e.target.value)}\n                  data-testid=\"input-date-of-birth\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"••••••••\"\n                    className=\"pl-10\"\n                    value={formData.password}\n                    onChange={(e) => handleInputChange('password', e.target.value)}\n                    required\n                    minLength={6}\n                    data-testid=\"input-password\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    placeholder=\"••••••••\"\n                    className=\"pl-10\"\n                    value={formData.confirmPassword}\n                    onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                    required\n                    minLength={6}\n                    data-testid=\"input-confirm-password\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"address\">Address (Optional)</Label>\n                <div className=\"relative\">\n                  <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"address\"\n                    type=\"text\"\n                    placeholder=\"123 Main St, City, State\"\n                    className=\"pl-10\"\n                    value={formData.address}\n                    onChange={(e) => handleInputChange('address', e.target.value)}\n                    data-testid=\"input-address\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"emergencyContact\">Emergency Contact (Optional)</Label>\n                <div className=\"relative\">\n                  <Heart className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <Input\n                    id=\"emergencyContact\"\n                    type=\"text\"\n                    placeholder=\"Emergency contact name and phone\"\n                    className=\"pl-10\"\n                    value={formData.emergencyContact}\n                    onChange={(e) => handleInputChange('emergencyContact', e.target.value)}\n                    data-testid=\"input-emergency-contact\"\n                  />\n                </div>\n              </div>\n\n              <Button \n                type=\"submit\" \n                className=\"w-full py-3 bg-blue-600 hover:bg-blue-700 text-white\"\n                disabled={isLoading || createPatientMutation.isPending}\n                data-testid=\"button-signup\"\n              >\n                {isLoading || createPatientMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n            </form>\n\n            <div className=\"text-center pt-4\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Already have an account?{' '}\n                <a href=\"/patient-login\" className=\"text-blue-600 hover:text-blue-500 font-medium\">\n                  Sign in here\n                </a>\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":25245},"README.md":{"content":"# SmartClinic - Healthcare Management System\n\nA comprehensive healthcare management platform designed to enhance patient and staff engagement through intelligent location-based tracking and dynamic workflow management, with a focus on creating an intuitive and interactive user experience.\n\n## 🏥 Overview\n\nSmartClinic is a full-stack web application that serves multiple user roles including patients, doctors, staff, and administrators. The platform streamlines clinic operations with features for appointment management, patient queuing, medication reminders, home visits, and GPS-enabled staff verification.\n\n## ✨ Key Features\n\n### 👥 Multi-Role Support\n- **Patients**: Book appointments, join queues, receive medication reminders\n- **Doctors**: Manage appointments, view patient queues, prescribe medications\n- **Staff**: Check-in/out with GPS verification, manage patient flow\n- **Administrators**: Full system control, user management, analytics\n\n### 🔐 Advanced Authentication\n- Phone number-based OTP verification\n- Firebase authentication with Google OAuth and email/password\n- Multi-factor authentication with SMS verification\n- Role-based access control with hierarchical permissions\n- JWT token-based sessions with IP tracking\n\n### 📍 Location-Based Features\n- GPS-enabled staff check-in/check-out system\n- Location verification for Bangalore clinic locations:\n  - Bangalore Central Clinic (12.9716, 77.5946)\n  - Whitefield Branch\n  - Koramangala Clinic\n  - Electronic City Clinic\n- 150-200m radius verification for staff presence\n\n### ⚡ Real-Time Operations\n- Live patient queue management with Server-Sent Events\n- Automatic queue wait time updates every 60 seconds\n- Real-time appointment notifications\n- Live staff coordination and presence tracking\n\n### 📧 Communication & Notifications\n- Automated SMS reminders via Twilio integration\n- Email notifications using Gmail SMTP and Resend\n- OTP delivery for secure authentication\n- Appointment and medication reminder system\n\n### 💊 Medical Management\n- Comprehensive medicine inventory tracking\n- Prescription management system\n- Medical history tracking\n- Stock level monitoring with low-stock alerts\n\n## 🛠 Technology Stack\n\n### Frontend\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite with hot module replacement\n- **UI Components**: Shadcn/ui built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom healthcare theme\n- **State Management**: TanStack Query for server state\n- **Routing**: Wouter for client-side routing\n- **Forms**: React Hook Form with Zod validation\n- **Icons**: Lucide React icons\n\n### Backend\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Neon serverless connection\n- **ORM**: Drizzle ORM with type-safe queries\n- **Authentication**: JWT with bcrypt password hashing\n- **Real-time**: WebSocket and Server-Sent Events\n- **Email**: Nodemailer with Gmail SMTP, Resend fallback\n- **SMS**: Twilio integration for OTP and notifications\n\n### Database & Infrastructure\n- **Database**: Neon PostgreSQL with connection pooling\n- **Schema Management**: Drizzle Kit for migrations\n- **Environment**: Development and production configurations\n- **Deployment**: Replit with automatic restarts\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Node.js 20.x or higher\n- PostgreSQL database (Neon recommended)\n- Gmail app password for email notifications\n- Firebase project for authentication\n- Twilio account for SMS (optional)\n\n### Environment Variables\n\nThe following secrets need to be configured in your Replit environment:\n\n```bash\n# Database Configuration\nDATABASE_URL=your_postgresql_connection_string\nPGDATABASE=your_database_name\nPGHOST=your_database_host\nPGPORT=5432\nPGUSER=your_database_user\nPGPASSWORD=your_database_password\n\n# Email Service\nGMAIL_USER=your_gmail_address\nGMAIL_APP_PASSWORD=your_gmail_app_password\n\n# Session Security\nSESSION_SECRET=your_secure_session_secret\n\n# Firebase Authentication (Frontend)\nVITE_FIREBASE_API_KEY=your_firebase_api_key\nVITE_FIREBASE_AUTH_DOMAIN=your_firebase_auth_domain\nVITE_FIREBASE_PROJECT_ID=your_firebase_project_id\nVITE_FIREBASE_APP_ID=your_firebase_app_id\n\n# SMS Service (Optional)\nTWILIO_ACCOUNT_SID=your_twilio_account_sid\nTWILIO_AUTH_TOKEN=your_twilio_auth_token\nTWILIO_PHONE_NUMBER=your_twilio_phone_number\n```\n\n### Installation & Setup\n\n1. **Clone and Install Dependencies**\n   ```bash\n   npm install\n   ```\n\n2. **Database Setup**\n   ```bash\n   # Push schema to database\n   npm run db:push\n   \n   # Generate types (if needed)\n   npm run db:generate\n   ```\n\n3. **Firebase Setup**\n   - Enable Authentication in Firebase Console\n   - Configure Email/Password and Google sign-in methods\n   - Add your domain to authorized domains\n   - See `FIREBASE_SETUP.md` for detailed instructions\n\n4. **Start Development Server**\n   ```bash\n   npm run dev\n   ```\n\nThe application will be available at `http://localhost:5000`\n\n## 📱 Application Structure\n\n### Key Directories\n```\n├── client/                 # React frontend application\n│   ├── src/\n│   │   ├── components/    # Reusable UI components\n│   │   ├── pages/         # Application pages/routes\n│   │   ├── lib/           # Utilities and configurations\n│   │   └── hooks/         # Custom React hooks\n├── server/                # Express backend application\n│   ├── routes.ts         # API route definitions\n│   ├── storage.ts        # Database operations\n│   ├── services/         # External service integrations\n│   └── middleware/       # Authentication & validation\n├── shared/               # Shared types and schemas\n│   └── schema.ts        # Drizzle database schema\n└── migrations/          # Database migration files\n```\n\n### User Roles & Access Levels\n\n1. **Super Admin** (`44441100sf@gmail.com`)\n   - Full system access and user management\n   - Clinic registration approval\n   - System analytics and reporting\n\n2. **Admin**\n   - Clinic-level administration\n   - Staff and patient management\n   - Appointment scheduling\n\n3. **Doctor**\n   - Patient consultation\n   - Prescription management\n   - Queue management\n\n4. **Staff**\n   - Patient check-in/out\n   - Queue management\n   - GPS-based attendance\n\n5. **Patient**\n   - Appointment booking\n   - Queue joining\n   - Medical history access\n\n## 🔒 Security Features\n\n### Authentication & Authorization\n- Multi-factor authentication with OTP verification\n- Firebase integration for secure user management\n- JWT tokens with IP tracking and device fingerprinting\n- Role-based access control with route protection\n- Session management with secure cookies\n\n### Data Protection\n- Password hashing with bcrypt\n- SQL injection prevention with parameterized queries\n- XSS protection with input sanitization\n- CORS configuration for secure cross-origin requests\n\n### Location Verification\n- GPS-based staff check-in with 150-200m radius verification\n- Geolocation API integration for accurate positioning\n- Anti-spoofing measures for location data\n\n## 🏥 Healthcare Workflows\n\n### Patient Journey\n1. **Registration**: Firebase authentication with phone/email\n2. **Appointment Booking**: Select doctor, date, and time\n3. **Queue Management**: Join digital queue, receive updates\n4. **Consultation**: Doctor interaction and prescription\n5. **Follow-up**: Medication reminders and next appointments\n\n### Staff Operations\n1. **GPS Check-in**: Location-verified attendance\n2. **Patient Management**: Queue handling and patient flow\n3. **Real-time Updates**: Live dashboard with current status\n4. **Check-out**: End-of-day location verification\n\n### Administrative Tasks\n1. **User Management**: Approve staff and manage permissions\n2. **Analytics**: View clinic performance metrics\n3. **Inventory**: Medicine stock management\n4. **Reporting**: Generate operational reports\n\n## 📊 Real-Time Features\n\n### Queue Management\n- Live patient queue with estimated wait times\n- Automatic queue progression\n- WebSocket updates for real-time synchronization\n- SMS notifications for queue status changes\n\n### Staff Coordination\n- Real-time staff presence tracking\n- Live dashboard with current staffing levels\n- Automatic attendance logging with GPS verification\n- Staff communication and coordination tools\n\n## 🔧 Development & Deployment\n\n### Available Scripts\n```bash\nnpm run dev          # Start development server\nnpm run build        # Build for production\nnpm run db:push      # Push schema changes to database\nnpm run db:generate  # Generate Drizzle types\nnpm run preview      # Preview production build\n```\n\n### Database Management\n- Use `npm run db:push` for schema changes (never write manual SQL migrations)\n- Drizzle ORM handles type safety and query optimization\n- Automatic connection pooling with Neon PostgreSQL\n\n### Production Deployment\n- Optimized build with Vite\n- Static asset serving through Express\n- Environment-based configuration\n- Automatic health checks and restarts\n\n## 📞 Support & Contact\n\nFor technical support or feature requests:\n- **Primary Contact**: 44441100sf@gmail.com\n- **Email Notifications**: Automatic alerts for new clinic registrations\n- **SMS Support**: Twilio integration for critical notifications\n\n## 📄 License\n\nThis project is proprietary software developed for healthcare management operations.\n\n## 🔄 Recent Updates (August 2025)\n\n- ✅ Fixed major authentication vulnerabilities and implemented proper role-based access control\n- ✅ Added super admin access restrictions for enhanced security\n- ✅ Implemented Firebase patient authentication with Google OAuth\n- ✅ Added automatic email notifications for clinic registrations\n- ✅ Enhanced dark mode functionality with independent toggle\n- ✅ Updated location services from Mumbai to Bangalore with multiple clinic locations\n- ✅ Improved GPS verification system with configurable radius settings\n\n---\n\n*SmartClinic - Enhancing healthcare delivery through intelligent technology*","size_bytes":10051},"client/src/components/UnifiedEmergencyAlerts.tsx":{"content":"\"use client\"\n\nimport React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { AlertTriangle, Pill, User, Clock, Phone, Mail, MessageSquare, CheckCircle, Eye } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\n\ninterface EmergencyRequest {\n  id: string;\n  patientId: string;\n  urgencyLevel: 'low' | 'medium' | 'high' | 'critical';\n  symptoms: string;\n  contactMethod: 'phone' | 'sms' | 'email';\n  location?: string;\n  status: 'pending' | 'acknowledged' | 'resolved';\n  createdAt: string;\n  patient: {\n    id: string;\n    firstName: string;\n    lastName: string;\n    phoneNumber: string;\n    email: string;\n  };\n}\n\ninterface Medicine {\n  id: string;\n  name: string;\n  stock: number;\n  description: string;\n  dosageForm: string;\n  strength: string;\n  manufacturer: string;\n}\n\ninterface LowStockAlert {\n  id: string;\n  name: string;\n  stock: number;\n  threshold: number;\n  description: string;\n  dosageForm: string;\n  strength: string;\n}\n\ninterface UnifiedEmergencyAlertsProps {\n  onTestAlerts?: () => void;\n}\n\nexport function UnifiedEmergencyAlerts({ onTestAlerts }: UnifiedEmergencyAlertsProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedRequest, setSelectedRequest] = useState<EmergencyRequest | null>(null);\n  const [responseNotes, setResponseNotes] = useState('');\n  const [showResponseDialog, setShowResponseDialog] = useState(false);\n\n  // Fetch emergency requests\n  const { data: emergencyRequests = [], isLoading: requestsLoading } = useQuery({\n    queryKey: ['/api/emergency'],\n    refetchInterval: 10000, // Refresh every 10 seconds for real-time updates\n  });\n\n  // Fetch medicines for low stock monitoring\n  const { data: medicines = [], isLoading: medicinesLoading } = useQuery({\n    queryKey: ['/api/medicines'],\n    refetchInterval: 30000, // Refresh every 30 seconds to reduce fluctuation\n  });\n\n  // Calculate low stock alerts\n  const lowStockAlerts: LowStockAlert[] = Array.isArray(medicines)\n    ? (medicines as Medicine[])\n        .filter((medicine: Medicine) => medicine.stock <= 10) // Default threshold of 10\n        .map((medicine: Medicine) => ({\n          id: medicine.id,\n          name: medicine.name,\n          stock: medicine.stock,\n          threshold: 10,\n          description: medicine.description,\n          dosageForm: medicine.dosageForm,\n          strength: medicine.strength,\n        }))\n    : [];\n\n  // Acknowledge emergency request mutation\n  const acknowledgeRequestMutation = useMutation({\n    mutationFn: async ({ requestId, notes }: { requestId: string; notes: string }) => {\n      const response = await apiRequest('PATCH', `/api/emergency/${requestId}`, {\n        status: 'acknowledged',\n        responseNotes: notes,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/emergency'] });\n      setShowResponseDialog(false);\n      setSelectedRequest(null);\n      setResponseNotes('');\n      toast({\n        title: \"Request Acknowledged\",\n        description: \"Emergency request has been acknowledged successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Acknowledge Failed\",\n        description: error.message || \"Failed to acknowledge emergency request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Resolve emergency request mutation\n  const resolveRequestMutation = useMutation({\n    mutationFn: async ({ requestId, notes }: { requestId: string; notes: string }) => {\n      const response = await apiRequest('PATCH', `/api/emergency/${requestId}`, {\n        status: 'resolved',\n        responseNotes: notes,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/emergency'] });\n      setShowResponseDialog(false);\n      setSelectedRequest(null);\n      setResponseNotes('');\n      toast({\n        title: \"Request Resolved\",\n        description: \"Emergency request has been marked as resolved.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Resolve Failed\",\n        description: error.message || \"Failed to resolve emergency request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getUrgencyColor = (urgency: string) => {\n    switch (urgency) {\n      case 'critical': return 'bg-red-500 text-white';\n      case 'high': return 'bg-orange-500 text-white';\n      case 'medium': return 'bg-yellow-500 text-black';\n      case 'low': return 'bg-blue-500 text-white';\n      default: return 'bg-gray-500 text-white';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pending': return 'bg-red-100 text-red-800';\n      case 'acknowledged': return 'bg-yellow-100 text-yellow-800';\n      case 'resolved': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const handleAcknowledge = (request: EmergencyRequest) => {\n    setSelectedRequest(request);\n    setShowResponseDialog(true);\n  };\n\n  const handleSubmitResponse = (action: 'acknowledge' | 'resolve') => {\n    if (!selectedRequest) return;\n\n    if (action === 'acknowledge') {\n      acknowledgeRequestMutation.mutate({\n        requestId: selectedRequest.id,\n        notes: responseNotes,\n      });\n    } else {\n      resolveRequestMutation.mutate({\n        requestId: selectedRequest.id,\n        notes: responseNotes,\n      });\n    }\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n    return `${Math.floor(diffInMinutes / 1440)}d ago`;\n  };\n\n  const pendingRequests = Array.isArray(emergencyRequests) \n    ? (emergencyRequests as EmergencyRequest[]).filter((req: EmergencyRequest) => req.status === 'pending')\n    : [];\n  const criticalLowStock = lowStockAlerts.filter(alert => alert.stock <= 5);\n  const totalAlerts = pendingRequests.length + lowStockAlerts.length;\n\n  if (requestsLoading || medicinesLoading) {\n    return (\n      <Card className=\"border-red-200 bg-red-50 dark:bg-red-950/20\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"text-red-700 dark:text-red-300 flex items-center gap-2\">\n            <AlertTriangle className=\"w-5 h-5\" />\n            Emergency Alerts\n          </CardTitle>\n          <p className=\"text-sm text-red-600 dark:text-red-400\">Loading alerts...</p>\n        </CardHeader>\n      </Card>\n    );\n  }\n\n  return (\n    <>\n      <Card className={`border-red-200 ${totalAlerts > 0 ? 'bg-red-50 dark:bg-red-950/20' : 'bg-gray-50 dark:bg-gray-800'}`}>\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className={`flex items-center gap-2 ${totalAlerts > 0 ? 'text-red-700 dark:text-red-300' : 'text-gray-600 dark:text-gray-300'}`}>\n              <AlertTriangle className=\"w-5 h-5\" />\n              Emergency Alerts\n            </CardTitle>\n\n          </div>\n          <p className={`text-sm ${totalAlerts > 0 ? 'text-red-600 dark:text-red-400' : 'text-gray-500 dark:text-gray-400'}`}>\n            {totalAlerts > 0 ? 'Urgent notifications requiring immediate attention' : 'No active emergency alerts at this time.'}\n          </p>\n        </CardHeader>\n        \n        <CardContent>\n          {totalAlerts === 0 ? (\n            <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n              <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-full flex items-center justify-center mb-3\">\n                <CheckCircle className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n              </div>\n              <p className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-1\">All Clear!</p>\n              <p className=\"text-sm text-gray-500 dark:text-gray-400\">No emergency alerts at this time.</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* Patient Emergency Requests */}\n              {pendingRequests.length > 0 && (\n                <div>\n                  <h4 className=\"text-sm font-semibold text-red-700 dark:text-red-300 mb-2 flex items-center gap-1\">\n                    <User className=\"w-4 h-4\" />\n                    Patient Emergency Requests ({pendingRequests.length})\n                  </h4>\n                  <div className=\"space-y-2\">\n                    {pendingRequests.map((request: EmergencyRequest) => (\n                      <div key={request.id} className=\"border border-red-200 rounded-lg p-3 bg-white dark:bg-gray-800\">\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <div className=\"flex items-center gap-2\">\n                            <Badge className={getUrgencyColor(request.urgencyLevel)}>\n                              {request.urgencyLevel.toUpperCase()}\n                            </Badge>\n                            <Badge className={getStatusColor(request.status)}>\n                              {request.status}\n                            </Badge>\n                          </div>\n                          <span className=\"text-xs text-gray-500 flex items-center gap-1\">\n                            <Clock className=\"w-3 h-3\" />\n                            {formatTimeAgo(request.createdAt)}\n                          </span>\n                        </div>\n                        \n                        <div className=\"mb-2\">\n                          <p className=\"font-medium text-sm text-gray-900 dark:text-gray-100\">\n                            {request.patient.firstName} {request.patient.lastName}\n                          </p>\n                          <p className=\"text-xs text-gray-600 dark:text-gray-400 flex items-center gap-1\">\n                            <Phone className=\"w-3 h-3\" />\n                            {request.patient.phoneNumber}\n                          </p>\n                        </div>\n                        \n                        <p className=\"text-sm text-gray-700 dark:text-gray-300 mb-2\">\n                          <strong>Symptoms:</strong> {request.symptoms}\n                        </p>\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-1 text-xs text-gray-500\">\n                            {request.contactMethod === 'phone' && <Phone className=\"w-3 h-3\" />}\n                            {request.contactMethod === 'email' && <Mail className=\"w-3 h-3\" />}\n                            {request.contactMethod === 'sms' && <MessageSquare className=\"w-3 h-3\" />}\n                            Contact via {request.contactMethod}\n                          </div>\n                          \n                          <div className=\"flex gap-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleAcknowledge(request)}\n                              className=\"text-xs\"\n                            >\n                              <Eye className=\"w-3 h-3 mr-1\" />\n                              Respond\n                            </Button>\n                          </div>\n                        </div>\n                        \n                        {request.location && (\n                          <p className=\"text-xs text-gray-500 mt-1\">\n                            <strong>Location:</strong> {request.location}\n                          </p>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n              \n              {/* Medicine Low Stock Alerts */}\n              {lowStockAlerts.length > 0 && (\n                <div>\n                  <h4 className=\"text-sm font-semibold text-orange-700 dark:text-orange-300 mb-2 flex items-center gap-1\">\n                    <Pill className=\"w-4 h-4\" />\n                    Low Stock Medicines ({lowStockAlerts.length})\n                  </h4>\n                  <div className=\"space-y-2\">\n                    {lowStockAlerts.map((alert: LowStockAlert) => (\n                      <div key={alert.id} className=\"border border-orange-200 rounded-lg p-3 bg-orange-50 dark:bg-orange-950/20\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <p className=\"font-medium text-sm text-gray-900 dark:text-gray-100\">\n                            {alert.name}\n                          </p>\n                          <Badge className={alert.stock <= 5 ? 'bg-red-500 text-white' : 'bg-orange-500 text-white'}>\n                            {alert.stock} left\n                          </Badge>\n                        </div>\n                        <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-1\">\n                          {alert.strength} • {alert.dosageForm}\n                        </p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {alert.description}\n                        </p>\n                        {alert.stock <= 5 && (\n                          <div className=\"mt-2\">\n                            <Badge className=\"bg-red-600 text-white text-xs\">\n                              CRITICAL - Reorder immediately\n                            </Badge>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Response Dialog */}\n      <Dialog open={showResponseDialog} onOpenChange={setShowResponseDialog}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"w-5 h-5 text-red-500\" />\n              Respond to Emergency Request\n            </DialogTitle>\n          </DialogHeader>\n          \n          {selectedRequest && (\n            <div className=\"space-y-4\">\n              <div className=\"border rounded-lg p-3 bg-gray-50 dark:bg-gray-800\">\n                <p className=\"font-medium text-sm mb-1\">\n                  {selectedRequest.patient.firstName} {selectedRequest.patient.lastName}\n                </p>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-2\">\n                  {selectedRequest.patient.phoneNumber} • {selectedRequest.patient.email}\n                </p>\n                <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n                  <strong>Symptoms:</strong> {selectedRequest.symptoms}\n                </p>\n                <div className=\"flex gap-2 mt-2\">\n                  <Badge className={getUrgencyColor(selectedRequest.urgencyLevel)}>\n                    {selectedRequest.urgencyLevel.toUpperCase()}\n                  </Badge>\n                  <Badge className={getStatusColor(selectedRequest.status)}>\n                    {selectedRequest.status}\n                  </Badge>\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"response-notes\">Response Notes</Label>\n                <Textarea\n                  id=\"response-notes\"\n                  placeholder=\"Enter response notes, instructions, or next steps...\"\n                  value={responseNotes}\n                  onChange={(e) => setResponseNotes(e.target.value)}\n                  className=\"mt-1\"\n                />\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button\n                  onClick={() => handleSubmitResponse('acknowledge')}\n                  disabled={acknowledgeRequestMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  {acknowledgeRequestMutation.isPending ? 'Acknowledging...' : 'Acknowledge'}\n                </Button>\n                <Button\n                  onClick={() => handleSubmitResponse('resolve')}\n                  disabled={resolveRequestMutation.isPending}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  {resolveRequestMutation.isPending ? 'Resolving...' : 'Mark Resolved'}\n                </Button>\n              </div>\n              \n              <Button\n                variant=\"ghost\"\n                onClick={() => {\n                  setShowResponseDialog(false);\n                  setSelectedRequest(null);\n                  setResponseNotes('');\n                }}\n                className=\"w-full\"\n              >\n                Cancel\n              </Button>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":17582}}}